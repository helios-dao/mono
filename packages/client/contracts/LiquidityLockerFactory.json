{
  "address": "0xa387a75585440791ddf23b58cF9E77a2918284D8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityLocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        }
      ],
      "name": "LiquidityLockerCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factoryType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        }
      ],
      "name": "newLocker",
      "outputs": [
        {
          "internalType": "address",
          "name": "liquidityLocker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x715cca454b88e13116003a6bb6d1eaf5469248864828fcc6518c73cc94d4511e",
  "receipt": {
    "to": null,
    "from": "0x66BAD169980554a81AA6DBf33b0515101336fd80",
    "contractAddress": "0xa387a75585440791ddf23b58cF9E77a2918284D8",
    "transactionIndex": 25,
    "gasUsed": "661468",
    "logsBloom": "0x
    "blockHash": "0x8b186df6f725ac282e2f7dc5d44b75c74a35905109c8d0d04f9a93e8fa84ca5f",
    "transactionHash": "0x715cca454b88e13116003a6bb6d1eaf5469248864828fcc6518c73cc94d4511e",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 26030179,
        "transactionHash": "0x715cca454b88e13116003a6bb6d1eaf5469248864828fcc6518c73cc94d4511e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000066bad169980554a81aa6dbf33b0515101336fd80",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000077d7824fe7f5800000000000000000000000000000000000000000000000003ee2d5cc0480fb800000000000000000000000000000000000000000000124c215673e04b1f43c200000000000000000000000000000000000000000000000003e6afe49b49906000000000000000000000000000000000000000000000124c215df158701dc31a",
        "logIndex": 155,
        "blockHash": "0x8b186df6f725ac282e2f7dc5d44b75c74a35905109c8d0d04f9a93e8fa84ca5f"
      }
    ],
    "blockNumber": 26030179,
    "cumulativeGasUsed": "5466426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dffa7e128f2b675162a5be10778a0091",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"}],\"name\":\"LiquidityLockerCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factoryType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"}],\"name\":\"newLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLocker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"newLocker(address)\":{\"details\":\"Instantiates a LiquidityLocker contract.It emits a `LiquidityLockerCreated` event.\",\"params\":{\"liquidityAsset\":\"The Liquidity Asset this LiquidityLocker will escrow.\"},\"returns\":{\"liquidityLocker\":\"Address of the instantiated LiquidityLocker.\"}}},\"title\":\"LiquidityLockerFactory instantiates LiquidityLockers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"packages/protocol/contracts/LiquidityLockerFactory.sol\":\"LiquidityLockerFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"packages/protocol/contracts/LiquidityLocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ILoan.sol\\\";\\n\\n/// @title LiquidityLocker holds custody of Liquidity Asset tokens for a given Pool.\\ncontract LiquidityLocker {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable pool;            // The Pool that owns this LiquidityLocker.\\n    IERC20  public immutable liquidityAsset;  // The Liquidity Asset which this LiquidityLocker will escrow.\\n\\n    constructor(address _liquidityAsset, address _pool) public {\\n        liquidityAsset = IERC20(_liquidityAsset);\\n        pool           = _pool;\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool.\\n    */\\n    modifier isPool() {\\n        require(msg.sender == pool, \\\"LL:NOT_P\\\");\\n        _;\\n    }\\n\\n    /**\\n        @dev   Transfers amount of Liquidity Asset to a destination account. Only the Pool can call this function.\\n        @param dst Destination to transfer Liquidity Asset to.\\n        @param amt Amount of Liquidity Asset to transfer.\\n    */\\n    function transfer(address dst, uint256 amt) external isPool {\\n        require(dst != address(0), \\\"LL:NULL_DST\\\");\\n        liquidityAsset.safeTransfer(dst, amt);\\n    }\\n\\n    /**\\n        @dev   Funds a Loan using available assets in this LiquidityLocker. Only the Pool can call this function.\\n        @param loan       The Loan to fund.\\n        @param debtLocker The DebtLocker that will escrow debt tokens.\\n        @param amt        Amount of Liquidity Asset to fund the Loan for.\\n    */\\n    function fundLoan(address loan, address debtLocker, uint256 amt) external isPool {\\n        liquidityAsset.safeApprove(loan, amt);\\n        ILoan(loan).fundLoan(debtLocker, amt);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd161dd3876ecf7c4a60ff32b18f3054356db8c906ab4c4f5c740715efa42c868\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/LiquidityLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./LiquidityLocker.sol\\\";\\n\\n/// @title LiquidityLockerFactory instantiates LiquidityLockers.\\ncontract LiquidityLockerFactory {\\n\\n    mapping(address => address) public owner;     // Mapping of LiquidityLocker addresses to their owner (i.e owner[locker] = Owner of the LiquidityLocker).\\n    mapping(address => bool)    public isLocker;  // True only if a LiquidityLocker was created by this factory.\\n\\n    uint8 public constant factoryType = 3;        // i.e LockerFactoryTypes::LIQUIDITY_LOCKER_FACTORY\\n\\n    event LiquidityLockerCreated(address indexed owner, address liquidityLocker, address liquidityAsset);\\n\\n    /**\\n        @dev    Instantiates a LiquidityLocker contract.\\n        @dev    It emits a `LiquidityLockerCreated` event.\\n        @param  liquidityAsset  The Liquidity Asset this LiquidityLocker will escrow.\\n        @return liquidityLocker Address of the instantiated LiquidityLocker.\\n    */\\n    function newLocker(address liquidityAsset) external returns (address liquidityLocker) {\\n        liquidityLocker           = address(new LiquidityLocker(liquidityAsset, msg.sender));\\n        owner[liquidityLocker]    = msg.sender;\\n        isLocker[liquidityLocker] = true;\\n\\n        emit LiquidityLockerCreated(msg.sender, liquidityLocker, liquidityAsset);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdf53c5bd3ec2217769af07f429c0b5d8bed6d59822a4cf6411b5d9e0efe40c61\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/ILoan.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"../token/interfaces/ILoanFDT.sol\\\";\\n\\ninterface ILoan is ILoanFDT {\\n    \\n    // State Variables\\n    function liquidityAsset() external view returns (address);\\n    \\n    function collateralAsset() external view returns (address);\\n    \\n    function fundingLocker() external view returns (address);\\n    \\n    function flFactory() external view returns (address);\\n    \\n    function collateralLocker() external view returns (address);\\n    \\n    function clFactory() external view returns (address);\\n    \\n    function borrower() external view returns (address);\\n    \\n    function repaymentCalc() external view returns (address);\\n    \\n    function lateFeeCalc() external view returns (address);\\n    \\n    function premiumCalc() external view returns (address);\\n    \\n    function loanState() external view returns (uint256);\\n    \\n    function collateralRequiredForDrawdown(uint256) external view returns (uint256);\\n    \\n\\n    // Loan Specifications\\n    function apr() external view returns (uint256);\\n    \\n    function paymentsRemaining() external view returns (uint256);\\n    \\n    function paymentIntervalSeconds() external view returns (uint256);\\n    \\n    function requestAmount() external view returns (uint256);\\n    \\n    function collateralRatio() external view returns (uint256);\\n    \\n    function fundingPeriod() external view returns (uint256);\\n\\n    function defaultGracePeriod() external view returns (uint256);\\n    \\n    function createdAt() external view returns (uint256);\\n    \\n    function principalOwed() external view returns (uint256);\\n    \\n    function principalPaid() external view returns (uint256);\\n    \\n    function interestPaid() external view returns (uint256);\\n    \\n    function feePaid() external view returns (uint256);\\n    \\n    function excessReturned() external view returns (uint256);\\n    \\n    function getNextPayment() external view returns (uint256, uint256, uint256, uint256);\\n    \\n    function superFactory() external view returns (address);\\n    \\n    function termDays() external view returns (uint256);\\n    \\n    function nextPaymentDue() external view returns (uint256);\\n\\n    function getFullPayment() external view returns (uint256, uint256, uint256);\\n    \\n\\n    // Liquidations\\n    function amountLiquidated() external view returns (uint256);\\n\\n    function defaultSuffered() external view returns (uint256);\\n    \\n    function amountRecovered() external view returns (uint256);\\n    \\n    function getExpectedAmountRecovered() external view returns (uint256);\\n\\n    function liquidationExcess() external view returns (uint256);\\n    \\n\\n    // Functions\\n    function fundLoan(address, uint256) external;\\n    \\n    function makePayment() external;\\n    \\n    function drawdown(uint256) external;\\n    \\n    function makeFullPayment() external;\\n    \\n    function triggerDefault() external;\\n    \\n    function unwind() external;\\n    \\n\\n    // Security \\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function loanAdmins(address) external view returns (address);\\n\\n    function setLoanAdmin(address, bool) external;\\n\\n\\n    // Misc\\n    function reclaimERC20(address) external;\\n\\n}\\n\",\"keccak256\":\"0x7c50e1a006af27cbaae68e9dc5c8fd5a9376a73f97baf1bebea0af3d8eac93f2\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IBaseFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IBaseFDT {\\n\\n    /**\\n        @dev    Returns the total amount of funds a given address is able to withdraw currently.\\n        @param  owner Address of FDT holder.\\n        @return A uint256 representing the available funds for a given account.\\n    */\\n    function withdrawableFundsOf(address owner) external view returns (uint256);\\n\\n    /**\\n        @dev Withdraws all available funds for a FDT holder.\\n    */\\n    function withdrawFunds() external;\\n\\n    /**\\n        @dev   This event emits when new funds are distributed.\\n        @param by               The address of the sender that distributed funds.\\n        @param fundsDistributed The amount of funds received for distribution.\\n    */\\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\\n\\n    /**\\n        @dev   This event emits when distributed funds are withdrawn by a token holder.\\n        @param by             The address of the receiver of funds.\\n        @param fundsWithdrawn The amount of funds that were withdrawn.\\n        @param totalWithdrawn The total amount of funds that were withdrawn.\\n    */\\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\\n\\n}\\n\",\"keccak256\":\"0x193e2bfefd17da5ca2a34a9d21ce231419bf848561704221a7e96ee6e648ec37\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IBasicFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IBaseFDT.sol\\\";\\n\\ninterface IBasicFDT is IBaseFDT, IERC20 {\\n\\n    event PointsPerShareUpdated(uint256);\\n\\n    event PointsCorrectionUpdated(address indexed, int256);\\n\\n    function withdrawnFundsOf(address) external view returns (uint256);\\n\\n    function accumulativeFundsOf(address) external view returns (uint256);\\n\\n    function updateFundsReceived() external;\\n\\n}\\n\",\"keccak256\":\"0x86c22f508230af0cfbc6b3c5c258e3bd783504f5649279c9534735d042b0d8fa\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/ILoanFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./IBasicFDT.sol\\\";\\n\\ninterface ILoanFDT is IBasicFDT {\\n\\n    function fundsToken() external view returns (address);\\n\\n    function fundsTokenBalance() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xbb553cbcc946e90244bda8b216b68a76467dbeb486daf04c7c3c13e39411f96c\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b0b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806319eb783a146100515780632ec63d7c1461009357806364e1fd55146100cd578063666e1b39146100eb575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b0316610111565b604080516001600160a01b039092168252519081900360200190f35b6100b9600480360360208110156100a957600080fd5b50356001600160a01b03166101d9565b604080519115158252519081900360200190f35b6100d56101ee565b6040805160ff9092168252519081900360200190f35b6100776004803603602081101561010157600080fd5b50356001600160a01b03166101f3565b600081336040516101219061020e565b6001600160a01b03928316815291166020820152604080519182900301906000f080158015610154573d6000803e3d6000fd5b506001600160a01b0380821660008181526020818152604080832080546001600160a01b03191633908117909155600180845293829020805460ff19169094179093558051938452938716908301528251939450927f69269b3068a3e7096157a812e3202533d347594a672c9729cfd5f0310219e151929181900390910190a2919050565b60016020526000908152604090205460ff1681565b600381565b6000602081905290815260409020546001600160a01b031681565b6108ba8061021c8339019056fe60c060405234801561001057600080fd5b506040516108ba3803806108ba8339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b811660a052911b1660805260805160601c60a05160601c6108296100916000398061017a5280610226528061030652508060e35280610110528061025352506108296000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316f0115b146100515780631aa37cec14610075578063209b2bca146100ad578063a9059cbb146100b5575b600080fd5b6100596100e1565b604080516001600160a01b039092168252519081900360200190f35b6100ab6004803603606081101561008b57600080fd5b506001600160a01b03813581169160208101359091169060400135610105565b005b610059610224565b6100ab600480360360408110156100cb57600080fd5b506001600160a01b038135169060200135610248565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461016d576040805162461bcd60e51b815260206004820152600860248201526704c4c3a4e4f545f560c41b604482015290519081900360640190fd5b6101a76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848363ffffffff61033716565b826001600160a01b031663e920b1e183836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561020757600080fd5b505af115801561021b573d6000803e3d6000fd5b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102b0576040805162461bcd60e51b815260206004820152600860248201526704c4c3a4e4f545f560c41b604482015290519081900360640190fd5b6001600160a01b0382166102f9576040805162461bcd60e51b815260206004820152600b60248201526a13130e9395531317d114d560aa1b604482015290519081900360640190fd5b6103336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838363ffffffff61044f16565b5050565b8015806103bd575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561038f57600080fd5b505afa1580156103a3573d6000803e3d6000fd5b505050506040513d60208110156103b957600080fd5b5051155b6103f85760405162461bcd60e51b81526004018080602001828103825260368152602001806107be6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261044a90849061049d565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261044a9084905b60606104f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661054e9092919063ffffffff16565b80519091501561044a5780806020019051602081101561051157600080fd5b505161044a5760405162461bcd60e51b815260040180806020018281038252602a815260200180610794602a913960400191505060405180910390fd5b606061055d8484600085610567565b90505b9392505050565b6060824710156105a85760405162461bcd60e51b815260040180806020018281038252602681526020018061076e6026913960400191505060405180910390fd5b6105b1856106c3565b610602576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106106415780518252601f199092019160209182019101610622565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146106a3576040519150601f19603f3d011682016040523d82523d6000602084013e6106a8565b606091505b50915091506106b88282866106c9565b979650505050505050565b3b151590565b606083156106d8575081610560565b8251156106e85782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561073257818101518382015260200161071a565b50505050905090810190601f16801561075f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212201399c654f9a405aebd2c09e584e160cf37538eb12e93fed6889f1fa3f8a8d19b64736f6c634300060b0033a2646970667358221220ea0a2a3b7f93ba97164e49b342394a796c20f1fc8eb21a847dd90edad388d09864736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806319eb783a146100515780632ec63d7c1461009357806364e1fd55146100cd578063666e1b39146100eb575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b0316610111565b604080516001600160a01b039092168252519081900360200190f35b6100b9600480360360208110156100a957600080fd5b50356001600160a01b03166101d9565b604080519115158252519081900360200190f35b6100d56101ee565b6040805160ff9092168252519081900360200190f35b6100776004803603602081101561010157600080fd5b50356001600160a01b03166101f3565b600081336040516101219061020e565b6001600160a01b03928316815291166020820152604080519182900301906000f080158015610154573d6000803e3d6000fd5b506001600160a01b0380821660008181526020818152604080832080546001600160a01b03191633908117909155600180845293829020805460ff19169094179093558051938452938716908301528251939450927f69269b3068a3e7096157a812e3202533d347594a672c9729cfd5f0310219e151929181900390910190a2919050565b60016020526000908152604090205460ff1681565b600381565b6000602081905290815260409020546001600160a01b031681565b6108ba8061021c8339019056fe60c060405234801561001057600080fd5b506040516108ba3803806108ba8339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b811660a052911b1660805260805160601c60a05160601c6108296100916000398061017a5280610226528061030652508060e35280610110528061025352506108296000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316f0115b146100515780631aa37cec14610075578063209b2bca146100ad578063a9059cbb146100b5575b600080fd5b6100596100e1565b604080516001600160a01b039092168252519081900360200190f35b6100ab6004803603606081101561008b57600080fd5b506001600160a01b03813581169160208101359091169060400135610105565b005b610059610224565b6100ab600480360360408110156100cb57600080fd5b506001600160a01b038135169060200135610248565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461016d576040805162461bcd60e51b815260206004820152600860248201526704c4c3a4e4f545f560c41b604482015290519081900360640190fd5b6101a76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848363ffffffff61033716565b826001600160a01b031663e920b1e183836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561020757600080fd5b505af115801561021b573d6000803e3d6000fd5b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102b0576040805162461bcd60e51b815260206004820152600860248201526704c4c3a4e4f545f560c41b604482015290519081900360640190fd5b6001600160a01b0382166102f9576040805162461bcd60e51b815260206004820152600b60248201526a13130e9395531317d114d560aa1b604482015290519081900360640190fd5b6103336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838363ffffffff61044f16565b5050565b8015806103bd575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561038f57600080fd5b505afa1580156103a3573d6000803e3d6000fd5b505050506040513d60208110156103b957600080fd5b5051155b6103f85760405162461bcd60e51b81526004018080602001828103825260368152602001806107be6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261044a90849061049d565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261044a9084905b60606104f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661054e9092919063ffffffff16565b80519091501561044a5780806020019051602081101561051157600080fd5b505161044a5760405162461bcd60e51b815260040180806020018281038252602a815260200180610794602a913960400191505060405180910390fd5b606061055d8484600085610567565b90505b9392505050565b6060824710156105a85760405162461bcd60e51b815260040180806020018281038252602681526020018061076e6026913960400191505060405180910390fd5b6105b1856106c3565b610602576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106106415780518252601f199092019160209182019101610622565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146106a3576040519150601f19603f3d011682016040523d82523d6000602084013e6106a8565b606091505b50915091506106b88282866106c9565b979650505050505050565b3b151590565b606083156106d8575081610560565b8251156106e85782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561073257818101518382015260200161071a565b50505050905090810190601f16801561075f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212201399c654f9a405aebd2c09e584e160cf37538eb12e93fed6889f1fa3f8a8d19b64736f6c634300060b0033a2646970667358221220ea0a2a3b7f93ba97164e49b342394a796c20f1fc8eb21a847dd90edad388d09864736f6c634300060b0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "newLocker(address)": {
        "details": "Instantiates a LiquidityLocker contract.It emits a `LiquidityLockerCreated` event.",
        "params": {
          "liquidityAsset": "The Liquidity Asset this LiquidityLocker will escrow."
        },
        "returns": {
          "liquidityLocker": "Address of the instantiated LiquidityLocker."
        }
      }
    },
    "title": "LiquidityLockerFactory instantiates LiquidityLockers.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6557,
        "contract": "packages/protocol/contracts/LiquidityLockerFactory.sol:LiquidityLockerFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6561,
        "contract": "packages/protocol/contracts/LiquidityLockerFactory.sol:LiquidityLockerFactory",
        "label": "isLocker",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}