{
  "address": "0x85322f42ED83C64C4c41937Ae485733EB6896c06",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeLocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "StakeLockerCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factoryType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        }
      ],
      "name": "newLocker",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakeLocker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8350b6dcf07130f0e4899a5316d197c91221c3088da1e38494e0d224a728ffc",
  "receipt": {
    "to": null,
    "from": "0x66BAD169980554a81AA6DBf33b0515101336fd80",
    "contractAddress": "0x85322f42ED83C64C4c41937Ae485733EB6896c06",
    "transactionIndex": 21,
    "gasUsed": "3949524",
    "logsBloom": "0x
    "blockHash": "0x863d4fd0760bb0f0a3a822203b99b2b3be0348bb1722b0fb0e447d0731e5c474",
    "transactionHash": "0xc8350b6dcf07130f0e4899a5316d197c91221c3088da1e38494e0d224a728ffc",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 26030178,
        "transactionHash": "0xc8350b6dcf07130f0e4899a5316d197c91221c3088da1e38494e0d224a728ffc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000066bad169980554a81aa6dbf33b0515101336fd80",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002cb8ea4e3e6c88000000000000000000000000000000000000000000000000041ae6471286fd5400000000000000000000000000000000000000000000124c1f1f094b88a82fc200000000000000000000000000000000000000000000000003ee2d5cc44890cc00000000000000000000000000000000000000000000124c1f4bc235d6e69c4a",
        "logIndex": 147,
        "blockHash": "0x863d4fd0760bb0f0a3a822203b99b2b3be0348bb1722b0fb0e447d0731e5c474"
      }
    ],
    "blockNumber": 26030178,
    "cumulativeGasUsed": "8527177",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dffa7e128f2b675162a5be10778a0091",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"StakeLockerCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factoryType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"}],\"name\":\"newLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"newLocker(address,address)\":{\"details\":\"Instantiate a StakeLocker.It emits a `StakeLockerCreated` event.\",\"params\":{\"liquidityAsset\":\"Address of the Liquidity Asset (as defined in the Pool).\",\"stakeAsset\":\"Address of the Stake Asset (generally Balancer Pool BPTs).\"},\"returns\":{\"stakeLocker\":\"   Address of the instantiated StakeLocker.\"}}},\"title\":\"StakeLockerFactory instantiates StakeLockers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"packages/protocol/contracts/StakeLockerFactory.sol\":\"StakeLockerFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"packages/protocol/contracts/StakeLocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/IHeliosGlobals.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IPoolFactory.sol\\\";\\n\\nimport \\\"./token/StakeLockerFDT.sol\\\";\\n\\n/// @title StakeLocker holds custody of stakeAsset tokens for a given Pool and earns revenue from interest.\\ncontract StakeLocker is StakeLockerFDT, Pausable {\\n\\n    using SafeMathInt    for int256;\\n    using SignedSafeMath for int256;\\n    using SafeERC20      for IERC20;\\n\\n    uint256 constant WAD = 10 ** 18;  // Scaling factor for synthetic float division.\\n\\n    IERC20  public immutable stakeAsset;  // The asset deposited by Stakers into this contract, for liquidation during defaults.\\n\\n    address public immutable liquidityAsset;  // The Liquidity Asset for the Pool as well as the dividend token for StakeLockerFDT interest.\\n    address public immutable pool;            // The parent Pool.\\n\\n    uint256 public lockupPeriod;  // Number of seconds for which unstaking is not allowed.\\n\\n    mapping(address => uint256)                     public stakeDate;              // Map of account addresses to effective stake date.\\n    mapping(address => uint256)                     public unstakeCooldown;        // The timestamp of when a Staker called `cooldown()`.\\n    mapping(address => bool)                        public allowed;                // Map of addresses to allowed status.\\n    mapping(address => mapping(address => uint256)) public custodyAllowance;       // Amount of StakeLockerFDTs that are \\\"locked\\\" at a certain address.\\n    mapping(address => uint256)                     public totalCustodyAllowance;  // Total amount of StakeLockerFDTs that are \\\"locked\\\" for a given account, cannot be greater than balance.\\n\\n    bool public openToPublic;  // Boolean opening StakeLocker to public for staking BPTs\\n\\n    event            StakeLockerOpened();\\n    event               BalanceUpdated(address indexed staker, address indexed token, uint256 balance);\\n    event             AllowListUpdated(address indexed staker, bool status);\\n    event             StakeDateUpdated(address indexed staker, uint256 stakeDate);\\n    event          LockupPeriodUpdated(uint256 lockupPeriod);\\n    event                     Cooldown(address indexed staker, uint256 cooldown);\\n    event                        Stake(address indexed staker, uint256 amount);\\n    event                      Unstake(address indexed staker, uint256 amount);\\n    event              CustodyTransfer(address indexed custodian, address indexed from, address indexed to, uint256 amount);\\n    event      CustodyAllowanceChanged(address indexed staker, address indexed custodian, uint256 oldAllowance, uint256 newAllowance);\\n    event TotalCustodyAllowanceUpdated(address indexed staker, uint256 newTotalAllowance);\\n\\n    constructor(\\n        address _stakeAsset,\\n        address _liquidityAsset,\\n        address _pool\\n    ) StakeLockerFDT(\\\"Helios StakeLocker\\\", \\\"HLSSTAKE\\\", _liquidityAsset) public {\\n        liquidityAsset = _liquidityAsset;\\n        stakeAsset     = IERC20(_stakeAsset);\\n        pool           = _pool;\\n        lockupPeriod   = 180 days;\\n    }\\n\\n    /*****************/\\n    /*** Modifiers ***/\\n    /*****************/\\n\\n    /**\\n        @dev Checks that an account can unstake given the following conditions:\\n                 1. The Account is not the Pool Delegate and the Pool is in Finalized state.\\n                 2. The Pool is in Initialized or Deactivated state.\\n    */\\n    modifier canUnstake(address from) {\\n        IPool _pool = IPool(pool);\\n\\n        // The Pool cannot be finalized, but if it is, account cannot be the Pool Delegate.\\n        require(!_pool.isPoolFinalized() || from != _pool.poolDelegate(), \\\"SL:STAKE_LOCKED\\\");\\n        _;\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Governor.\\n    */\\n    modifier isGovernor() {\\n        require(msg.sender == _globals().governor(), \\\"SL:NOT_GOV\\\");\\n        _;\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool.\\n    */\\n    modifier isPool() {\\n        require(msg.sender == pool, \\\"SL:NOT_P\\\");\\n        _;\\n    }\\n\\n    /**********************/\\n    /*** Pool Functions ***/\\n    /**********************/\\n\\n    /**\\n        @dev   Updates Staker status on the allowlist. Only the Pool Delegate can call this function.\\n        @dev   It emits an `AllowListUpdated` event.\\n        @param staker The address of the Staker to set status for.\\n        @param status The status of the Staker on allowlist.\\n    */\\n    function setAllowlist(address staker, bool status) public {\\n        _whenProtocolNotPaused();\\n        _isValidPoolDelegate();\\n        allowed[staker] = status;\\n        emit AllowListUpdated(staker, status);\\n    }\\n\\n    /**\\n        @dev Sets the StakeLocker as open to the public. Only the Pool Delegate can call this function.\\n        @dev It emits a `StakeLockerOpened` event.\\n    */\\n    function openStakeLockerToPublic() external {\\n        _whenProtocolNotPaused();\\n        _isValidPoolDelegate();\\n        openToPublic = true;\\n        emit StakeLockerOpened();\\n    }\\n\\n    /**\\n        @dev   Sets the lockup period. Only the Pool Delegate can call this function.\\n        @dev   It emits a `LockupPeriodUpdated` event.\\n        @param newLockupPeriod New lockup period used to restrict unstaking.\\n    */\\n    function setLockupPeriod(uint256 newLockupPeriod) external {\\n        _whenProtocolNotPaused();\\n        _isValidPoolDelegate();\\n        require(newLockupPeriod <= lockupPeriod, \\\"SL:INVALID_VALUE\\\");\\n        lockupPeriod = newLockupPeriod;\\n        emit LockupPeriodUpdated(newLockupPeriod);\\n    }\\n\\n    /**\\n        @dev   Transfers an amount of Stake Asset to a destination account. Only the Pool can call this function.\\n        @param dst Destination to transfer Stake Asset to.\\n        @param amt Amount of Stake Asset to transfer.\\n    */\\n    function pull(address dst, uint256 amt) isPool external {\\n        stakeAsset.safeTransfer(dst, amt);\\n    }\\n\\n    /**\\n        @dev   Updates loss accounting for StakeLockerFDTs after BPTs have been burned. Only the Pool can call this function.\\n        @param bptsBurned Amount of BPTs that have been burned.\\n    */\\n    function updateLosses(uint256 bptsBurned) isPool external {\\n        bptLosses = bptLosses.add(bptsBurned);\\n        updateLossesReceived();\\n    }\\n\\n    /************************/\\n    /*** Staker Functions ***/\\n    /************************/\\n\\n    /**\\n        @dev   Handles a Staker's depositing of an amount of Stake Asset, minting them StakeLockerFDTs.\\n        @dev   It emits a `StakeDateUpdated` event.\\n        @dev   It emits a `Stake` event.\\n        @dev   It emits a `Cooldown` event.\\n        @dev   It emits a `BalanceUpdated` event.\\n        @param amt Amount of Stake Asset (BPTs) to deposit.\\n    */\\n    function stake(uint256 amt) whenNotPaused external {\\n        _whenProtocolNotPaused();\\n        _isAllowed(msg.sender);\\n\\n        unstakeCooldown[msg.sender] = uint256(0);  // Reset account's unstake cooldown if Staker had previously intended to unstake.\\n\\n        _updateStakeDate(msg.sender, amt);\\n\\n        stakeAsset.safeTransferFrom(msg.sender, address(this), amt);\\n        _mint(msg.sender, amt);\\n\\n        emit Stake(msg.sender, amt);\\n        emit Cooldown(msg.sender, uint256(0));\\n        emit BalanceUpdated(address(this), address(stakeAsset), stakeAsset.balanceOf(address(this)));\\n    }\\n\\n    /**\\n        @dev   Updates information used to calculate unstake delay.\\n        @dev   It emits a `StakeDateUpdated` event.\\n        @param account The Staker that deposited BPTs.\\n        @param amt     Amount of BPTs the Staker has deposited.\\n    */\\n    function _updateStakeDate(address account, uint256 amt) internal {\\n        uint256 prevDate = stakeDate[account];\\n        uint256 balance = balanceOf(account);\\n\\n        // stakeDate + (now - stakeDate) * (amt / (balance + amt))\\n        // NOTE: prevDate = 0 implies balance = 0, and equation reduces to now.\\n        uint256 newDate = (balance + amt) > 0\\n            ? prevDate.add(block.timestamp.sub(prevDate).mul(amt).div(balance + amt))\\n            : prevDate;\\n\\n        stakeDate[account] = newDate;\\n        emit StakeDateUpdated(account, newDate);\\n    }\\n\\n    /**\\n        @dev Activates the cooldown period to unstake. It can't be called if the account is not staking.\\n        @dev It emits a `Cooldown` event.\\n    **/\\n    function intendToUnstake() external {\\n        require(balanceOf(msg.sender) != uint256(0), \\\"SL:ZERO_BALANCE\\\");\\n        unstakeCooldown[msg.sender] = block.timestamp;\\n        emit Cooldown(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n        @dev Cancels an initiated unstake by resetting the calling account's unstake cooldown.\\n        @dev It emits a `Cooldown` event.\\n    */\\n    function cancelUnstake() external {\\n        require(unstakeCooldown[msg.sender] != uint256(0), \\\"SL:NOT_UNSTAKING\\\");\\n        unstakeCooldown[msg.sender] = 0;\\n        emit Cooldown(msg.sender, uint256(0));\\n    }\\n\\n    /**\\n        @dev   Handles a Staker's withdrawing of an amount of Stake Asset, minus any losses. It also claims interest and burns StakeLockerFDTs for the calling account.\\n        @dev   It emits an `Unstake` event.\\n        @dev   It emits a `BalanceUpdated` event.\\n        @param amt Amount of Stake Asset (BPTs) to withdraw.\\n    */\\n    function unstake(uint256 amt) external canUnstake(msg.sender) {\\n        _whenProtocolNotPaused();\\n\\n        require(balanceOf(msg.sender).sub(amt) >= totalCustodyAllowance[msg.sender], \\\"SL:INSUF_UNSTAKEABLE_BAL\\\");  // Account can only unstake tokens that aren't custodied\\n        require(isUnstakeAllowed(msg.sender),                                        \\\"SL:OUTSIDE_COOLDOWN\\\");\\n        require(stakeDate[msg.sender].add(lockupPeriod) <= block.timestamp,          \\\"SL:FUNDS_LOCKED\\\");\\n\\n        updateFundsReceived();   // Account for any funds transferred into contract since last call.\\n        _burn(msg.sender, amt);  // Burn the corresponding StakeLockerFDTs balance.\\n        withdrawFunds();         // Transfer the full entitled Liquidity Asset interest.\\n\\n        stakeAsset.safeTransfer(msg.sender, amt.sub(_recognizeLosses()));  // Unstake amount minus losses.\\n\\n        emit Unstake(msg.sender, amt);\\n        emit BalanceUpdated(address(this), address(stakeAsset), stakeAsset.balanceOf(address(this)));\\n    }\\n\\n    /**\\n        @dev Withdraws all claimable interest earned from the StakeLocker for an account.\\n        @dev It emits a `BalanceUpdated` event if there are withdrawable funds.\\n    */\\n    function withdrawFunds() public override {\\n        _whenProtocolNotPaused();\\n\\n        uint256 withdrawableFunds = _prepareWithdraw();\\n\\n        if (withdrawableFunds == uint256(0)) return;\\n\\n        fundsToken.safeTransfer(msg.sender, withdrawableFunds);\\n        emit BalanceUpdated(address(this), address(fundsToken), fundsToken.balanceOf(address(this)));\\n\\n        _updateFundsTokenBalance();\\n    }\\n\\n    /**\\n        @dev   Increases the custody allowance for a given Custodian corresponding to the account (`msg.sender`).\\n        @dev   It emits a `CustodyAllowanceChanged` event.\\n        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\\n        @param custodian Address which will act as Custodian of a given amount for an account.\\n        @param amount    Number of additional FDTs to be custodied by the Custodian.\\n    */\\n    function increaseCustodyAllowance(address custodian, uint256 amount) external {\\n        uint256 oldAllowance      = custodyAllowance[msg.sender][custodian];\\n        uint256 newAllowance      = oldAllowance.add(amount);\\n        uint256 newTotalAllowance = totalCustodyAllowance[msg.sender].add(amount);\\n\\n        require(custodian != address(0),                    \\\"SL:INVALID_CUSTODIAN\\\");\\n        require(amount    != uint256(0),                    \\\"SL:INVALID_AMT\\\");\\n        require(newTotalAllowance <= balanceOf(msg.sender), \\\"SL:INSUF_BALANCE\\\");\\n\\n        custodyAllowance[msg.sender][custodian] = newAllowance;\\n        totalCustodyAllowance[msg.sender]       = newTotalAllowance;\\n        emit CustodyAllowanceChanged(msg.sender, custodian, oldAllowance, newAllowance);\\n        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\\n    }\\n\\n    /**\\n        @dev   Transfers custodied StakeLockerFDTs back to the account.\\n        @dev   `from` and `to` should always be equal in this implementation.\\n        @dev   This means that the Custodian can only decrease their own allowance and unlock funds for the original owner.\\n        @dev   It emits a `CustodyTransfer` event.\\n        @dev   It emits a `CustodyAllowanceChanged` event.\\n        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\\n        @param from   Address which holds the StakeLockerFDTs.\\n        @param to     Address which will be the new owner of the amount of StakeLockerFDTs.\\n        @param amount Amount of StakeLockerFDTs transferred.\\n    */\\n    function transferByCustodian(address from, address to, uint256 amount) external {\\n        uint256 oldAllowance = custodyAllowance[from][msg.sender];\\n        uint256 newAllowance = oldAllowance.sub(amount);\\n\\n        require(to == from,             \\\"SL:INVALID_RECEIVER\\\");\\n        require(amount != uint256(0),   \\\"SL:INVALID_AMT\\\");\\n\\n        custodyAllowance[from][msg.sender] = newAllowance;\\n        uint256 newTotalAllowance          = totalCustodyAllowance[from].sub(amount);\\n        totalCustodyAllowance[from]        = newTotalAllowance;\\n        emit CustodyTransfer(msg.sender, from, to, amount);\\n        emit CustodyAllowanceChanged(from, msg.sender, oldAllowance, newAllowance);\\n        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\\n    }\\n\\n    /**\\n        @dev   Transfers StakeLockerFDTs.\\n        @param from Address sending   StakeLockerFDTs.\\n        @param to   Address receiving StakeLockerFDTs.\\n        @param wad  Amount of StakeLockerFDTs to transfer.\\n    */\\n    function _transfer(address from, address to, uint256 wad) internal override canUnstake(from) {\\n        _whenProtocolNotPaused();\\n        require(stakeDate[from].add(lockupPeriod) <= block.timestamp,    \\\"SL:FUNDS_LOCKED\\\");            // Restrict withdrawal during lockup period\\n        require(balanceOf(from).sub(wad) >= totalCustodyAllowance[from], \\\"SL:INSUF_TRANSFERABLE_BAL\\\");  // Account can only transfer tokens that aren't custodied\\n        require(isReceiveAllowed(unstakeCooldown[to]),                   \\\"SL:RECIPIENT_NOT_ALLOWED\\\");   // Recipient must not be currently unstaking\\n        require(recognizableLossesOf(from) == uint256(0),                \\\"SL:RECOG_LOSSES\\\");            // If a staker has unrecognized losses, they must recognize losses through unstake\\n        _updateStakeDate(to, wad);                                                                      // Update stake date of recipient\\n        super._transfer(from, to, wad);\\n    }\\n\\n    /***********************/\\n    /*** Admin Functions ***/\\n    /***********************/\\n\\n    /**\\n        @dev Triggers paused state. Halts functionality for certain functions. Only the Pool Delegate or a Pool Admin can call this function.\\n    */\\n    function pause() external {\\n        _isValidPoolDelegateOrPoolAdmin();\\n        super._pause();\\n    }\\n\\n    /**\\n        @dev Triggers unpaused state. Restores functionality for certain functions. Only the Pool Delegate or a Pool Admin can call this function.\\n    */\\n    function unpause() external {\\n        _isValidPoolDelegateOrPoolAdmin();\\n        super._unpause();\\n    }\\n\\n    /************************/\\n    /*** Helper Functions ***/\\n    /************************/\\n\\n    /**\\n        @dev Returns if the unstake cooldown period has passed for `msg.sender` and if they are in the unstake window.\\n    */\\n    function isUnstakeAllowed(address from) public view returns (bool) {\\n        IHeliosGlobals globals = _globals();\\n        return (block.timestamp - (unstakeCooldown[from] + globals.stakerCooldownPeriod())) <= globals.stakerUnstakeWindow();\\n    }\\n\\n    /**\\n        @dev Returns if an account is allowed to receive a transfer.\\n             This is only possible if they have zero cooldown or they are past their unstake window.\\n    */\\n    function isReceiveAllowed(uint256 _unstakeCooldown) public view returns (bool) {\\n        IHeliosGlobals globals = _globals();\\n        return block.timestamp > (_unstakeCooldown + globals.stakerCooldownPeriod() + globals.stakerUnstakeWindow());\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool Delegate or a Pool Admin.\\n    */\\n    function _isValidPoolDelegateOrPoolAdmin() internal view {\\n        require(msg.sender == IPool(pool).poolDelegate() || IPool(pool).poolAdmins(msg.sender), \\\"SL:NOT_DELEGATE_OR_ADMIN\\\");\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool Delegate.\\n    */\\n    function _isValidPoolDelegate() internal view {\\n        require(msg.sender == IPool(pool).poolDelegate(), \\\"SL:NOT_DELEGATE\\\");\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is allowed to stake.\\n    */\\n    function _isAllowed(address account) internal view {\\n        require(\\n            openToPublic || allowed[account] || account == IPool(pool).poolDelegate(),\\n            \\\"SL:NOT_ALLOWED\\\"\\n        );\\n    }\\n\\n    /**\\n        @dev Returns the HeliosGlobals instance.\\n    */\\n    function _globals() internal view returns (IHeliosGlobals) {\\n        return IHeliosGlobals(IPoolFactory(IPool(pool).superFactory()).globals());\\n    }\\n\\n    /**\\n        @dev Checks that the protocol is not in a paused state.\\n    */\\n    function _whenProtocolNotPaused() internal view {\\n        require(!_globals().protocolPaused(), \\\"SL:PROTO_PAUSED\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf1802c7fb95d9b99205cb3859ba2815b6a14d3f41440c86cbc9799023c864d2f\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/StakeLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./StakeLocker.sol\\\";\\n\\n/// @title StakeLockerFactory instantiates StakeLockers.\\ncontract StakeLockerFactory {\\n\\n    mapping(address => address) public owner;     // Mapping of StakeLocker addresses to their owner (i.e owner[locker] = Owner of the StakeLocker).\\n    mapping(address => bool)    public isLocker;  // True only if a StakeLocker was created by this factory.\\n\\n    uint8 public constant factoryType = 4;  // i.e FactoryType::STAKE_LOCKER_FACTORY.\\n\\n    event StakeLockerCreated(\\n        address indexed owner,\\n        address stakeLocker,\\n        address stakeAsset,\\n        address liquidityAsset,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n        @dev    Instantiate a StakeLocker.\\n        @dev    It emits a `StakeLockerCreated` event.\\n        @param  stakeAsset     Address of the Stake Asset (generally Balancer Pool BPTs).\\n        @param  liquidityAsset Address of the Liquidity Asset (as defined in the Pool).\\n        @return stakeLocker    Address of the instantiated StakeLocker.\\n    */\\n    function newLocker(\\n        address stakeAsset,\\n        address liquidityAsset\\n    ) external returns (address stakeLocker) {\\n        stakeLocker           = address(new StakeLocker(stakeAsset, liquidityAsset, msg.sender));\\n        owner[stakeLocker]    = msg.sender;\\n        isLocker[stakeLocker] = true;\\n\\n        emit StakeLockerCreated(\\n            msg.sender,\\n            stakeLocker,\\n            stakeAsset,\\n            liquidityAsset,\\n            StakeLocker(stakeLocker).name(),\\n            StakeLocker(stakeLocker).symbol()\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x73b89074dae1306f6a382a3b3233165cfb41deb542df7cae6a7ef36f9dcec7f2\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IHeliosGlobals.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IHeliosGlobals {\\n\\n    function pendingGovernor() external view returns (address);\\n\\n    function governor() external view returns (address);\\n\\n    function globalAdmin() external view returns (address);\\n\\n    function hls() external view returns (address);\\n\\n    function heliosTreasury() external view returns (address);\\n\\n    function isValidBalancerPool(address) external view returns (bool);\\n\\n    function treasuryFee() external view returns (uint256);\\n\\n    function investorFee() external view returns (uint256);\\n\\n    function defaultGracePeriod() external view returns (uint256);\\n\\n    function fundingPeriod() external view returns (uint256);\\n\\n    function swapOutRequired() external view returns (uint256);\\n\\n    function isValidLiquidityAsset(address) external view returns (bool);\\n\\n    function isValidCollateralAsset(address) external view returns (bool);\\n\\n    function isValidPoolDelegate(address) external view returns (bool);\\n\\n    function validCalcs(address) external view returns (bool);\\n\\n    function isValidCalc(address, uint8) external view returns (bool);\\n\\n    function getLpCooldownParams() external view returns (uint256, uint256);\\n\\n    function isValidLoanFactory(address) external view returns (bool);\\n\\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\\n\\n    function isValidPoolFactory(address) external view returns (bool);\\n\\n    function getLatestPrice(address) external view returns (uint256);\\n\\n    function defaultUniswapPath(address, address) external view returns (address);\\n\\n    function minLoanEquity() external view returns (uint256);\\n\\n    function maxSwapSlippage() external view returns (uint256);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function stakerCooldownPeriod() external view returns (uint256);\\n\\n    function lpCooldownPeriod() external view returns (uint256);\\n\\n    function stakerUnstakeWindow() external view returns (uint256);\\n\\n    function lpWithdrawWindow() external view returns (uint256);\\n\\n    function oracleFor(address) external view returns (address);\\n\\n    function validSubFactories(address, address) external view returns (bool);\\n\\n    function setStakerCooldownPeriod(uint256) external;\\n\\n    function setLpCooldownPeriod(uint256) external;\\n\\n    function setStakerUnstakeWindow(uint256) external;\\n\\n    function setLpWithdrawWindow(uint256) external;\\n\\n    function setMaxSwapSlippage(uint256) external;\\n\\n    function setGlobalAdmin(address) external;\\n\\n    function setValidBalancerPool(address, bool) external;\\n\\n    function setProtocolPause(bool) external;\\n\\n    function setValidPoolFactory(address, bool) external;\\n\\n    function setValidLoanFactory(address, bool) external;\\n\\n    function setValidSubFactory(address, address, bool) external;\\n\\n    function setDefaultUniswapPath(address, address, address) external;\\n\\n    function setPoolDelegateAllowlist(address, bool) external;\\n\\n    function setCollateralAsset(address, bool) external;\\n\\n    function setLiquidityAsset(address, bool) external;\\n\\n    function setCalc(address, bool) external;\\n\\n    function setInvestorFee(uint256) external;\\n\\n    function setTreasuryFee(uint256) external;\\n\\n    function setHeliosTreasury(address) external;\\n\\n    function setDefaultGracePeriod(uint256) external;\\n\\n    function setMinLoanEquity(uint256) external;\\n\\n    function setFundingPeriod(uint256) external;\\n\\n    function setSwapOutRequired(uint256) external;\\n\\n    function setPriceOracle(address, address) external;\\n\\n    function setPendingGovernor(address) external;\\n\\n    function acceptGovernor() external;\\n\\n}\\n\",\"keccak256\":\"0x5984b6964832179bc5c1c8c8ad26ad276d87f64f773f9480849ccd9809c84732\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"../token/interfaces/IPoolFDT.sol\\\";\\n\\ninterface IPool is IPoolFDT {\\n\\n    function poolDelegate() external view returns (address);\\n\\n    function poolAdmins(address) external view returns (bool);\\n\\n    function deposit(uint256) external;\\n\\n    function increaseCustodyAllowance(address, uint256) external;\\n\\n    function transferByCustodian(address, address, uint256) external;\\n\\n    function poolState() external view returns (uint256);\\n\\n    function deactivate() external;\\n\\n    function finalize() external;\\n\\n    function claim(address, address) external returns (uint256[7] memory);\\n\\n    function setLockupPeriod(uint256) external;\\n    \\n    function setStakingFee(uint256) external;\\n\\n    function setPoolAdmin(address, bool) external;\\n\\n    function fundLoan(address, address, uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function superFactory() external view returns (address);\\n\\n    function triggerDefault(address, address) external;\\n\\n    function isPoolFinalized() external view returns (bool);\\n\\n    function setOpenToPublic(bool) external;\\n\\n    function setAllowList(address, bool) external;\\n\\n    function allowedLiquidityProviders(address) external view returns (bool);\\n\\n    function openToPublic() external view returns (bool);\\n\\n    function intendToWithdraw() external;\\n\\n    function DL_FACTORY() external view returns (uint8);\\n\\n    function liquidityAsset() external view returns (address);\\n\\n    function liquidityLocker() external view returns (address);\\n\\n    function stakeAsset() external view returns (address);\\n\\n    function stakeLocker() external view returns (address);\\n\\n    function stakingFee() external view returns (uint256);\\n\\n    function delegateFee() external view returns (uint256);\\n\\n    function principalOut() external view returns (uint256);\\n\\n    function liquidityCap() external view returns (uint256);\\n\\n    function lockupPeriod() external view returns (uint256);\\n\\n    function depositDate(address) external view returns (uint256);\\n\\n    function debtLockers(address, address) external view returns (address);\\n\\n    function withdrawCooldown(address) external view returns (uint256);\\n\\n    function setLiquidityCap(uint256) external;\\n\\n    function cancelWithdraw() external;\\n\\n    function reclaimERC20(address) external;\\n\\n    function BPTVal(address, address, address, address) external view returns (uint256);\\n\\n    function isDepositAllowed(uint256) external view returns (bool);\\n\\n    function getInitialStakeRequirements() external view returns (uint256, uint256, bool, uint256, uint256);\\n\\n}\\n\",\"keccak256\":\"0xa2ed0b4586ae2de40222ac8df10d9a75959eea07dd0f7ae992fa1db88d563667\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IPoolFactory {\\n\\n    function LL_FACTORY() external view returns (uint8);\\n\\n    function SL_FACTORY() external view returns (uint8);\\n\\n    function poolsCreated() external view returns (uint256);\\n\\n    function globals() external view returns (address);\\n\\n    function pools(uint256) external view returns (address);\\n\\n    function isPool(address) external view returns (bool);\\n\\n    function poolFactoryAdmins(address) external view returns (bool);\\n\\n    function setGlobals(address) external;\\n\\n    function createPool(address, address, address, address, uint256, uint256, uint256) external returns (address);\\n\\n    function setPoolFactoryAdmin(address, bool) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n}\\n\",\"keccak256\":\"0xc748f90e465f2b07a5ffd81a4c6ed89276857c8aacfd3978f595115944a1947b\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/math/SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nlibrary SafeMathInt {\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"SMI:NEG\\\");\\n        return uint256(a);\\n    }\\n}\\n\",\"keccak256\":\"0xffdc5ad19615e92a3a57d6a3ad6093a43b35b6f9e85bb05a96cd8a7c3d9b2e0e\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/math/SafeMathUint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256 b) {\\n        b = int256(a);\\n        require(b >= 0, \\\"SMU:OOB\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe515df7c989a5d8373e3e9ecb4b6b7167db048c2528247afe1c314528a46c4c1\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/BasicFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"./interfaces/IBaseFDT.sol\\\";\\nimport \\\"../math/SafeMathUint.sol\\\";\\nimport \\\"../math/SafeMathInt.sol\\\";\\n\\n/// @title BasicFDT implements base level FDT functionality for accounting for revenues.\\nabstract contract BasicFDT is IBaseFDT, ERC20 {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for  int256;\\n    using SafeMathInt    for  int256;\\n\\n    uint256 internal constant pointsMultiplier = 2 ** 128;\\n    uint256 internal pointsPerShare;\\n\\n    mapping(address => int256)  internal pointsCorrection;\\n    mapping(address => uint256) internal withdrawnFunds;\\n\\n    event   PointsPerShareUpdated(uint256 pointsPerShare);\\n    event PointsCorrectionUpdated(address indexed account, int256 pointsCorrection);\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) public { }\\n\\n    /**\\n        @dev Distributes funds to token holders.\\n        @dev It reverts if the total supply of tokens is 0.\\n        @dev It emits a `FundsDistributed` event if the amount of received funds is greater than 0.\\n        @dev It emits a `PointsPerShareUpdated` event if the amount of received funds is greater than 0.\\n             About undistributed funds:\\n                In each distribution, there is a small amount of funds which do not get distributed,\\n                   which is `(value  pointsMultiplier) % totalSupply()`.\\n                With a well-chosen `pointsMultiplier`, the amount funds that are not getting distributed\\n                   in a distribution can be less than 1 (base unit).\\n                We can actually keep track of the undistributed funds in a distribution\\n                   and try to distribute it in the next distribution.\\n    */\\n    function _distributeFunds(uint256 value) internal {\\n        require(totalSupply() > 0, \\\"FDT:ZERO_SUPPLY\\\");\\n\\n        if (value == 0) return;\\n\\n        pointsPerShare = pointsPerShare.add(value.mul(pointsMultiplier) / totalSupply());\\n        emit FundsDistributed(msg.sender, value);\\n        emit PointsPerShareUpdated(pointsPerShare);\\n    }\\n\\n    /**\\n        @dev    Prepares the withdrawal of funds.\\n        @dev    It emits a `FundsWithdrawn` event if the amount of withdrawn funds is greater than 0.\\n        @return withdrawableDividend The amount of dividend funds that can be withdrawn.\\n    */\\n    function _prepareWithdraw() internal returns (uint256 withdrawableDividend) {\\n        withdrawableDividend       = withdrawableFundsOf(msg.sender);\\n        uint256 _withdrawnFunds    = withdrawnFunds[msg.sender].add(withdrawableDividend);\\n        withdrawnFunds[msg.sender] = _withdrawnFunds;\\n\\n        emit FundsWithdrawn(msg.sender, withdrawableDividend, _withdrawnFunds);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of funds that an account can withdraw.\\n        @param  _owner The address of a token holder.\\n        @return The amount funds that `_owner` can withdraw.\\n    */\\n    function withdrawableFundsOf(address _owner) public view override returns (uint256) {\\n        return accumulativeFundsOf(_owner).sub(withdrawnFunds[_owner]);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of funds that an account has withdrawn.\\n        @param  _owner The address of a token holder.\\n        @return The amount of funds that `_owner` has withdrawn.\\n    */\\n    function withdrawnFundsOf(address _owner) external view returns (uint256) {\\n        return withdrawnFunds[_owner];\\n    }\\n\\n    /**\\n        @dev    Returns the amount of funds that an account has earned in total.\\n        @dev    accumulativeFundsOf(_owner) = withdrawableFundsOf(_owner) + withdrawnFundsOf(_owner)\\n                                         = (pointsPerShare * balanceOf(_owner) + pointsCorrection[_owner]) / pointsMultiplier\\n        @param  _owner The address of a token holder.\\n        @return The amount of funds that `_owner` has earned in total.\\n    */\\n    function accumulativeFundsOf(address _owner) public view returns (uint256) {\\n        return\\n            pointsPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(pointsCorrection[_owner])\\n                .toUint256Safe() / pointsMultiplier;\\n    }\\n\\n    /**\\n        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\\n        @dev   It emits two `PointsCorrectionUpdated` events, one for the sender and one for the receiver.\\n        @param from  The address to transfer from.\\n        @param to    The address to transfer to.\\n        @param value The amount to be transferred.\\n    */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        super._transfer(from, to, value);\\n\\n        int256 _magCorrection       = pointsPerShare.mul(value).toInt256Safe();\\n        int256 pointsCorrectionFrom = pointsCorrection[from].add(_magCorrection);\\n        pointsCorrection[from]      = pointsCorrectionFrom;\\n        int256 pointsCorrectionTo   = pointsCorrection[to].sub(_magCorrection);\\n        pointsCorrection[to]        = pointsCorrectionTo;\\n\\n        emit PointsCorrectionUpdated(from, pointsCorrectionFrom);\\n        emit PointsCorrectionUpdated(to,   pointsCorrectionTo);\\n    }\\n\\n    /**\\n        @dev   Mints tokens to an account. Updates pointsCorrection to keep funds unchanged.\\n        @param account The account that will receive the created tokens.\\n        @param value   The amount that will be created.\\n    */\\n    function _mint(address account, uint256 value) internal virtual override {\\n        super._mint(account, value);\\n\\n        int256 _pointsCorrection = pointsCorrection[account].sub(\\n            (pointsPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        pointsCorrection[account] = _pointsCorrection;\\n\\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\\n    }\\n\\n    /**\\n        @dev   Burns an amount of the token of a given account. Updates pointsCorrection to keep funds unchanged.\\n        @dev   It emits a `PointsCorrectionUpdated` event.\\n        @param account The account whose tokens will be burnt.\\n        @param value   The amount that will be burnt.\\n    */\\n    function _burn(address account, uint256 value) internal virtual override {\\n        super._burn(account, value);\\n\\n        int256 _pointsCorrection = pointsCorrection[account].add(\\n            (pointsPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        pointsCorrection[account] = _pointsCorrection;\\n\\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\\n    }\\n\\n    /**\\n        @dev Withdraws all available funds for a token holder.\\n    */\\n    function withdrawFunds() public virtual override {}\\n\\n    /**\\n        @dev    Updates the current `fundsToken` balance and returns the difference of the new and previous `fundsToken` balance.\\n        @return A int256 representing the difference of the new and previous `fundsToken` balance.\\n    */\\n    function _updateFundsTokenBalance() internal virtual returns (int256) {}\\n\\n    /**\\n        @dev Registers a payment of funds in tokens. May be called directly after a deposit is made.\\n        @dev Calls _updateFundsTokenBalance(), whereby the contract computes the delta of the new and previous\\n             `fundsToken` balance and increments the total received funds (cumulative), by delta, by calling _distributeFunds().\\n    */\\n    function updateFundsReceived() public virtual {\\n        int256 newFunds = _updateFundsTokenBalance();\\n\\n        if (newFunds <= 0) return;\\n\\n        _distributeFunds(newFunds.toUint256Safe());\\n    }\\n}\\n\",\"keccak256\":\"0xec1d3f646382951b73ca265a8b136900ddf8886636f118ac971bb971ef2e36e3\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/ExtendedFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./BasicFDT.sol\\\";\\n\\n/// @title ExtendedFDT implements FDT functionality for accounting for losses.\\nabstract contract ExtendedFDT is BasicFDT {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for  int256;\\n    using SafeMathInt    for  int256;\\n\\n    uint256 internal lossesPerShare;\\n\\n    mapping(address => int256)  internal lossesCorrection;\\n    mapping(address => uint256) internal recognizedLosses;\\n\\n    event   LossesPerShareUpdated(uint256 lossesPerShare);\\n    event LossesCorrectionUpdated(address indexed account, int256 lossesCorrection);\\n\\n    /**\\n        @dev   This event emits when new losses are distributed.\\n        @param by                The address of the account that has distributed losses.\\n        @param lossesDistributed The amount of losses received for distribution.\\n    */\\n    event LossesDistributed(address indexed by, uint256 lossesDistributed);\\n\\n    /**\\n        @dev   This event emits when distributed losses are recognized by a token holder.\\n        @param by                    The address of the receiver of losses.\\n        @param lossesRecognized      The amount of losses that were recognized.\\n        @param totalLossesRecognized The total amount of losses that are recognized.\\n    */\\n    event LossesRecognized(address indexed by, uint256 lossesRecognized, uint256 totalLossesRecognized);\\n\\n    constructor(string memory name, string memory symbol) BasicFDT(name, symbol) public { }\\n\\n    /**\\n        @dev Distributes losses to token holders.\\n        @dev It reverts if the total supply of tokens is 0.\\n        @dev It emits a `LossesDistributed` event if the amount of received losses is greater than 0.\\n        @dev It emits a `LossesPerShareUpdated` event if the amount of received losses is greater than 0.\\n             About undistributed losses:\\n                In each distribution, there is a small amount of losses which do not get distributed,\\n                which is `(value * pointsMultiplier) % totalSupply()`.\\n             With a well-chosen `pointsMultiplier`, the amount losses that are not getting distributed\\n                in a distribution can be less than 1 (base unit).\\n             We can actually keep track of the undistributed losses in a distribution\\n                and try to distribute it in the next distribution.\\n    */\\n    function _distributeLosses(uint256 value) internal {\\n        require(totalSupply() > 0, \\\"FDT:ZERO_SUPPLY\\\");\\n\\n        if (value == 0) return;\\n\\n        uint256 _lossesPerShare = lossesPerShare.add(value.mul(pointsMultiplier) / totalSupply());\\n        lossesPerShare          = _lossesPerShare;\\n\\n        emit LossesDistributed(msg.sender, value);\\n        emit LossesPerShareUpdated(_lossesPerShare);\\n    }\\n\\n    /**\\n        @dev    Prepares losses for a withdrawal.\\n        @dev    It emits a `LossesWithdrawn` event if the amount of withdrawn losses is greater than 0.\\n        @return recognizableDividend The amount of dividend losses that can be recognized.\\n    */\\n    function _prepareLossesWithdraw() internal returns (uint256 recognizableDividend) {\\n        recognizableDividend = recognizableLossesOf(msg.sender);\\n\\n        uint256 _recognizedLosses    = recognizedLosses[msg.sender].add(recognizableDividend);\\n        recognizedLosses[msg.sender] = _recognizedLosses;\\n\\n        emit LossesRecognized(msg.sender, recognizableDividend, _recognizedLosses);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of losses that an address can withdraw.\\n        @param  _owner The address of a token holder.\\n        @return The amount of losses that `_owner` can withdraw.\\n    */\\n    function recognizableLossesOf(address _owner) public view returns (uint256) {\\n        return accumulativeLossesOf(_owner).sub(recognizedLosses[_owner]);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of losses that an address has recognized.\\n        @param  _owner The address of a token holder\\n        @return The amount of losses that `_owner` has recognized\\n    */\\n    function recognizedLossesOf(address _owner) external view returns (uint256) {\\n        return recognizedLosses[_owner];\\n    }\\n\\n    /**\\n        @dev    Returns the amount of losses that an address has earned in total.\\n        @dev    accumulativeLossesOf(_owner) = recognizableLossesOf(_owner) + recognizedLossesOf(_owner)\\n                = (lossesPerShare * balanceOf(_owner) + lossesCorrection[_owner]) / pointsMultiplier\\n        @param  _owner The address of a token holder\\n        @return The amount of losses that `_owner` has earned in total\\n    */\\n    function accumulativeLossesOf(address _owner) public view returns (uint256) {\\n        return\\n            lossesPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(lossesCorrection[_owner])\\n                .toUint256Safe() / pointsMultiplier;\\n    }\\n\\n    /**\\n        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\\n        @dev         It emits two `LossesCorrectionUpdated` events, one for the sender and one for the receiver.\\n        @param from  The address to transfer from.\\n        @param to    The address to transfer to.\\n        @param value The amount to be transferred.\\n    */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        super._transfer(from, to, value);\\n\\n        int256 _lossesCorrection    = lossesPerShare.mul(value).toInt256Safe();\\n        int256 lossesCorrectionFrom = lossesCorrection[from].add(_lossesCorrection);\\n        lossesCorrection[from]      = lossesCorrectionFrom;\\n        int256 lossesCorrectionTo   = lossesCorrection[to].sub(_lossesCorrection);\\n        lossesCorrection[to]        = lossesCorrectionTo;\\n\\n        emit LossesCorrectionUpdated(from, lossesCorrectionFrom);\\n        emit LossesCorrectionUpdated(to,   lossesCorrectionTo);\\n    }\\n\\n    /**\\n        @dev   Mints tokens to an account. Updates lossesCorrection to keep losses unchanged.\\n        @dev   It emits a `LossesCorrectionUpdated` event.\\n        @param account The account that will receive the created tokens.\\n        @param value   The amount that will be created.\\n    */\\n    function _mint(address account, uint256 value) internal virtual override {\\n        super._mint(account, value);\\n\\n        int256 _lossesCorrection = lossesCorrection[account].sub(\\n            (lossesPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        lossesCorrection[account] = _lossesCorrection;\\n\\n        emit LossesCorrectionUpdated(account, _lossesCorrection);\\n    }\\n\\n    /**\\n        @dev   Burns an amount of the token of a given account. Updates lossesCorrection to keep losses unchanged.\\n        @dev   It emits a `LossesCorrectionUpdated` event.\\n        @param account The account from which tokens will be burnt.\\n        @param value   The amount that will be burnt.\\n    */\\n    function _burn(address account, uint256 value) internal virtual override {\\n        super._burn(account, value);\\n\\n        int256 _lossesCorrection = lossesCorrection[account].add(\\n            (lossesPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        lossesCorrection[account] = _lossesCorrection;\\n\\n        emit LossesCorrectionUpdated(account, _lossesCorrection);\\n    }\\n\\n    /**\\n        @dev Registers a loss. May be called directly after a shortfall after BPT burning occurs.\\n        @dev Calls _updateLossesTokenBalance(), whereby the contract computes the delta of the new and previous\\n             losses balance and increments the total losses (cumulative), by delta, by calling _distributeLosses().\\n    */\\n    function updateLossesReceived() public virtual {\\n        int256 newLosses = _updateLossesBalance();\\n\\n        if (newLosses <= 0) return;\\n\\n        _distributeLosses(newLosses.toUint256Safe());\\n    }\\n\\n    /**\\n        @dev Recognizes all recognizable losses for an account using loss accounting.\\n    */\\n    function _recognizeLosses() internal virtual returns (uint256 losses) { }\\n\\n    /**\\n        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\\n        @return A int256 representing the difference of the new and previous losses balance.\\n    */\\n    function _updateLossesBalance() internal virtual returns (int256) { }\\n}\\n\",\"keccak256\":\"0x937f4d66a0f807c02bdc2b246cb807db8c9e5f539cf999bec675e787dd1be06d\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/StakeLockerFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./ExtendedFDT.sol\\\";\\n\\n/// @title StakeLockerFDT inherits ExtendedFDT and accounts for gains/losses for Stakers.\\nabstract contract StakeLockerFDT is ExtendedFDT {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for  int256;\\n    using SafeMathInt    for  int256;\\n\\n    IERC20 public immutable fundsToken;\\n\\n    uint256 public bptLosses;          // Sum of all unrecognized losses.\\n    uint256 public lossesBalance;      // The amount of losses present and accounted for in this contract.\\n    uint256 public fundsTokenBalance;  // The amount of `fundsToken` (Liquidity Asset) currently present and accounted for in this contract.\\n\\n    constructor(string memory name, string memory symbol, address _fundsToken) ExtendedFDT(name, symbol) public {\\n        fundsToken = IERC20(_fundsToken);\\n    }\\n\\n    /**\\n        @dev    Updates loss accounting for `msg.sender`, recognizing losses.\\n        @return losses Amount to be subtracted from a withdraw amount.\\n    */\\n    function _recognizeLosses() internal override returns (uint256 losses) {\\n        losses = _prepareLossesWithdraw();\\n\\n        bptLosses = bptLosses.sub(losses);\\n\\n        _updateLossesBalance();\\n    }\\n\\n    /**\\n        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\\n        @return A int256 representing the difference of the new and previous losses balance.\\n    */\\n    function _updateLossesBalance() internal override returns (int256) {\\n        uint256 _prevLossesTokenBalance = lossesBalance;\\n\\n        lossesBalance = bptLosses;\\n\\n        return int256(lossesBalance).sub(int256(_prevLossesTokenBalance));\\n    }\\n\\n    /**\\n        @dev    Updates the current interest balance and returns the difference of the new and previous interest balance.\\n        @return A int256 representing the difference of the new and previous interest balance.\\n    */\\n    function _updateFundsTokenBalance() internal virtual override returns (int256) {\\n        uint256 _prevFundsTokenBalance = fundsTokenBalance;\\n\\n        fundsTokenBalance = fundsToken.balanceOf(address(this));\\n\\n        return int256(fundsTokenBalance).sub(int256(_prevFundsTokenBalance));\\n    }\\n}\\n\",\"keccak256\":\"0x34871a0b96ea793d9d9d45181cb10fc59e00526acff0e94b1d7a89c6bda7e932\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IBaseFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IBaseFDT {\\n\\n    /**\\n        @dev    Returns the total amount of funds a given address is able to withdraw currently.\\n        @param  owner Address of FDT holder.\\n        @return A uint256 representing the available funds for a given account.\\n    */\\n    function withdrawableFundsOf(address owner) external view returns (uint256);\\n\\n    /**\\n        @dev Withdraws all available funds for a FDT holder.\\n    */\\n    function withdrawFunds() external;\\n\\n    /**\\n        @dev   This event emits when new funds are distributed.\\n        @param by               The address of the sender that distributed funds.\\n        @param fundsDistributed The amount of funds received for distribution.\\n    */\\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\\n\\n    /**\\n        @dev   This event emits when distributed funds are withdrawn by a token holder.\\n        @param by             The address of the receiver of funds.\\n        @param fundsWithdrawn The amount of funds that were withdrawn.\\n        @param totalWithdrawn The total amount of funds that were withdrawn.\\n    */\\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\\n\\n}\\n\",\"keccak256\":\"0x193e2bfefd17da5ca2a34a9d21ce231419bf848561704221a7e96ee6e648ec37\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IBasicFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IBaseFDT.sol\\\";\\n\\ninterface IBasicFDT is IBaseFDT, IERC20 {\\n\\n    event PointsPerShareUpdated(uint256);\\n\\n    event PointsCorrectionUpdated(address indexed, int256);\\n\\n    function withdrawnFundsOf(address) external view returns (uint256);\\n\\n    function accumulativeFundsOf(address) external view returns (uint256);\\n\\n    function updateFundsReceived() external;\\n\\n}\\n\",\"keccak256\":\"0x86c22f508230af0cfbc6b3c5c258e3bd783504f5649279c9534735d042b0d8fa\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IExtendedFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./IBasicFDT.sol\\\";\\n\\ninterface IExtendedFDT is IBasicFDT {\\n\\n    event LossesPerShareUpdated(uint256);\\n\\n    event LossesCorrectionUpdated(address indexed, int256);\\n\\n    event LossesDistributed(address indexed, uint256);\\n\\n    event LossesRecognized(address indexed, uint256, uint256);\\n\\n    function lossesPerShare() external view returns (uint256);\\n\\n    function recognizableLossesOf(address) external view returns (uint256);\\n\\n    function recognizedLossesOf(address) external view returns (uint256);\\n\\n    function accumulativeLossesOf(address) external view returns (uint256);\\n\\n    function updateLossesReceived() external;\\n\\n}\\n\",\"keccak256\":\"0x8d94a017610790ffab1e8ecceb20cf54ae6583b889e2190d64dafd25a921d5bd\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IPoolFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./IExtendedFDT.sol\\\";\\n\\ninterface IPoolFDT is IExtendedFDT {\\n\\n    function interestSum() external view returns (uint256);\\n\\n    function poolLosses() external view returns (uint256);\\n\\n    function interestBalance() external view returns (uint256);\\n\\n    function lossesBalance() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x818c10e2248a4ea6f82e07bd7bbf7c6fd8e755fee5dd43b29601ba372aab5a08\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061469f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ec63d7c1461005157806364e1fd551461008b578063666e1b39146100a957806385de067e146100eb575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b0316610119565b604080519115158252519081900360200190f35b61009361012e565b6040805160ff9092168252519081900360200190f35b6100cf600480360360208110156100bf57600080fd5b50356001600160a01b0316610133565b604080516001600160a01b039092168252519081900360200190f35b6100cf6004803603604081101561010157600080fd5b506001600160a01b038135811691602001351661014e565b60016020526000908152604090205460ff1681565b600481565b6000602081905290815260409020546001600160a01b031681565b600082823360405161015f9061057f565b6001600160a01b03938416815291831660208301529091166040808301919091525190819003606001906000f08015801561019e573d6000803e3d6000fd5b506001600160a01b03811660008181526020818152604080832080546001600160a01b03191633908117909155600192839052818420805460ff191690931790925580516306fdde0360e01b8152905194955090937f7048695351bc04a95befabe047a3ed13f1f6d553166422a344a49264f5e5cd38938693899389936306fdde0392600480840193919291829003018186803b15801561023e57600080fd5b505afa158015610252573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561027b57600080fd5b810190808051604051939291908464010000000082111561029b57600080fd5b9083019060208201858111156102b057600080fd5b82516401000000008111828201881017156102ca57600080fd5b82525081516020918201929091019080838360005b838110156102f75781810151838201526020016102df565b50505050905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b50604052505050866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156103a157600080fd5b81019080805160405193929190846401000000008211156103c157600080fd5b9083019060208201858111156103d657600080fd5b82516401000000008111828201881017156103f057600080fd5b82525081516020918201929091019080838360005b8381101561041d578181015183820152602001610405565b50505050905090810190601f16801561044a5780820380516001836020036101000a031916815260200191505b5060405250505060405180866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156104da5781810151838201526020016104c2565b50505050905090810190601f1680156105075780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561053a578181015183820152602001610522565b50505050905090810190601f1680156105675780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a292915050565b6140dd8061058d8339019056fe6101006040523480156200001257600080fd5b50604051620040dd380380620040dd833981810160405260608110156200003857600080fd5b5080516020808301516040938401518451808601865260128152712432b634b7b99029ba30b5b2a637b1b5b2b960711b81850190815286518088019097526008875267484c535354414b4560c01b9487019490945280519495929491939092918591849184918391839183918391620000b5916003919062000125565b508051620000cb90600490602084019062000125565b50506005805460ff199081166012179091556001600160601b0319606097881b8116608052600f805490921690915599861b8a1660c052505050505094851b841660a052505090911b1660e05262ed4e00601055620001ca565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016857805160ff191683800117855562000198565b8280016001018555821562000198579182015b82811115620001985782518255916020019190600101906200017b565b50620001a6929150620001aa565b5090565b620001c791905b80821115620001a65760008155600101620001b1565b90565b60805160601c60a05160601c60c05160601c60e05160601c613e7c62000261600039806109cd5280610fcb5280611bae5280611d5752806120935280612169528061283752806128eb5280612d165280612e3d525080610a005250806112915280611316528061164f52806119745280611a3b5280611dc1525080610adc5280610b2b52806115ea528061261a5250613e7c6000f3fe608060405234801561001057600080fd5b50600436106102d55760003560e01c806370a0823111610182578063af6d5571116100e9578063d63a8e11116100a2578063f2d5d56b1161007c578063f2d5d56b14610839578063fab1107814610865578063fec984e314610882578063ff8871301461088a576102d5565b8063d63a8e11146107dd578063dd62ed3e14610803578063ee947a7c14610831576102d5565b8063af6d557114610719578063b12527f81461073f578063bcd01be71461076d578063c771c3901461078a578063c965b548146107a7578063cc0fef02146107d5576102d5565b8063a457c2d71161013b578063a457c2d71461066e578063a694fc3a1461069a578063a9059cbb146106b7578063a9691f3f146106e3578063aed4966a146106eb578063aedc78c314610711576102d5565b806370a082311461060257806380cd916d146106285780638456cb591461063057806386bf1da3146106385780638a10555c1461065e57806395d89b4114610666576102d5565b80632e17de781161024157806346c162de116101fa5780635190bbaf116101d45780635190bbaf146105a65780635c975abb146105cc57806363f04b15146105d457806366967791146105dc576102d5565b806346c162de146105705780634ab17969146105785780634e97415f14610580576102d5565b80632e17de78146104b5578063313ce567146104d257806339509351146104f05780633f4ba83a1461051c57806340bde09814610524578063443bb2931461054a576102d5565b80631831ccf2116102935780631831ccf214610405578063209b2bca1461040d57806323b872dd1461041557806324600fc31461044b57806327f91856146104535780632ac04ac81461047f576102d5565b806241c52c146102da57806306fdde0314610312578063095ea7b31461038f5780630e754e86146103cf57806316f0115b146103d957806318160ddd146103fd575b600080fd5b610300600480360360208110156102f057600080fd5b50356001600160a01b03166108b0565b60408051918252519081900360200190f35b61031a6108cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035457818101518382015260200161033c565b50505050905090810190601f1680156103815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103bb600480360360408110156103a557600080fd5b506001600160a01b038135169060200135610965565b604080519115158252519081900360200190f35b6103d7610983565b005b6103e16109cb565b604080516001600160a01b039092168252519081900360200190f35b6103006109ef565b6103bb6109f5565b6103e16109fe565b6103bb6004803603606081101561042b57600080fd5b506001600160a01b03813581169160208101359091169060400135610a22565b6103d7610ab0565b6103d76004803603604081101561046957600080fd5b506001600160a01b038135169060200135610be0565b6103d76004803603606081101561049557600080fd5b506001600160a01b03813581169160208101359091169060400135610dcd565b6103d7600480360360208110156104cb57600080fd5b5035610fc6565b6104da6113c3565b6040805160ff9092168252519081900360200190f35b6103bb6004803603604081101561050657600080fd5b506001600160a01b0381351690602001356113cc565b6103d7611420565b6103006004803603602081101561053a57600080fd5b50356001600160a01b0316611430565b6103006004803603602081101561056057600080fd5b50356001600160a01b0316611499565b6103d76114bf565b6103d76114ed565b6103006004803603602081101561059657600080fd5b50356001600160a01b0316611588565b610300600480360360208110156105bc57600080fd5b50356001600160a01b03166115cd565b6103bb6115df565b6103e16115e8565b610300600480360360208110156105f257600080fd5b50356001600160a01b031661160c565b6103006004803603602081101561061857600080fd5b50356001600160a01b0316611632565b6103e161164d565b6103d7611671565b6103bb6004803603602081101561064e57600080fd5b50356001600160a01b0316611681565b6103d7611785565b61031a611820565b6103bb6004803603604081101561068457600080fd5b506001600160a01b038135169060200135611881565b6103d7600480360360208110156106b057600080fd5b50356118ef565b6103bb600480360360408110156106cd57600080fd5b506001600160a01b038135169060200135611ae6565b610300611afa565b6103006004803603602081101561070157600080fd5b50356001600160a01b0316611b00565b610300611b1b565b6103006004803603602081101561072f57600080fd5b50356001600160a01b0316611b21565b6103d76004803603604081101561075557600080fd5b506001600160a01b0381351690602001351515611b33565b6103d76004803603602081101561078357600080fd5b5035611ba3565b6103d7600480360360208110156107a057600080fd5b5035611c29565b610300600480360360408110156107bd57600080fd5b506001600160a01b0381358116916020013516611cbe565b6103d7611cdb565b6103bb600480360360208110156107f357600080fd5b50356001600160a01b0316611d06565b6103006004803603604081101561081957600080fd5b506001600160a01b0381358116916020013516611d1b565b610300611d46565b6103d76004803603604081101561084f57600080fd5b506001600160a01b038135169060200135611d4c565b6103bb6004803603602081101561087b57600080fd5b5035611dee565b610300611ed9565b610300600480360360208110156108a057600080fd5b50356001600160a01b0316611edf565b6001600160a01b0381166000908152600860205260409020545b919050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b5050505050905090565b6000610979610972611ef1565b8484611ef5565b5060015b92915050565b61098b611fe1565b610993612091565b6016805460ff191660011790556040517fd33782a61f25b663946a975c2c1799d6e6d2dc636024b8980789f9e9671abb7890600090a1565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025490565b60165460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610a2f848484612164565b610aa584610a3b611ef1565b610aa085604051806060016040528060288152602001613d42602891396001600160a01b038a16600090815260016020526040812090610a79611ef1565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61248016565b611ef5565b5060015b9392505050565b610ab8611fe1565b6000610ac2612517565b905080610acf5750610bde565b610b096001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338363ffffffff61259c16565b604080516370a0823160e01b8152306004820181905291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692917f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a29184916370a08231916024808301926020929190829003018186803b158015610b9657600080fd5b505afa158015610baa573d6000803e3d6000fd5b505050506040513d6020811015610bc057600080fd5b505160408051918252519081900360200190a3610bdb6125f3565b50505b565b3360009081526014602090815260408083206001600160a01b038616845290915281205490610c15828463ffffffff6126a816565b3360009081526015602052604081205491925090610c39908563ffffffff6126a816565b90506001600160a01b038516610c8d576040805162461bcd60e51b815260206004820152601460248201527329a61d24a72b20a624a22fa1aaa9aa27a224a0a760611b604482015290519081900360640190fd5b83610cd0576040805162461bcd60e51b815260206004820152600e60248201526d14d30e9253959053125117d0535560921b604482015290519081900360640190fd5b610cd933611632565b811115610d20576040805162461bcd60e51b815260206004820152601060248201526f534c3a494e5355465f42414c414e434560801b604482015290519081900360640190fd5b3360008181526014602090815260408083206001600160a01b038a168085529083528184208790558484526015835292819020859055805187815291820186905280519293927f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e89281900390910190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a25050505050565b6001600160a01b038316600090815260146020908152604080832033845290915281205490610e02828463ffffffff61270216565b9050846001600160a01b0316846001600160a01b031614610e60576040805162461bcd60e51b815260206004820152601360248201527229a61d24a72b20a624a22fa922a1a2a4ab22a960691b604482015290519081900360640190fd5b82610ea3576040805162461bcd60e51b815260206004820152600e60248201526d14d30e9253959053125117d0535560921b604482015290519081900360640190fd5b6001600160a01b038516600081815260146020908152604080832033845282528083208590559282526015905290812054610ee4908563ffffffff61270216565b6001600160a01b038088166000818152601560209081526040918290208590558151898152915194955092891693919233927ffaa022ea2cd7f14157070896fabadafe96cc4d4714eef7ae6a992a5084493ed59281900390910190a46040805184815260208101849052815133926001600160a01b038a16927f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e8929081900390910190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a2505050505050565b3360007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b0316634f85221a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b505115806110cd5750806001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109157600080fd5b505afa1580156110a5573d6000803e3d6000fd5b505050506040513d60208110156110bb57600080fd5b50516001600160a01b03838116911614155b611110576040805162461bcd60e51b815260206004820152600f60248201526e14d30e94d51052d157d313d0d2d151608a1b604482015290519081900360640190fd5b611118611fe1565b336000818152601560205260409020549061114490859061113890611632565b9063ffffffff61270216565b1015611197576040805162461bcd60e51b815260206004820152601860248201527f534c3a494e5355465f554e5354414b4541424c455f42414c0000000000000000604482015290519081900360640190fd5b6111a033611681565b6111e7576040805162461bcd60e51b815260206004820152601360248201527229a61d27aaaa29a4a222afa1a7a7a62227aba760691b604482015290519081900360640190fd5b60105433600090815260116020526040902054429161120c919063ffffffff6126a816565b1115611251576040805162461bcd60e51b815260206004820152600f60248201526e14d30e9195539114d7d313d0d2d151608a1b604482015290519081900360640190fd5b6112596114bf565b611263338461275f565b61126b610ab0565b6112be3361128761127a612806565b869063ffffffff61270216565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919063ffffffff61259c16565b60408051848152905133917f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd919081900360200190a2604080516370a0823160e01b8152306004820181905291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692917f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a29184916370a08231916024808301926020929190829003018186803b15801561138157600080fd5b505afa158015611395573d6000803e3d6000fd5b505050506040513d60208110156113ab57600080fd5b505160408051918252519081900360200190a3505050565b60055460ff1690565b60006109796113d9611ef1565b84610aa085600160006113ea611ef1565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6126a816565b611428612835565b610bde6129af565b6001600160a01b0381166000908152600a6020526040812054600160801b9061148b906114869061147a61147561146688611632565b6009549063ffffffff612a4f16565b612aa8565b9063ffffffff612ae916565b612b4e565b8161149257fe5b0492915050565b6001600160a01b03811660009081526008602052604081205461097d9061113884611588565b60006114c96125f3565b9050600081136114d95750610bde565b6114ea6114e582612b4e565b612b8f565b50565b33600090815260126020526040902054611541576040805162461bcd60e51b815260206004820152601060248201526f534c3a4e4f545f554e5354414b494e4760801b604482015290519081900360640190fd5b3360008181526012602090815260408083208390558051928352517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b6001600160a01b038116600090815260076020526040812054600160801b9061148b906114869061147a6114756115be88611632565b6006549063ffffffff612a4f16565b60116020526000908152604090205481565b600f5460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600b602052604081205461097d9061113884611430565b6001600160a01b031660009081526020819052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b611679612835565b610bde612c8f565b60008061168c612d12565b9050806001600160a01b0316632018b8706040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c757600080fd5b505afa1580156116db573d6000803e3d6000fd5b505050506040513d60208110156116f157600080fd5b50516040805163a965d6b560e01b815290516001600160a01b0384169163a965d6b5916004808301926020929190829003018186803b15801561173357600080fd5b505afa158015611747573d6000803e3d6000fd5b505050506040513d602081101561175d57600080fd5b50516001600160a01b0385166000908152601260205260409020540142031115915050919050565b600061179033611632565b14156117d5576040805162461bcd60e51b815260206004820152600f60248201526e534c3a5a45524f5f42414c414e434560881b604482015290519081900360640190fd5b336000818152601260209081526040918290204290819055825190815291517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b600061097961188e611ef1565b84610aa085604051806060016040528060258152602001613e2260259139600160006118b8611ef1565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61248016565b6118f76115df565b1561193c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b611944611fe1565b61194d33612e0c565b336000818152601260205260408120556119679082612f11565b6119a26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308463ffffffff612fe616565b6119ac3382613046565b60408051828152905133917febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a919081900360200190a26040805160008152905133917f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d65919081900360200190a2604080516370a0823160e01b8152306004820181905291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692917f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a29184916370a08231916024808301926020929190829003018186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d6020811015611ad057600080fd5b505160408051918252519081900360200190a350565b6000610979611af3611ef1565b8484612164565b600e5481565b6001600160a01b03166000908152600b602052604090205490565b600c5481565b60156020526000908152604090205481565b611b3b611fe1565b611b43612091565b6001600160a01b038216600081815260136020908152604091829020805460ff1916851515908117909155825190815291517f73121574a4eadb4cfdeb2ba56a6a88067b03edd1f0a0dfcac0a5a95682a243679281900390910190a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c0b576040805162461bcd60e51b81526020600482015260086024820152670534c3a4e4f545f560c41b604482015290519081900360640190fd5b600c54611c1e908263ffffffff6126a816565b600c556114ea611cdb565b611c31611fe1565b611c39612091565b601054811115611c83576040805162461bcd60e51b815260206004820152601060248201526f534c3a494e56414c49445f56414c554560801b604482015290519081900360640190fd5b60108190556040805182815290517fcc67306c5d19f79a73208a1270ca19eb367b4bd5258eac096e974365d18e432c9181900360200190a150565b601460209081526000928352604080842090915290825290205481565b6000611ce5613092565b905060008113611cf55750610bde565b6114ea611d0182612b4e565b6130b0565b60136020526000908152604090205460ff1681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60105481565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611db4576040805162461bcd60e51b81526020600482015260086024820152670534c3a4e4f545f560c41b604482015290519081900360640190fd5b610bdb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838363ffffffff61259c16565b600080611df9612d12565b9050806001600160a01b0316632018b8706040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d6020811015611e5e57600080fd5b50516040805163a965d6b560e01b815290516001600160a01b0384169163a965d6b5916004808301926020929190829003018186803b158015611ea057600080fd5b505afa158015611eb4573d6000803e3d6000fd5b505050506040513d6020811015611eca57600080fd5b50518401014211915050919050565b600d5481565b60126020526000908152604090205481565b3390565b6001600160a01b038316611f3a5760405162461bcd60e51b8152600401808060200182810382526024815260200180613db06024913960400191505060405180910390fd5b6001600160a01b038216611f7f5760405162461bcd60e51b8152600401808060200182810382526022815260200180613c926022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b611fe9612d12565b6001600160a01b031663425fad586040518163ffffffff1660e01b815260040160206040518083038186803b15801561202157600080fd5b505afa158015612035573d6000803e3d6000fd5b505050506040513d602081101561204b57600080fd5b505115610bde576040805162461bcd60e51b815260206004820152600f60248201526e14d30e941493d513d7d4105554d151608a1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ea57600080fd5b505afa1580156120fe573d6000803e3d6000fd5b505050506040513d602081101561211457600080fd5b50516001600160a01b03163314610bde576040805162461bcd60e51b815260206004820152600f60248201526e534c3a4e4f545f44454c454741544560881b604482015290519081900360640190fd5b8260007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b0316634f85221a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c357600080fd5b505afa1580156121d7573d6000803e3d6000fd5b505050506040513d60208110156121ed57600080fd5b5051158061226b5750806001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222f57600080fd5b505afa158015612243573d6000803e3d6000fd5b505050506040513d602081101561225957600080fd5b50516001600160a01b03838116911614155b6122ae576040805162461bcd60e51b815260206004820152600f60248201526e14d30e94d51052d157d313d0d2d151608a1b604482015290519081900360640190fd5b6122b6611fe1565b6010546001600160a01b03861660009081526011602052604090205442916122e4919063ffffffff6126a816565b1115612329576040805162461bcd60e51b815260206004820152600f60248201526e14d30e9195539114d7d313d0d2d151608a1b604482015290519081900360640190fd5b6001600160a01b03851660009081526015602052604090205461234f8461113888611632565b10156123a2576040805162461bcd60e51b815260206004820152601960248201527f534c3a494e5355465f5452414e5346455241424c455f42414c00000000000000604482015290519081900360640190fd5b6001600160a01b0384166000908152601260205260409020546123c490611dee565b612415576040805162461bcd60e51b815260206004820152601860248201527f534c3a524543495049454e545f4e4f545f414c4c4f5745440000000000000000604482015290519081900360640190fd5b60006124208661160c565b14612464576040805162461bcd60e51b815260206004820152600f60248201526e534c3a5245434f475f4c4f5353455360881b604482015290519081900360640190fd5b61246e8484612f11565b6124798585856131b5565b5050505050565b6000818484111561250f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124d45781810151838201526020016124bc565b50505050905090810190601f1680156125015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061252233611499565b3360009081526008602052604081205491925090612546908363ffffffff6126a816565b336000818152600860209081526040918290208490558151868152908101849052815193945091927ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb49281900390910190a25090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526125ee9084906132e1565b505050565b600e54604080516370a0823160e01b81523060048201529051600092916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561266157600080fd5b505afa158015612675573d6000803e3d6000fd5b505050506040513d602081101561268b57600080fd5b5051600e8190556126a2908263ffffffff61339216565b91505090565b600082820183811015610aa9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115612759576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b61276982826133f7565b60006127ab61278661147584600954612a4f90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff612ae916565b6001600160a01b0384166000818152600a60209081526040918290208490558151848152915193945091927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a2505050565b600061281061349e565b600c54909150612826908263ffffffff61270216565b600c55612831613092565b5090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561288e57600080fd5b505afa1580156128a2573d6000803e3d6000fd5b505050506040513d60208110156128b857600080fd5b50516001600160a01b031633148061295e575060408051633099c27960e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163613384f2916024808301926020929190829003018186803b15801561293157600080fd5b505afa158015612945573d6000803e3d6000fd5b505050506040513d602081101561295b57600080fd5b50515b610bde576040805162461bcd60e51b815260206004820152601860248201527f534c3a4e4f545f44454c45474154455f4f525f41444d494e0000000000000000604482015290519081900360640190fd5b6129b76115df565b6129ff576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612a32611ef1565b604080516001600160a01b039092168252519081900360200190a1565b600082612a5e5750600061097d565b82820282848281612a6b57fe5b0414610aa95760405162461bcd60e51b8152600401808060200182810382526021815260200180613d216021913960400191505060405180910390fd5b8060008112156108ca576040805162461bcd60e51b815260206004820152600760248201526629a6aa9d27a7a160c91b604482015290519081900360640190fd5b6000828201818312801590612afe5750838112155b80612b135750600083128015612b1357508381125b610aa95760405162461bcd60e51b8152600401808060200182810382526021815260200180613cda6021913960400191505060405180910390fd5b600080821215612831576040805162461bcd60e51b8152602060048201526007602482015266534d493a4e454760c81b604482015290519081900360640190fd5b6000612b996109ef565b11612bdd576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b80612be7576114ea565b612c1e612bf26109ef565b612c0683600160801b63ffffffff612a4f16565b81612c0d57fe5b60065491900463ffffffff6126a816565b60065560408051828152905133917f26536799ace2c3dbe12e638ec3ade6b4173dcf1289be0a58d51a5003015649bd919081900360200190a260065460408051918252517f1f8d7705f31c3337a080803a8ad7e71946fb88d84738879be2bf402f97156e969181900360200190a150565b612c976115df565b15612cdc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a32611ef1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d49b38c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6d57600080fd5b505afa158015612d81573d6000803e3d6000fd5b505050506040513d6020811015612d9757600080fd5b50516040805163c312452560e01b815290516001600160a01b039092169163c312452591600480820192602092909190829003018186803b158015612ddb57600080fd5b505afa158015612def573d6000803e3d6000fd5b505050506040513d6020811015612e0557600080fd5b5051905090565b60165460ff1680612e3557506001600160a01b03811660009081526013602052604090205460ff165b80612ecf57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9457600080fd5b505afa158015612ea8573d6000803e3d6000fd5b505050506040513d6020811015612ebe57600080fd5b50516001600160a01b038281169116145b6114ea576040805162461bcd60e51b815260206004820152600e60248201526d14d30e9393d517d0531313d5d15160921b604482015290519081900360640190fd5b6001600160a01b03821660009081526011602052604081205490612f3484611632565b905060008084830111612f475782612f89565b612f89612f7c838601612f7087612f64428963ffffffff61270216565b9063ffffffff612a4f16565b9063ffffffff61352316565b849063ffffffff6126a816565b6001600160a01b0386166000818152601160209081526040918290208490558151848152915193945091927f09686619568b9bd7c4faea3ba0efbeab967ec977167b97405ad208f1a9ccea69929181900390910190a25050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130409085906132e1565b50505050565b613050828261358a565b60006127ab61306d61147584600954612a4f90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff61339216565b600d8054600c54918290556000916126a2908263ffffffff61339216565b60006130ba6109ef565b116130fe576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b80613108576114ea565b60006131416131156109ef565b61312984600160801b63ffffffff612a4f16565b8161313057fe5b60095491900463ffffffff6126a816565b600981905560408051848152905191925033917ff88156a8032a0d2c65df18fafaf84e0bea647b3d94a0f7fc6ab14c97dec2bf749181900360200190a26040805182815290517f240ce2b5ce9e9e5a70010c7f8034c233d89b7ce2d60f3a38d9bc3ca01a36f88c9181900360200190a15050565b6131c08383836135d6565b60006131da61147583600954612a4f90919063ffffffff16565b6001600160a01b0385166000908152600a602052604081205491925090613207908363ffffffff612ae916565b6001600160a01b038087166000908152600a602052604080822084905591871681529081205491925090613241908463ffffffff61339216565b6001600160a01b038087166000908152600a602090815260409182902084905581518681529151939450918916927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a26040805182815290516001600160a01b038716917fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3919081900360200190a2505050505050565b6060613336826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137029092919063ffffffff16565b8051909150156125ee5780806020019051602081101561335557600080fd5b50516125ee5760405162461bcd60e51b815260040180806020018281038252602a815260200180613df8602a913960400191505060405180910390fd5b60008183038183128015906133a75750838113155b806133bc57506000831280156133bc57508381135b610aa95760405162461bcd60e51b8152600401808060200182810382526024815260200180613dd46024913960400191505060405180910390fd5b6134018282613719565b600061344361341e61147584600654612a4f90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff612ae916565b6001600160a01b0384166000818152600760209081526040918290208490558151848152915193945091927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a2505050565b60006134a93361160c565b336000908152600b6020526040812054919250906134cd908363ffffffff6126a816565b336000818152600b60209081526040918290208490558151868152908101849052815193945091927f814eba35782909dbbaeefb8104073dfca45de43173f7077970c1584b3cf918b59281900390910190a25090565b6000808211613579576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161358257fe5b049392505050565b6135948282613821565b60006134436135b161147584600654612a4f90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff61339216565b6135e183838361391d565b60006135fb61147583600654612a4f90919063ffffffff16565b6001600160a01b03851660009081526007602052604081205491925090613628908363ffffffff612ae916565b6001600160a01b0380871660009081526007602052604080822084905591871681529081205491925090613662908463ffffffff61339216565b6001600160a01b0380871660009081526007602090815260409182902084905581518681529151939450918916927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a26040805182815290516001600160a01b038716917ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773919081900360200190a2505050505050565b60606137118484600085613a84565b949350505050565b6001600160a01b03821661375e5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d6a6021913960400191505060405180910390fd5b61376a826000836125ee565b6137ad81604051806060016040528060228152602001613c70602291396001600160a01b038516600090815260208190526040902054919063ffffffff61248016565b6001600160a01b0383166000908152602081905260409020556002546137d9908263ffffffff61270216565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b03821661387c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b613888600083836125ee565b60025461389b908263ffffffff6126a816565b6002556001600160a01b0382166000908152602081905260409020546138c7908263ffffffff6126a816565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0383166139625760405162461bcd60e51b8152600401808060200182810382526025815260200180613d8b6025913960400191505060405180910390fd5b6001600160a01b0382166139a75760405162461bcd60e51b8152600401808060200182810382526023815260200180613c4d6023913960400191505060405180910390fd5b6139b28383836125ee565b6139f581604051806060016040528060268152602001613cb4602691396001600160a01b038616600090815260208190526040902054919063ffffffff61248016565b6001600160a01b038085166000908152602081905260408082209390935590841681522054613a2a908263ffffffff6126a816565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b606082471015613ac55760405162461bcd60e51b8152600401808060200182810382526026815260200180613cfb6026913960400191505060405180910390fd5b613ace85613be0565b613b1f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613b5e5780518252601f199092019160209182019101613b3f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613bc0576040519150601f19603f3d011682016040523d82523d6000602084013e613bc5565b606091505b5091509150613bd5828286613be6565b979650505050505050565b3b151590565b60608315613bf5575081610aa9565b825115613c055782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156124d45781810151838201526020016124bc56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212206439c6ba0ef5dcfb20f15971d7edf97fe83aed43e7abad769b317db91d706a1364736f6c634300060b0033a26469706673582212209e8e894d9e08112d15689d061ffeffe0c297292e71a0c7a8ac3534c1bb217e7f64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ec63d7c1461005157806364e1fd551461008b578063666e1b39146100a957806385de067e146100eb575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b0316610119565b604080519115158252519081900360200190f35b61009361012e565b6040805160ff9092168252519081900360200190f35b6100cf600480360360208110156100bf57600080fd5b50356001600160a01b0316610133565b604080516001600160a01b039092168252519081900360200190f35b6100cf6004803603604081101561010157600080fd5b506001600160a01b038135811691602001351661014e565b60016020526000908152604090205460ff1681565b600481565b6000602081905290815260409020546001600160a01b031681565b600082823360405161015f9061057f565b6001600160a01b03938416815291831660208301529091166040808301919091525190819003606001906000f08015801561019e573d6000803e3d6000fd5b506001600160a01b03811660008181526020818152604080832080546001600160a01b03191633908117909155600192839052818420805460ff191690931790925580516306fdde0360e01b8152905194955090937f7048695351bc04a95befabe047a3ed13f1f6d553166422a344a49264f5e5cd38938693899389936306fdde0392600480840193919291829003018186803b15801561023e57600080fd5b505afa158015610252573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561027b57600080fd5b810190808051604051939291908464010000000082111561029b57600080fd5b9083019060208201858111156102b057600080fd5b82516401000000008111828201881017156102ca57600080fd5b82525081516020918201929091019080838360005b838110156102f75781810151838201526020016102df565b50505050905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b50604052505050866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156103a157600080fd5b81019080805160405193929190846401000000008211156103c157600080fd5b9083019060208201858111156103d657600080fd5b82516401000000008111828201881017156103f057600080fd5b82525081516020918201929091019080838360005b8381101561041d578181015183820152602001610405565b50505050905090810190601f16801561044a5780820380516001836020036101000a031916815260200191505b5060405250505060405180866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156104da5781810151838201526020016104c2565b50505050905090810190601f1680156105075780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561053a578181015183820152602001610522565b50505050905090810190601f1680156105675780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a292915050565b6140dd8061058d8339019056fe6101006040523480156200001257600080fd5b50604051620040dd380380620040dd833981810160405260608110156200003857600080fd5b5080516020808301516040938401518451808601865260128152712432b634b7b99029ba30b5b2a637b1b5b2b960711b81850190815286518088019097526008875267484c535354414b4560c01b9487019490945280519495929491939092918591849184918391839183918391620000b5916003919062000125565b508051620000cb90600490602084019062000125565b50506005805460ff199081166012179091556001600160601b0319606097881b8116608052600f805490921690915599861b8a1660c052505050505094851b841660a052505090911b1660e05262ed4e00601055620001ca565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016857805160ff191683800117855562000198565b8280016001018555821562000198579182015b82811115620001985782518255916020019190600101906200017b565b50620001a6929150620001aa565b5090565b620001c791905b80821115620001a65760008155600101620001b1565b90565b60805160601c60a05160601c60c05160601c60e05160601c613e7c62000261600039806109cd5280610fcb5280611bae5280611d5752806120935280612169528061283752806128eb5280612d165280612e3d525080610a005250806112915280611316528061164f52806119745280611a3b5280611dc1525080610adc5280610b2b52806115ea528061261a5250613e7c6000f3fe608060405234801561001057600080fd5b50600436106102d55760003560e01c806370a0823111610182578063af6d5571116100e9578063d63a8e11116100a2578063f2d5d56b1161007c578063f2d5d56b14610839578063fab1107814610865578063fec984e314610882578063ff8871301461088a576102d5565b8063d63a8e11146107dd578063dd62ed3e14610803578063ee947a7c14610831576102d5565b8063af6d557114610719578063b12527f81461073f578063bcd01be71461076d578063c771c3901461078a578063c965b548146107a7578063cc0fef02146107d5576102d5565b8063a457c2d71161013b578063a457c2d71461066e578063a694fc3a1461069a578063a9059cbb146106b7578063a9691f3f146106e3578063aed4966a146106eb578063aedc78c314610711576102d5565b806370a082311461060257806380cd916d146106285780638456cb591461063057806386bf1da3146106385780638a10555c1461065e57806395d89b4114610666576102d5565b80632e17de781161024157806346c162de116101fa5780635190bbaf116101d45780635190bbaf146105a65780635c975abb146105cc57806363f04b15146105d457806366967791146105dc576102d5565b806346c162de146105705780634ab17969146105785780634e97415f14610580576102d5565b80632e17de78146104b5578063313ce567146104d257806339509351146104f05780633f4ba83a1461051c57806340bde09814610524578063443bb2931461054a576102d5565b80631831ccf2116102935780631831ccf214610405578063209b2bca1461040d57806323b872dd1461041557806324600fc31461044b57806327f91856146104535780632ac04ac81461047f576102d5565b806241c52c146102da57806306fdde0314610312578063095ea7b31461038f5780630e754e86146103cf57806316f0115b146103d957806318160ddd146103fd575b600080fd5b610300600480360360208110156102f057600080fd5b50356001600160a01b03166108b0565b60408051918252519081900360200190f35b61031a6108cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035457818101518382015260200161033c565b50505050905090810190601f1680156103815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103bb600480360360408110156103a557600080fd5b506001600160a01b038135169060200135610965565b604080519115158252519081900360200190f35b6103d7610983565b005b6103e16109cb565b604080516001600160a01b039092168252519081900360200190f35b6103006109ef565b6103bb6109f5565b6103e16109fe565b6103bb6004803603606081101561042b57600080fd5b506001600160a01b03813581169160208101359091169060400135610a22565b6103d7610ab0565b6103d76004803603604081101561046957600080fd5b506001600160a01b038135169060200135610be0565b6103d76004803603606081101561049557600080fd5b506001600160a01b03813581169160208101359091169060400135610dcd565b6103d7600480360360208110156104cb57600080fd5b5035610fc6565b6104da6113c3565b6040805160ff9092168252519081900360200190f35b6103bb6004803603604081101561050657600080fd5b506001600160a01b0381351690602001356113cc565b6103d7611420565b6103006004803603602081101561053a57600080fd5b50356001600160a01b0316611430565b6103006004803603602081101561056057600080fd5b50356001600160a01b0316611499565b6103d76114bf565b6103d76114ed565b6103006004803603602081101561059657600080fd5b50356001600160a01b0316611588565b610300600480360360208110156105bc57600080fd5b50356001600160a01b03166115cd565b6103bb6115df565b6103e16115e8565b610300600480360360208110156105f257600080fd5b50356001600160a01b031661160c565b6103006004803603602081101561061857600080fd5b50356001600160a01b0316611632565b6103e161164d565b6103d7611671565b6103bb6004803603602081101561064e57600080fd5b50356001600160a01b0316611681565b6103d7611785565b61031a611820565b6103bb6004803603604081101561068457600080fd5b506001600160a01b038135169060200135611881565b6103d7600480360360208110156106b057600080fd5b50356118ef565b6103bb600480360360408110156106cd57600080fd5b506001600160a01b038135169060200135611ae6565b610300611afa565b6103006004803603602081101561070157600080fd5b50356001600160a01b0316611b00565b610300611b1b565b6103006004803603602081101561072f57600080fd5b50356001600160a01b0316611b21565b6103d76004803603604081101561075557600080fd5b506001600160a01b0381351690602001351515611b33565b6103d76004803603602081101561078357600080fd5b5035611ba3565b6103d7600480360360208110156107a057600080fd5b5035611c29565b610300600480360360408110156107bd57600080fd5b506001600160a01b0381358116916020013516611cbe565b6103d7611cdb565b6103bb600480360360208110156107f357600080fd5b50356001600160a01b0316611d06565b6103006004803603604081101561081957600080fd5b506001600160a01b0381358116916020013516611d1b565b610300611d46565b6103d76004803603604081101561084f57600080fd5b506001600160a01b038135169060200135611d4c565b6103bb6004803603602081101561087b57600080fd5b5035611dee565b610300611ed9565b610300600480360360208110156108a057600080fd5b50356001600160a01b0316611edf565b6001600160a01b0381166000908152600860205260409020545b919050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b5050505050905090565b6000610979610972611ef1565b8484611ef5565b5060015b92915050565b61098b611fe1565b610993612091565b6016805460ff191660011790556040517fd33782a61f25b663946a975c2c1799d6e6d2dc636024b8980789f9e9671abb7890600090a1565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025490565b60165460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610a2f848484612164565b610aa584610a3b611ef1565b610aa085604051806060016040528060288152602001613d42602891396001600160a01b038a16600090815260016020526040812090610a79611ef1565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61248016565b611ef5565b5060015b9392505050565b610ab8611fe1565b6000610ac2612517565b905080610acf5750610bde565b610b096001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338363ffffffff61259c16565b604080516370a0823160e01b8152306004820181905291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692917f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a29184916370a08231916024808301926020929190829003018186803b158015610b9657600080fd5b505afa158015610baa573d6000803e3d6000fd5b505050506040513d6020811015610bc057600080fd5b505160408051918252519081900360200190a3610bdb6125f3565b50505b565b3360009081526014602090815260408083206001600160a01b038616845290915281205490610c15828463ffffffff6126a816565b3360009081526015602052604081205491925090610c39908563ffffffff6126a816565b90506001600160a01b038516610c8d576040805162461bcd60e51b815260206004820152601460248201527329a61d24a72b20a624a22fa1aaa9aa27a224a0a760611b604482015290519081900360640190fd5b83610cd0576040805162461bcd60e51b815260206004820152600e60248201526d14d30e9253959053125117d0535560921b604482015290519081900360640190fd5b610cd933611632565b811115610d20576040805162461bcd60e51b815260206004820152601060248201526f534c3a494e5355465f42414c414e434560801b604482015290519081900360640190fd5b3360008181526014602090815260408083206001600160a01b038a168085529083528184208790558484526015835292819020859055805187815291820186905280519293927f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e89281900390910190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a25050505050565b6001600160a01b038316600090815260146020908152604080832033845290915281205490610e02828463ffffffff61270216565b9050846001600160a01b0316846001600160a01b031614610e60576040805162461bcd60e51b815260206004820152601360248201527229a61d24a72b20a624a22fa922a1a2a4ab22a960691b604482015290519081900360640190fd5b82610ea3576040805162461bcd60e51b815260206004820152600e60248201526d14d30e9253959053125117d0535560921b604482015290519081900360640190fd5b6001600160a01b038516600081815260146020908152604080832033845282528083208590559282526015905290812054610ee4908563ffffffff61270216565b6001600160a01b038088166000818152601560209081526040918290208590558151898152915194955092891693919233927ffaa022ea2cd7f14157070896fabadafe96cc4d4714eef7ae6a992a5084493ed59281900390910190a46040805184815260208101849052815133926001600160a01b038a16927f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e8929081900390910190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a2505050505050565b3360007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b0316634f85221a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b505115806110cd5750806001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109157600080fd5b505afa1580156110a5573d6000803e3d6000fd5b505050506040513d60208110156110bb57600080fd5b50516001600160a01b03838116911614155b611110576040805162461bcd60e51b815260206004820152600f60248201526e14d30e94d51052d157d313d0d2d151608a1b604482015290519081900360640190fd5b611118611fe1565b336000818152601560205260409020549061114490859061113890611632565b9063ffffffff61270216565b1015611197576040805162461bcd60e51b815260206004820152601860248201527f534c3a494e5355465f554e5354414b4541424c455f42414c0000000000000000604482015290519081900360640190fd5b6111a033611681565b6111e7576040805162461bcd60e51b815260206004820152601360248201527229a61d27aaaa29a4a222afa1a7a7a62227aba760691b604482015290519081900360640190fd5b60105433600090815260116020526040902054429161120c919063ffffffff6126a816565b1115611251576040805162461bcd60e51b815260206004820152600f60248201526e14d30e9195539114d7d313d0d2d151608a1b604482015290519081900360640190fd5b6112596114bf565b611263338461275f565b61126b610ab0565b6112be3361128761127a612806565b869063ffffffff61270216565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919063ffffffff61259c16565b60408051848152905133917f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd919081900360200190a2604080516370a0823160e01b8152306004820181905291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692917f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a29184916370a08231916024808301926020929190829003018186803b15801561138157600080fd5b505afa158015611395573d6000803e3d6000fd5b505050506040513d60208110156113ab57600080fd5b505160408051918252519081900360200190a3505050565b60055460ff1690565b60006109796113d9611ef1565b84610aa085600160006113ea611ef1565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6126a816565b611428612835565b610bde6129af565b6001600160a01b0381166000908152600a6020526040812054600160801b9061148b906114869061147a61147561146688611632565b6009549063ffffffff612a4f16565b612aa8565b9063ffffffff612ae916565b612b4e565b8161149257fe5b0492915050565b6001600160a01b03811660009081526008602052604081205461097d9061113884611588565b60006114c96125f3565b9050600081136114d95750610bde565b6114ea6114e582612b4e565b612b8f565b50565b33600090815260126020526040902054611541576040805162461bcd60e51b815260206004820152601060248201526f534c3a4e4f545f554e5354414b494e4760801b604482015290519081900360640190fd5b3360008181526012602090815260408083208390558051928352517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b6001600160a01b038116600090815260076020526040812054600160801b9061148b906114869061147a6114756115be88611632565b6006549063ffffffff612a4f16565b60116020526000908152604090205481565b600f5460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600b602052604081205461097d9061113884611430565b6001600160a01b031660009081526020819052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b611679612835565b610bde612c8f565b60008061168c612d12565b9050806001600160a01b0316632018b8706040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c757600080fd5b505afa1580156116db573d6000803e3d6000fd5b505050506040513d60208110156116f157600080fd5b50516040805163a965d6b560e01b815290516001600160a01b0384169163a965d6b5916004808301926020929190829003018186803b15801561173357600080fd5b505afa158015611747573d6000803e3d6000fd5b505050506040513d602081101561175d57600080fd5b50516001600160a01b0385166000908152601260205260409020540142031115915050919050565b600061179033611632565b14156117d5576040805162461bcd60e51b815260206004820152600f60248201526e534c3a5a45524f5f42414c414e434560881b604482015290519081900360640190fd5b336000818152601260209081526040918290204290819055825190815291517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b600061097961188e611ef1565b84610aa085604051806060016040528060258152602001613e2260259139600160006118b8611ef1565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61248016565b6118f76115df565b1561193c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b611944611fe1565b61194d33612e0c565b336000818152601260205260408120556119679082612f11565b6119a26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308463ffffffff612fe616565b6119ac3382613046565b60408051828152905133917febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a919081900360200190a26040805160008152905133917f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d65919081900360200190a2604080516370a0823160e01b8152306004820181905291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692917f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a29184916370a08231916024808301926020929190829003018186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d6020811015611ad057600080fd5b505160408051918252519081900360200190a350565b6000610979611af3611ef1565b8484612164565b600e5481565b6001600160a01b03166000908152600b602052604090205490565b600c5481565b60156020526000908152604090205481565b611b3b611fe1565b611b43612091565b6001600160a01b038216600081815260136020908152604091829020805460ff1916851515908117909155825190815291517f73121574a4eadb4cfdeb2ba56a6a88067b03edd1f0a0dfcac0a5a95682a243679281900390910190a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c0b576040805162461bcd60e51b81526020600482015260086024820152670534c3a4e4f545f560c41b604482015290519081900360640190fd5b600c54611c1e908263ffffffff6126a816565b600c556114ea611cdb565b611c31611fe1565b611c39612091565b601054811115611c83576040805162461bcd60e51b815260206004820152601060248201526f534c3a494e56414c49445f56414c554560801b604482015290519081900360640190fd5b60108190556040805182815290517fcc67306c5d19f79a73208a1270ca19eb367b4bd5258eac096e974365d18e432c9181900360200190a150565b601460209081526000928352604080842090915290825290205481565b6000611ce5613092565b905060008113611cf55750610bde565b6114ea611d0182612b4e565b6130b0565b60136020526000908152604090205460ff1681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60105481565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611db4576040805162461bcd60e51b81526020600482015260086024820152670534c3a4e4f545f560c41b604482015290519081900360640190fd5b610bdb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838363ffffffff61259c16565b600080611df9612d12565b9050806001600160a01b0316632018b8706040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d6020811015611e5e57600080fd5b50516040805163a965d6b560e01b815290516001600160a01b0384169163a965d6b5916004808301926020929190829003018186803b158015611ea057600080fd5b505afa158015611eb4573d6000803e3d6000fd5b505050506040513d6020811015611eca57600080fd5b50518401014211915050919050565b600d5481565b60126020526000908152604090205481565b3390565b6001600160a01b038316611f3a5760405162461bcd60e51b8152600401808060200182810382526024815260200180613db06024913960400191505060405180910390fd5b6001600160a01b038216611f7f5760405162461bcd60e51b8152600401808060200182810382526022815260200180613c926022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b611fe9612d12565b6001600160a01b031663425fad586040518163ffffffff1660e01b815260040160206040518083038186803b15801561202157600080fd5b505afa158015612035573d6000803e3d6000fd5b505050506040513d602081101561204b57600080fd5b505115610bde576040805162461bcd60e51b815260206004820152600f60248201526e14d30e941493d513d7d4105554d151608a1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ea57600080fd5b505afa1580156120fe573d6000803e3d6000fd5b505050506040513d602081101561211457600080fd5b50516001600160a01b03163314610bde576040805162461bcd60e51b815260206004820152600f60248201526e534c3a4e4f545f44454c454741544560881b604482015290519081900360640190fd5b8260007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b0316634f85221a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c357600080fd5b505afa1580156121d7573d6000803e3d6000fd5b505050506040513d60208110156121ed57600080fd5b5051158061226b5750806001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222f57600080fd5b505afa158015612243573d6000803e3d6000fd5b505050506040513d602081101561225957600080fd5b50516001600160a01b03838116911614155b6122ae576040805162461bcd60e51b815260206004820152600f60248201526e14d30e94d51052d157d313d0d2d151608a1b604482015290519081900360640190fd5b6122b6611fe1565b6010546001600160a01b03861660009081526011602052604090205442916122e4919063ffffffff6126a816565b1115612329576040805162461bcd60e51b815260206004820152600f60248201526e14d30e9195539114d7d313d0d2d151608a1b604482015290519081900360640190fd5b6001600160a01b03851660009081526015602052604090205461234f8461113888611632565b10156123a2576040805162461bcd60e51b815260206004820152601960248201527f534c3a494e5355465f5452414e5346455241424c455f42414c00000000000000604482015290519081900360640190fd5b6001600160a01b0384166000908152601260205260409020546123c490611dee565b612415576040805162461bcd60e51b815260206004820152601860248201527f534c3a524543495049454e545f4e4f545f414c4c4f5745440000000000000000604482015290519081900360640190fd5b60006124208661160c565b14612464576040805162461bcd60e51b815260206004820152600f60248201526e534c3a5245434f475f4c4f5353455360881b604482015290519081900360640190fd5b61246e8484612f11565b6124798585856131b5565b5050505050565b6000818484111561250f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124d45781810151838201526020016124bc565b50505050905090810190601f1680156125015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061252233611499565b3360009081526008602052604081205491925090612546908363ffffffff6126a816565b336000818152600860209081526040918290208490558151868152908101849052815193945091927ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb49281900390910190a25090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526125ee9084906132e1565b505050565b600e54604080516370a0823160e01b81523060048201529051600092916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561266157600080fd5b505afa158015612675573d6000803e3d6000fd5b505050506040513d602081101561268b57600080fd5b5051600e8190556126a2908263ffffffff61339216565b91505090565b600082820183811015610aa9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115612759576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b61276982826133f7565b60006127ab61278661147584600954612a4f90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff612ae916565b6001600160a01b0384166000818152600a60209081526040918290208490558151848152915193945091927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a2505050565b600061281061349e565b600c54909150612826908263ffffffff61270216565b600c55612831613092565b5090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561288e57600080fd5b505afa1580156128a2573d6000803e3d6000fd5b505050506040513d60208110156128b857600080fd5b50516001600160a01b031633148061295e575060408051633099c27960e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163613384f2916024808301926020929190829003018186803b15801561293157600080fd5b505afa158015612945573d6000803e3d6000fd5b505050506040513d602081101561295b57600080fd5b50515b610bde576040805162461bcd60e51b815260206004820152601860248201527f534c3a4e4f545f44454c45474154455f4f525f41444d494e0000000000000000604482015290519081900360640190fd5b6129b76115df565b6129ff576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612a32611ef1565b604080516001600160a01b039092168252519081900360200190a1565b600082612a5e5750600061097d565b82820282848281612a6b57fe5b0414610aa95760405162461bcd60e51b8152600401808060200182810382526021815260200180613d216021913960400191505060405180910390fd5b8060008112156108ca576040805162461bcd60e51b815260206004820152600760248201526629a6aa9d27a7a160c91b604482015290519081900360640190fd5b6000828201818312801590612afe5750838112155b80612b135750600083128015612b1357508381125b610aa95760405162461bcd60e51b8152600401808060200182810382526021815260200180613cda6021913960400191505060405180910390fd5b600080821215612831576040805162461bcd60e51b8152602060048201526007602482015266534d493a4e454760c81b604482015290519081900360640190fd5b6000612b996109ef565b11612bdd576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b80612be7576114ea565b612c1e612bf26109ef565b612c0683600160801b63ffffffff612a4f16565b81612c0d57fe5b60065491900463ffffffff6126a816565b60065560408051828152905133917f26536799ace2c3dbe12e638ec3ade6b4173dcf1289be0a58d51a5003015649bd919081900360200190a260065460408051918252517f1f8d7705f31c3337a080803a8ad7e71946fb88d84738879be2bf402f97156e969181900360200190a150565b612c976115df565b15612cdc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a32611ef1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d49b38c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6d57600080fd5b505afa158015612d81573d6000803e3d6000fd5b505050506040513d6020811015612d9757600080fd5b50516040805163c312452560e01b815290516001600160a01b039092169163c312452591600480820192602092909190829003018186803b158015612ddb57600080fd5b505afa158015612def573d6000803e3d6000fd5b505050506040513d6020811015612e0557600080fd5b5051905090565b60165460ff1680612e3557506001600160a01b03811660009081526013602052604090205460ff165b80612ecf57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634046af2b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9457600080fd5b505afa158015612ea8573d6000803e3d6000fd5b505050506040513d6020811015612ebe57600080fd5b50516001600160a01b038281169116145b6114ea576040805162461bcd60e51b815260206004820152600e60248201526d14d30e9393d517d0531313d5d15160921b604482015290519081900360640190fd5b6001600160a01b03821660009081526011602052604081205490612f3484611632565b905060008084830111612f475782612f89565b612f89612f7c838601612f7087612f64428963ffffffff61270216565b9063ffffffff612a4f16565b9063ffffffff61352316565b849063ffffffff6126a816565b6001600160a01b0386166000818152601160209081526040918290208490558151848152915193945091927f09686619568b9bd7c4faea3ba0efbeab967ec977167b97405ad208f1a9ccea69929181900390910190a25050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130409085906132e1565b50505050565b613050828261358a565b60006127ab61306d61147584600954612a4f90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff61339216565b600d8054600c54918290556000916126a2908263ffffffff61339216565b60006130ba6109ef565b116130fe576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b80613108576114ea565b60006131416131156109ef565b61312984600160801b63ffffffff612a4f16565b8161313057fe5b60095491900463ffffffff6126a816565b600981905560408051848152905191925033917ff88156a8032a0d2c65df18fafaf84e0bea647b3d94a0f7fc6ab14c97dec2bf749181900360200190a26040805182815290517f240ce2b5ce9e9e5a70010c7f8034c233d89b7ce2d60f3a38d9bc3ca01a36f88c9181900360200190a15050565b6131c08383836135d6565b60006131da61147583600954612a4f90919063ffffffff16565b6001600160a01b0385166000908152600a602052604081205491925090613207908363ffffffff612ae916565b6001600160a01b038087166000908152600a602052604080822084905591871681529081205491925090613241908463ffffffff61339216565b6001600160a01b038087166000908152600a602090815260409182902084905581518681529151939450918916927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a26040805182815290516001600160a01b038716917fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3919081900360200190a2505050505050565b6060613336826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137029092919063ffffffff16565b8051909150156125ee5780806020019051602081101561335557600080fd5b50516125ee5760405162461bcd60e51b815260040180806020018281038252602a815260200180613df8602a913960400191505060405180910390fd5b60008183038183128015906133a75750838113155b806133bc57506000831280156133bc57508381135b610aa95760405162461bcd60e51b8152600401808060200182810382526024815260200180613dd46024913960400191505060405180910390fd5b6134018282613719565b600061344361341e61147584600654612a4f90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff612ae916565b6001600160a01b0384166000818152600760209081526040918290208490558151848152915193945091927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a2505050565b60006134a93361160c565b336000908152600b6020526040812054919250906134cd908363ffffffff6126a816565b336000818152600b60209081526040918290208490558151868152908101849052815193945091927f814eba35782909dbbaeefb8104073dfca45de43173f7077970c1584b3cf918b59281900390910190a25090565b6000808211613579576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161358257fe5b049392505050565b6135948282613821565b60006134436135b161147584600654612a4f90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff61339216565b6135e183838361391d565b60006135fb61147583600654612a4f90919063ffffffff16565b6001600160a01b03851660009081526007602052604081205491925090613628908363ffffffff612ae916565b6001600160a01b0380871660009081526007602052604080822084905591871681529081205491925090613662908463ffffffff61339216565b6001600160a01b0380871660009081526007602090815260409182902084905581518681529151939450918916927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a26040805182815290516001600160a01b038716917ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773919081900360200190a2505050505050565b60606137118484600085613a84565b949350505050565b6001600160a01b03821661375e5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d6a6021913960400191505060405180910390fd5b61376a826000836125ee565b6137ad81604051806060016040528060228152602001613c70602291396001600160a01b038516600090815260208190526040902054919063ffffffff61248016565b6001600160a01b0383166000908152602081905260409020556002546137d9908263ffffffff61270216565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b03821661387c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b613888600083836125ee565b60025461389b908263ffffffff6126a816565b6002556001600160a01b0382166000908152602081905260409020546138c7908263ffffffff6126a816565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0383166139625760405162461bcd60e51b8152600401808060200182810382526025815260200180613d8b6025913960400191505060405180910390fd5b6001600160a01b0382166139a75760405162461bcd60e51b8152600401808060200182810382526023815260200180613c4d6023913960400191505060405180910390fd5b6139b28383836125ee565b6139f581604051806060016040528060268152602001613cb4602691396001600160a01b038616600090815260208190526040902054919063ffffffff61248016565b6001600160a01b038085166000908152602081905260408082209390935590841681522054613a2a908263ffffffff6126a816565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b606082471015613ac55760405162461bcd60e51b8152600401808060200182810382526026815260200180613cfb6026913960400191505060405180910390fd5b613ace85613be0565b613b1f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613b5e5780518252601f199092019160209182019101613b3f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613bc0576040519150601f19603f3d011682016040523d82523d6000602084013e613bc5565b606091505b5091509150613bd5828286613be6565b979650505050505050565b3b151590565b60608315613bf5575081610aa9565b825115613c055782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156124d45781810151838201526020016124bc56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212206439c6ba0ef5dcfb20f15971d7edf97fe83aed43e7abad769b317db91d706a1364736f6c634300060b0033a26469706673582212209e8e894d9e08112d15689d061ffeffe0c297292e71a0c7a8ac3534c1bb217e7f64736f6c634300060b0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "newLocker(address,address)": {
        "details": "Instantiate a StakeLocker.It emits a `StakeLockerCreated` event.",
        "params": {
          "liquidityAsset": "Address of the Liquidity Asset (as defined in the Pool).",
          "stakeAsset": "Address of the Stake Asset (generally Balancer Pool BPTs)."
        },
        "returns": {
          "stakeLocker": "   Address of the instantiated StakeLocker."
        }
      }
    },
    "title": "StakeLockerFactory instantiates StakeLockers.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11581,
        "contract": "packages/protocol/contracts/StakeLockerFactory.sol:StakeLockerFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11585,
        "contract": "packages/protocol/contracts/StakeLockerFactory.sol:StakeLockerFactory",
        "label": "isLocker",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}