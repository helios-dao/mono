{
  "address": "0xE7E4320c9b36cC3E0CD2b6Cac56A4ca10A7A89DE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_globals",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityLocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeLocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delegateFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactoryAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "PoolFactoryAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LL_FACTORY",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SL_FACTORY",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "slFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "llFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegateFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityCap",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globals",
      "outputs": [
        {
          "internalType": "contract IHeliosGlobals",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolFactoryAdmins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGlobals",
          "type": "address"
        }
      ],
      "name": "setGlobals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactoryAdmin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setPoolFactoryAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe50d8f66099c9c2b15e9905c8e904597761b6c293f90fef96f53270ca9d32f76",
  "receipt": {
    "to": null,
    "from": "0x66BAD169980554a81AA6DBf33b0515101336fd80",
    "contractAddress": "0xE7E4320c9b36cC3E0CD2b6Cac56A4ca10A7A89DE",
    "transactionIndex": 6,
    "gasUsed": "5332735",
    "logsBloom": "0x
    "blockHash": "0x4a2897093bd00469e636b36ca65404362b9602012d6a1292822a984628b25de0",
    "transactionHash": "0xe50d8f66099c9c2b15e9905c8e904597761b6c293f90fef96f53270ca9d32f76",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 26045332,
        "transactionHash": "0xe50d8f66099c9c2b15e9905c8e904597761b6c293f90fef96f53270ca9d32f76",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000066bad169980554a81aa6dbf33b0515101336fd80",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000017ae9e270954008000000000000000000000000000000000000000000000000152771e55501ebf6000000000000000000000000000000000000000000000bba0db9349a0759b83000000000000000000000000000000000000000000000000013ac8802e46cabee000000000000000000000000000000000000000000000bba0f341e7c77eef838",
        "logIndex": 13,
        "blockHash": "0x4a2897093bd00469e636b36ca65404362b9602012d6a1292822a984628b25de0"
      }
    ],
    "blockNumber": 26045332,
    "cumulativeGasUsed": "6175844",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0bBf151826CAd245DE3fEc0628f5C8e78e22e5aD"
  ],
  "numDeployments": 2,
  "solcInputHash": "dffa7e128f2b675162a5be10778a0091",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_globals\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactoryAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"PoolFactoryAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LL_FACTORY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SL_FACTORY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"llFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityCap\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"internalType\":\"contract IHeliosGlobals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolFactoryAdmins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGlobals\",\"type\":\"address\"}],\"name\":\"setGlobals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactoryAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setPoolFactoryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool(address,address,address,address,uint256,uint256,uint256)\":{\"details\":\"Instantiates a Pool.It emits a `PoolCreated` event.\",\"params\":{\"delegateFee\":\"Fee that the Pool Delegate earns on interest, in basis points.\",\"liquidityAsset\":\"The asset escrowed in a LiquidityLocker.\",\"liquidityCap\":\"Amount of Liquidity Asset accepted by the Pool.\",\"llFactory\":\"The factory to instantiate a LiquidityLocker from.\",\"slFactory\":\"The factory to instantiate a StakeLocker from.\",\"stakeAsset\":\"The asset escrowed in a StakeLocker.\",\"stakingFee\":\"Fee that Stakers earn on interest, in basis points.\"},\"returns\":{\"poolAddress\":\"   Address of the instantiated Pool.\"}},\"pause()\":{\"details\":\"Triggers paused state. Halts functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setGlobals(address)\":{\"details\":\"Sets HeliosGlobals instance. Only the Governor can call this function.\",\"params\":{\"newGlobals\":\"Address of new HeliosGlobals.\"}},\"setPoolFactoryAdmin(address,bool)\":{\"details\":\"Sets a PoolFactory Admin. Only the Governor can call this function.It emits a `PoolFactoryAdminSet` event.\",\"params\":{\"allowed\":\"Status of a PoolFactory Admin.\",\"poolFactoryAdmin\":\"An address being allowed or disallowed as a PoolFactory Admin.\"}},\"unpause()\":{\"details\":\"Triggers unpaused state. Restores functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function.\"}},\"title\":\"PoolFactory instantiates Pools.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"packages/protocol/contracts/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"packages/protocol/contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IBPool.sol\\\";\\nimport \\\"./interfaces/IDebtLocker.sol\\\";\\nimport \\\"./interfaces/IHeliosGlobals.sol\\\";\\nimport \\\"./interfaces/ILiquidityLocker.sol\\\";\\nimport \\\"./interfaces/ILiquidityLockerFactory.sol\\\";\\nimport \\\"./interfaces/ILoan.sol\\\";\\nimport \\\"./interfaces/ILoanFactory.sol\\\";\\nimport \\\"./interfaces/IPoolFactory.sol\\\";\\nimport \\\"./interfaces/IStakeLocker.sol\\\";\\nimport \\\"./interfaces/IStakeLockerFactory.sol\\\";\\n\\nimport \\\"./library/PoolLib.sol\\\";\\n\\nimport \\\"./token/PoolFDT.sol\\\";\\n\\n/// @title Pool maintains all accounting and functionality related to Pools.\\ncontract Pool is PoolFDT {\\n\\n    using SafeMath  for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant WAD = 10 ** 18;\\n\\n    uint8 public constant DL_FACTORY = 1;  // Factory type of `DebtLockerFactory`.\\n\\n    IERC20  public immutable liquidityAsset;  // The asset deposited by Lenders into the LiquidityLocker, for funding Loans.\\n\\n    address public immutable poolDelegate;     // The Pool Delegate address, maintains full authority over the Pool.\\n    address public immutable liquidityLocker;  // The LiquidityLocker owned by this contract\\n    address public immutable stakeAsset;       // The address of the asset deposited by Stakers into the StakeLocker (BPTs), for liquidation during default events.\\n    address public immutable stakeLocker;      // The address of the StakeLocker, escrowing `stakeAsset`.\\n    address public immutable superFactory;     // The factory that deployed this Loan.\\n\\n    uint256 private immutable liquidityAssetDecimals;  // The precision for the Liquidity Asset (i.e. `decimals()`).\\n\\n    uint256 public           stakingFee;   // The fee Stakers earn            (in basis points).\\n    uint256 public immutable delegateFee;  // The fee the Pool Delegate earns (in basis points).\\n\\n    uint256 public principalOut;  // The sum of all outstanding principal on Loans.\\n    uint256 public liquidityCap;  // The amount of liquidity tokens accepted by the Pool.\\n    uint256 public lockupPeriod;  // The period of time from an account's deposit date during which they cannot withdraw any funds.\\n\\n    bool public openToPublic;  // Boolean opening Pool to public for LP deposits\\n\\n    enum State { Initialized, Finalized, Deactivated }\\n    State public poolState;\\n\\n    mapping(address => uint256)                     public depositDate;                // Used for withdraw penalty calculation.\\n    mapping(address => mapping(address => address)) public debtLockers;                // Address of the DebtLocker corresponding to `[Loan][DebtLockerFactory]`.\\n    mapping(address => bool)                        public poolAdmins;                 // The Pool Admin addresses that have permission to do certain operations in case of disaster management.\\n    mapping(address => bool)                        public allowedLiquidityProviders;  // Mapping that contains the list of addresses that have early access to the pool.\\n    mapping(address => uint256)                     public withdrawCooldown;           // The timestamp of when individual LPs have notified of their intent to withdraw.\\n    mapping(address => mapping(address => uint256)) public custodyAllowance;           // The amount of PoolFDTs that are \\\"locked\\\" at a certain address.\\n    mapping(address => uint256)                     public totalCustodyAllowance;      // The total amount of PoolFDTs that are \\\"locked\\\" for a given account. Cannot be greater than an account's balance.\\n\\n    event                   LoanFunded(address indexed loan, address debtLocker, uint256 amountFunded);\\n    event                        Claim(address indexed loan, uint256 interest, uint256 principal, uint256 fee, uint256 stakeLockerPortion, uint256 poolDelegatePortion);\\n    event               BalanceUpdated(address indexed liquidityProvider, address indexed token, uint256 balance);\\n    event              CustodyTransfer(address indexed custodian, address indexed from, address indexed to, uint256 amount);\\n    event      CustodyAllowanceChanged(address indexed liquidityProvider, address indexed custodian, uint256 oldAllowance, uint256 newAllowance);\\n    event              LPStatusChanged(address indexed liquidityProvider, bool status);\\n    event              LiquidityCapSet(uint256 newLiquidityCap);\\n    event              LockupPeriodSet(uint256 newLockupPeriod);\\n    event                StakingFeeSet(uint256 newStakingFee);\\n    event             PoolStateChanged(State state);\\n    event                     Cooldown(address indexed liquidityProvider, uint256 cooldown);\\n    event           PoolOpenedToPublic(bool isOpen);\\n    event                 PoolAdminSet(address indexed poolAdmin, bool allowed);\\n    event           DepositDateUpdated(address indexed liquidityProvider, uint256 depositDate);\\n    event TotalCustodyAllowanceUpdated(address indexed liquidityProvider, uint256 newTotalAllowance);\\n\\n    event DefaultSuffered(\\n        address indexed loan,\\n        uint256 defaultSuffered,\\n        uint256 bptsBurned,\\n        uint256 bptsReturned,\\n        uint256 liquidityAssetRecoveredFromBurn\\n    );\\n\\n    /**\\n        Universal accounting law:\\n                                       fdtTotalSupply = liquidityLockerBal + principalOut - interestSum + poolLosses\\n            fdtTotalSupply + interestSum - poolLosses = liquidityLockerBal + principalOut\\n    */\\n\\n    /**\\n        @dev   Constructor for a Pool.\\n        @dev   It emits a `PoolStateChanged` event.\\n        @param _poolDelegate   Address that has manager privileges of the Pool.\\n        @param _liquidityAsset Asset used to fund the Pool, It gets escrowed in LiquidityLocker.\\n        @param _stakeAsset     Asset escrowed in StakeLocker.\\n        @param _slFactory      Factory used to instantiate the StakeLocker.\\n        @param _llFactory      Factory used to instantiate the LiquidityLocker.\\n        @param _stakingFee     Fee that Stakers earn on interest, in basis points.\\n        @param _delegateFee    Fee that the Pool Delegate earns on interest, in basis points.\\n        @param _liquidityCap   Max amount of Liquidity Asset accepted by the Pool.\\n        @param name            Name of Pool token.\\n        @param symbol          Symbol of Pool token.\\n    */\\n    constructor(\\n        address _poolDelegate,\\n        address _liquidityAsset,\\n        address _stakeAsset,\\n        address _slFactory,\\n        address _llFactory,\\n        uint256 _stakingFee,\\n        uint256 _delegateFee,\\n        uint256 _liquidityCap,\\n        string memory name,\\n        string memory symbol\\n    ) PoolFDT(name, symbol) public {\\n\\n        // Conduct sanity checks on Pool parameters.\\n        PoolLib.poolSanityChecks(_globals(msg.sender), _liquidityAsset, _stakeAsset, _stakingFee, _delegateFee);\\n\\n        // Assign variables relating to the Liquidity Asset.\\n        liquidityAsset         = IERC20(_liquidityAsset);\\n        liquidityAssetDecimals = ERC20(_liquidityAsset).decimals();\\n\\n        // Assign state variables.\\n        stakeAsset   = _stakeAsset;\\n        poolDelegate = _poolDelegate;\\n        stakingFee   = _stakingFee;\\n        delegateFee  = _delegateFee;\\n        superFactory = msg.sender;\\n        liquidityCap = _liquidityCap;\\n\\n        // Instantiate the LiquidityLocker and the StakeLocker.\\n        stakeLocker     = address(IStakeLockerFactory(_slFactory).newLocker(_stakeAsset, _liquidityAsset));\\n        liquidityLocker = address(ILiquidityLockerFactory(_llFactory).newLocker(_liquidityAsset));\\n\\n        lockupPeriod = 180 days;\\n\\n        emit PoolStateChanged(State.Initialized);\\n    }\\n\\n    /*******************************/\\n    /*** Pool Delegate Functions ***/\\n    /*******************************/\\n\\n    /**\\n        @dev Finalizes the Pool, enabling deposits. Checks the amount the Pool Delegate deposited to the StakeLocker.\\n             Only the Pool Delegate can call this function.\\n        @dev It emits a `PoolStateChanged` event.\\n    */\\n    function finalize() external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        _isValidState(State.Initialized);\\n        (,, bool stakeSufficient,,) = getInitialStakeRequirements();\\n        require(stakeSufficient, \\\"P:INSUF_STAKE\\\");\\n        poolState = State.Finalized;\\n        emit PoolStateChanged(poolState);\\n    }\\n\\n    /**\\n        @dev   Funds a Loan for an amount, utilizing the supplied DebtLockerFactory for DebtLockers.\\n               Only the Pool Delegate can call this function.\\n        @dev   It emits a `LoanFunded` event.\\n        @dev   It emits a `BalanceUpdated` event.\\n        @param loan      Address of the Loan to fund.\\n        @param dlFactory Address of the DebtLockerFactory to utilize.\\n        @param amt       Amount to fund the Loan.\\n    */\\n    function fundLoan(address loan, address dlFactory, uint256 amt) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        _isValidState(State.Finalized);\\n        principalOut = principalOut.add(amt);\\n        PoolLib.fundLoan(debtLockers, superFactory, liquidityLocker, loan, dlFactory, amt);\\n        _emitBalanceUpdatedEvent();\\n    }\\n\\n    /**\\n        @dev   Liquidates a Loan. The Pool Delegate could liquidate the Loan only when the Loan completes its grace period.\\n               The Pool Delegate can claim its proportion of recovered funds from the liquidation using the `claim()` function.\\n               Only the Pool Delegate can call this function.\\n        @param loan      Address of the Loan to liquidate.\\n        @param dlFactory Address of the DebtLockerFactory that is used to pull corresponding DebtLocker.\\n    */\\n    function triggerDefault(address loan, address dlFactory) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        IDebtLocker(debtLockers[loan][dlFactory]).triggerDefault();\\n    }\\n\\n    /**\\n        @dev    Claims available funds for the Loan through a specified DebtLockerFactory. Only the Pool Delegate or a Pool Admin can call this function.\\n        @dev    It emits two `BalanceUpdated` events.\\n        @dev    It emits a `Claim` event.\\n        @param  loan      Address of the loan to claim from.\\n        @param  dlFactory Address of the DebtLockerFactory.\\n        @return claimInfo The claim details.\\n                    claimInfo [0] = Total amount claimed\\n                    claimInfo [1] = Interest  portion claimed\\n                    claimInfo [2] = Principal portion claimed\\n                    claimInfo [3] = Fee       portion claimed\\n                    claimInfo [4] = Excess    portion claimed\\n                    claimInfo [5] = Recovered portion claimed (from liquidations)\\n                    claimInfo [6] = Default suffered\\n    */\\n    function claim(address loan, address dlFactory) external returns (uint256[7] memory claimInfo) {\\n        _whenProtocolNotPaused();\\n        _isValidDelegateOrPoolAdmin();\\n        claimInfo = IDebtLocker(debtLockers[loan][dlFactory]).claim();\\n\\n        (uint256 poolDelegatePortion, uint256 stakeLockerPortion, uint256 principalClaim, uint256 interestClaim) = PoolLib.calculateClaimAndPortions(claimInfo, delegateFee, stakingFee);\\n\\n        // Subtract outstanding principal by the principal claimed plus excess returned.\\n        // Considers possible `principalClaim` overflow if Liquidity Asset is transferred directly into the Loan.\\n        if (principalClaim <= principalOut) {\\n            principalOut = principalOut - principalClaim;\\n        } else {\\n            interestClaim  = interestClaim.add(principalClaim - principalOut);  // Distribute `principalClaim` overflow as interest to LPs.\\n            principalClaim = principalOut;                                      // Set `principalClaim` to `principalOut` so correct amount gets transferred.\\n            principalOut   = 0;                                                 // Set `principalOut` to zero to avoid subtraction overflow.\\n        }\\n\\n        // Accounts for rounding error in StakeLocker / Pool Delegate / LiquidityLocker interest split.\\n        interestSum = interestSum.add(interestClaim);\\n\\n        _transferLiquidityAsset(poolDelegate, poolDelegatePortion);  // Transfer the fee and portion of interest to the Pool Delegate.\\n        _transferLiquidityAsset(stakeLocker,  stakeLockerPortion);   // Transfer the portion of interest to the StakeLocker.\\n\\n        // Transfer remaining claim (remaining interest + principal + excess + recovered) to the LiquidityLocker.\\n        // Dust will accrue in the Pool, but this ensures that state variables are in sync with the LiquidityLocker balance updates.\\n        // Not using `balanceOf` in case of external address transferring the Liquidity Asset directly into Pool.\\n        // Ensures that internal accounting is exactly reflective of balance change.\\n        _transferLiquidityAsset(liquidityLocker, principalClaim.add(interestClaim));\\n\\n        // Handle default if defaultSuffered > 0.\\n        if (claimInfo[6] > 0) _handleDefault(loan, claimInfo[6]);\\n\\n        // Update funds received for StakeLockerFDTs.\\n        IStakeLocker(stakeLocker).updateFundsReceived();\\n\\n        // Update funds received for PoolFDTs.\\n        updateFundsReceived();\\n\\n        _emitBalanceUpdatedEvent();\\n        emit BalanceUpdated(stakeLocker, address(liquidityAsset), liquidityAsset.balanceOf(stakeLocker));\\n\\n        emit Claim(loan, interestClaim, principalClaim, claimInfo[3], stakeLockerPortion, poolDelegatePortion);\\n    }\\n\\n    /**\\n        @dev   Handles if a claim has been made and there is a non-zero defaultSuffered amount.\\n        @dev   It emits a `DefaultSuffered` event.\\n        @param loan            Address of a Loan that has defaulted.\\n        @param defaultSuffered Losses suffered from default after liquidation.\\n    */\\n    function _handleDefault(address loan, uint256 defaultSuffered) internal {\\n\\n        (uint256 bptsBurned, uint256 postBurnBptBal, uint256 liquidityAssetRecoveredFromBurn) = PoolLib.handleDefault(liquidityAsset, stakeLocker, stakeAsset, defaultSuffered);\\n\\n        // If BPT burn is not enough to cover full default amount, pass on losses to LPs with PoolFDT loss accounting.\\n        if (defaultSuffered > liquidityAssetRecoveredFromBurn) {\\n            poolLosses = poolLosses.add(defaultSuffered - liquidityAssetRecoveredFromBurn);\\n            updateLossesReceived();\\n        }\\n\\n        // Transfer Liquidity Asset from burn to LiquidityLocker.\\n        liquidityAsset.safeTransfer(liquidityLocker, liquidityAssetRecoveredFromBurn);\\n\\n        principalOut = principalOut.sub(defaultSuffered);  // Subtract rest of the Loan's principal from `principalOut`.\\n\\n        emit DefaultSuffered(\\n            loan,                            // The Loan that suffered the default.\\n            defaultSuffered,                 // Total default suffered from the Loan by the Pool after liquidation.\\n            bptsBurned,                      // Amount of BPTs burned from StakeLocker.\\n            postBurnBptBal,                  // Remaining BPTs in StakeLocker post-burn.\\n            liquidityAssetRecoveredFromBurn  // Amount of Liquidity Asset recovered from burning BPTs.\\n        );\\n    }\\n\\n    /**\\n        @dev Triggers deactivation, permanently shutting down the Pool. Must have less than 100 USD worth of Liquidity Asset `principalOut`.\\n             Only the Pool Delegate can call this function.\\n        @dev It emits a `PoolStateChanged` event.\\n    */\\n    function deactivate() external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        _isValidState(State.Finalized);\\n        PoolLib.validateDeactivation(_globals(superFactory), principalOut, address(liquidityAsset));\\n        poolState = State.Deactivated;\\n        emit PoolStateChanged(poolState);\\n    }\\n\\n    /**************************************/\\n    /*** Pool Delegate Setter Functions ***/\\n    /**************************************/\\n\\n    /**\\n        @dev   Sets the liquidity cap. Only the Pool Delegate or a Pool Admin can call this function.\\n        @dev   It emits a `LiquidityCapSet` event.\\n        @param newLiquidityCap New liquidity cap value.\\n    */\\n    function setLiquidityCap(uint256 newLiquidityCap) external {\\n        _whenProtocolNotPaused();\\n        _isValidDelegateOrPoolAdmin();\\n        liquidityCap = newLiquidityCap;\\n        emit LiquidityCapSet(newLiquidityCap);\\n    }\\n\\n    /**\\n        @dev   Sets the lockup period. Only the Pool Delegate can call this function.\\n        @dev   It emits a `LockupPeriodSet` event.\\n        @param newLockupPeriod New lockup period used to restrict the withdrawals.\\n    */\\n    function setLockupPeriod(uint256 newLockupPeriod) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        require(newLockupPeriod <= lockupPeriod, \\\"P:BAD_VALUE\\\");\\n        lockupPeriod = newLockupPeriod;\\n        emit LockupPeriodSet(newLockupPeriod);\\n    }\\n\\n    /**\\n        @dev   Sets the staking fee. Only the Pool Delegate can call this function.\\n        @dev   It emits a `StakingFeeSet` event.\\n        @param newStakingFee New staking fee.\\n    */\\n    function setStakingFee(uint256 newStakingFee) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        require(newStakingFee.add(delegateFee) <= 10_000, \\\"P:BAD_FEE\\\");\\n        stakingFee = newStakingFee;\\n        emit StakingFeeSet(newStakingFee);\\n    }\\n\\n    /**\\n        @dev   Sets the account status in the Pool's allowlist. Only the Pool Delegate can call this function.\\n        @dev   It emits an `LPStatusChanged` event.\\n        @param account The address to set status for.\\n        @param status  The status of an account in the allowlist.\\n    */\\n    function setAllowList(address account, bool status) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        allowedLiquidityProviders[account] = status;\\n        emit LPStatusChanged(account, status);\\n    }\\n\\n    /**\\n        @dev   Sets a Pool Admin. Only the Pool Delegate can call this function.\\n        @dev   It emits a `PoolAdminSet` event.\\n        @param poolAdmin An address being allowed or disallowed as a Pool Admin.\\n        @param allowed Status of a Pool Admin.\\n    */\\n    function setPoolAdmin(address poolAdmin, bool allowed) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        poolAdmins[poolAdmin] = allowed;\\n        emit PoolAdminSet(poolAdmin, allowed);\\n    }\\n\\n    /**\\n        @dev   Sets whether the Pool is open to the public. Only the Pool Delegate can call this function.\\n        @dev   It emits a `PoolOpenedToPublic` event.\\n        @param open Public pool access status.\\n    */\\n    function setOpenToPublic(bool open) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        openToPublic = open;\\n        emit PoolOpenedToPublic(open);\\n    }\\n\\n    /************************************/\\n    /*** Liquidity Provider Functions ***/\\n    /************************************/\\n\\n    /**\\n        @dev   Handles Liquidity Providers depositing of Liquidity Asset into the LiquidityLocker, minting PoolFDTs.\\n        @dev   It emits a `DepositDateUpdated` event.\\n        @dev   It emits a `BalanceUpdated` event.\\n        @dev   It emits a `Cooldown` event.\\n        @param amt Amount of Liquidity Asset to deposit.\\n    */\\n    function deposit(uint256 amt) external {\\n        _whenProtocolNotPaused();\\n        _isValidState(State.Finalized);\\n        require(isDepositAllowed(amt), \\\"P:DEP_NOT_ALLOWED\\\");\\n\\n        withdrawCooldown[msg.sender] = uint256(0);  // Reset the LP's withdraw cooldown if they had previously intended to withdraw.\\n\\n        uint256 wad = _toWad(amt);\\n        PoolLib.updateDepositDate(depositDate, balanceOf(msg.sender), wad, msg.sender);\\n\\n        liquidityAsset.safeTransferFrom(msg.sender, liquidityLocker, amt);\\n        _mint(msg.sender, wad);\\n\\n        _emitBalanceUpdatedEvent();\\n        emit Cooldown(msg.sender, uint256(0));\\n    }\\n\\n    /**\\n        @dev Activates the cooldown period to withdraw. It can't be called if the account is not providing liquidity.\\n        @dev It emits a `Cooldown` event.\\n    **/\\n    function intendToWithdraw() external {\\n        require(balanceOf(msg.sender) != uint256(0), \\\"P:ZERO_BAL\\\");\\n        withdrawCooldown[msg.sender] = block.timestamp;\\n        emit Cooldown(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n        @dev Cancels an initiated withdrawal by resetting the account's withdraw cooldown.\\n        @dev It emits a `Cooldown` event.\\n    **/\\n    function cancelWithdraw() external {\\n        require(withdrawCooldown[msg.sender] != uint256(0), \\\"P:NOT_WITHDRAWING\\\");\\n        withdrawCooldown[msg.sender] = uint256(0);\\n        emit Cooldown(msg.sender, uint256(0));\\n    }\\n\\n    /**\\n        @dev   Checks that the account can withdraw an amount.\\n        @param account The address of the account.\\n        @param wad     The amount to withdraw.\\n    */\\n    function _canWithdraw(address account, uint256 wad) internal view {\\n        require(depositDate[account].add(lockupPeriod) <= block.timestamp,     \\\"P:FUNDS_LOCKED\\\");     // Restrict withdrawal during lockup period\\n        require(balanceOf(account).sub(wad) >= totalCustodyAllowance[account], \\\"P:INSUF_TRANS_BAL\\\");  // Account can only withdraw tokens that aren't custodied\\n    }\\n\\n    /**\\n        @dev   Handles Liquidity Providers withdrawing of Liquidity Asset from the LiquidityLocker, burning PoolFDTs.\\n        @dev   It emits two `BalanceUpdated` event.\\n        @param amt Amount of Liquidity Asset to withdraw.\\n    */\\n    function withdraw(uint256 amt) external {\\n        _whenProtocolNotPaused();\\n        uint256 wad = _toWad(amt);\\n        (uint256 lpCooldownPeriod, uint256 lpWithdrawWindow) = _globals(superFactory).getLpCooldownParams();\\n\\n        _canWithdraw(msg.sender, wad);\\n        require((block.timestamp - (withdrawCooldown[msg.sender] + lpCooldownPeriod)) <= lpWithdrawWindow, \\\"P:WITHDRAW_NOT_ALLOWED\\\");\\n\\n        _burn(msg.sender, wad);  // Burn the corresponding PoolFDTs balance.\\n        withdrawFunds();         // Transfer full entitled interest, decrement `interestSum`.\\n\\n        // Transfer amount that is due after realized losses are accounted for.\\n        // Recognized losses are absorbed by the LP.\\n        _transferLiquidityLockerFunds(msg.sender, amt.sub(_recognizeLosses()));\\n\\n        _emitBalanceUpdatedEvent();\\n    }\\n\\n    /**\\n        @dev   Transfers PoolFDTs.\\n        @param from Address sending   PoolFDTs.\\n        @param to   Address receiving PoolFDTs.\\n        @param wad  Amount of PoolFDTs to transfer.\\n    */\\n    function _transfer(address from, address to, uint256 wad) internal override {\\n        _whenProtocolNotPaused();\\n\\n        (uint256 lpCooldownPeriod, uint256 lpWithdrawWindow) = _globals(superFactory).getLpCooldownParams();\\n\\n        _canWithdraw(from, wad);\\n        require(block.timestamp > (withdrawCooldown[to] + lpCooldownPeriod + lpWithdrawWindow), \\\"P:TO_NOT_ALLOWED\\\");  // Recipient must not be currently withdrawing.\\n        require(recognizableLossesOf(from) == uint256(0),                                       \\\"P:RECOG_LOSSES\\\");    // If an LP has unrecognized losses, they must recognize losses using `withdraw`.\\n\\n        PoolLib.updateDepositDate(depositDate, balanceOf(to), wad, to);\\n        super._transfer(from, to, wad);\\n    }\\n\\n    /**\\n        @dev Withdraws all claimable interest from the LiquidityLocker for an account using `interestSum` accounting.\\n        @dev It emits a `BalanceUpdated` event.\\n    */\\n    function withdrawFunds() public override {\\n        _whenProtocolNotPaused();\\n        uint256 withdrawableFunds = _prepareWithdraw();\\n\\n        if (withdrawableFunds == uint256(0)) return;\\n\\n        _transferLiquidityLockerFunds(msg.sender, withdrawableFunds);\\n        _emitBalanceUpdatedEvent();\\n\\n        interestSum = interestSum.sub(withdrawableFunds);\\n\\n        _updateFundsTokenBalance();\\n    }\\n\\n    /**\\n        @dev   Increases the custody allowance for a given Custodian corresponding to the calling account (`msg.sender`).\\n        @dev   It emits a `CustodyAllowanceChanged` event.\\n        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\\n        @param custodian Address which will act as Custodian of a given amount for an account.\\n        @param amount    Number of additional FDTs to be custodied by the Custodian.\\n    */\\n    function increaseCustodyAllowance(address custodian, uint256 amount) external {\\n        uint256 oldAllowance      = custodyAllowance[msg.sender][custodian];\\n        uint256 newAllowance      = oldAllowance.add(amount);\\n        uint256 newTotalAllowance = totalCustodyAllowance[msg.sender].add(amount);\\n\\n        PoolLib.increaseCustodyAllowanceChecks(custodian, amount, newTotalAllowance, balanceOf(msg.sender));\\n\\n        custodyAllowance[msg.sender][custodian] = newAllowance;\\n        totalCustodyAllowance[msg.sender]       = newTotalAllowance;\\n        emit CustodyAllowanceChanged(msg.sender, custodian, oldAllowance, newAllowance);\\n        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\\n    }\\n\\n    /**\\n        @dev   Transfers custodied PoolFDTs back to the account.\\n        @dev   `from` and `to` should always be equal in this implementation.\\n        @dev   This means that the Custodian can only decrease their own allowance and unlock funds for the original owner.\\n        @dev   It emits a `CustodyTransfer` event.\\n        @dev   It emits a `CustodyAllowanceChanged` event.\\n        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\\n        @param from   Address which holds the PoolFDTs.\\n        @param to     Address which will be the new owner of the amount of PoolFDTs.\\n        @param amount Amount of PoolFDTs transferred.\\n    */\\n    function transferByCustodian(address from, address to, uint256 amount) external {\\n        uint256 oldAllowance = custodyAllowance[from][msg.sender];\\n        uint256 newAllowance = oldAllowance.sub(amount);\\n\\n        PoolLib.transferByCustodianChecks(from, to, amount);\\n\\n        custodyAllowance[from][msg.sender] = newAllowance;\\n        uint256 newTotalAllowance          = totalCustodyAllowance[from].sub(amount);\\n        totalCustodyAllowance[from]        = newTotalAllowance;\\n        emit CustodyTransfer(msg.sender, from, to, amount);\\n        emit CustodyAllowanceChanged(from, msg.sender, oldAllowance, newAllowance);\\n        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\\n    }\\n\\n    /**************************/\\n    /*** Governor Functions ***/\\n    /**************************/\\n\\n    /**\\n        @dev   Transfers any locked funds to the Governor. Only the Governor can call this function.\\n        @param token Address of the token to be reclaimed.\\n    */\\n    function reclaimERC20(address token) external {\\n        PoolLib.reclaimERC20(token, address(liquidityAsset), _globals(superFactory));\\n    }\\n\\n    /*************************/\\n    /*** Getter Functions ***/\\n    /*************************/\\n\\n    /**\\n        @dev    Calculates the value of BPT in units of Liquidity Asset.\\n        @param  _bPool          Address of Balancer pool.\\n        @param  _liquidityAsset Asset used by Pool for liquidity to fund Loans.\\n        @param  _staker         Address that deposited BPTs to StakeLocker.\\n        @param  _stakeLocker    Escrows BPTs deposited by Staker.\\n        @return USDC value of staker BPTs.\\n    */\\n    function BPTVal(\\n        address _bPool,\\n        address _liquidityAsset,\\n        address _staker,\\n        address _stakeLocker\\n    ) external view returns (uint256) {\\n        return PoolLib.BPTVal(_bPool, _liquidityAsset, _staker, _stakeLocker);\\n    }\\n\\n    /**\\n        @dev   Checks that the given deposit amount is acceptable based on current liquidityCap.\\n        @param depositAmt Amount of tokens (i.e liquidityAsset type) the account is trying to deposit.\\n    */\\n    function isDepositAllowed(uint256 depositAmt) public view returns (bool) {\\n        return (openToPublic || allowedLiquidityProviders[msg.sender]) &&\\n               _balanceOfLiquidityLocker().add(principalOut).add(depositAmt) <= liquidityCap;\\n    }\\n\\n    /**\\n        @dev    Returns information on the stake requirements.\\n        @return [0] = Min amount of Liquidity Asset coverage from staking required.\\n                [1] = Present amount of Liquidity Asset coverage from the Pool Delegate stake.\\n                [2] = If enough stake is present from the Pool Delegate for finalization.\\n                [3] = Staked BPTs required for minimum Liquidity Asset coverage.\\n                [4] = Current staked BPTs.\\n    */\\n    function getInitialStakeRequirements() public view returns (uint256, uint256, bool, uint256, uint256) {\\n        return PoolLib.getInitialStakeRequirements(_globals(superFactory), stakeAsset, address(liquidityAsset), poolDelegate, stakeLocker);\\n    }\\n\\n    /**\\n        @dev    Calculates BPTs required if burning BPTs for the Liquidity Asset, given supplied `tokenAmountOutRequired`.\\n        @param  _bPool                        The Balancer pool that issues the BPTs.\\n        @param  _liquidityAsset               Swap out asset (e.g. USDC) to receive when burning BPTs.\\n        @param  _staker                       Address that deposited BPTs to StakeLocker.\\n        @param  _stakeLocker                  Escrows BPTs deposited by Staker.\\n        @param  _liquidityAssetAmountRequired Amount of Liquidity Asset required to recover.\\n        @return [0] = poolAmountIn required.\\n                [1] = poolAmountIn currently staked.\\n    */\\n    function getPoolSharesRequired(\\n        address _bPool,\\n        address _liquidityAsset,\\n        address _staker,\\n        address _stakeLocker,\\n        uint256 _liquidityAssetAmountRequired\\n    ) external view returns (uint256, uint256) {\\n        return PoolLib.getPoolSharesRequired(_bPool, _liquidityAsset, _staker, _stakeLocker, _liquidityAssetAmountRequired);\\n    }\\n\\n    /**\\n      @dev    Checks that the Pool state is `Finalized`.\\n      @return bool Boolean value indicating if Pool is in a Finalized state.\\n    */\\n    function isPoolFinalized() external view returns (bool) {\\n        return poolState == State.Finalized;\\n    }\\n\\n    /************************/\\n    /*** Helper Functions ***/\\n    /************************/\\n\\n    /**\\n        @dev   Converts to WAD precision.\\n        @param amt Amount to convert.\\n    */\\n    function _toWad(uint256 amt) internal view returns (uint256) {\\n        return amt.mul(WAD).div(10 ** liquidityAssetDecimals);\\n    }\\n\\n    /**\\n        @dev    Returns the balance of this Pool's LiquidityLocker.\\n        @return Balance of LiquidityLocker.\\n    */\\n    function _balanceOfLiquidityLocker() internal view returns (uint256) {\\n        return liquidityAsset.balanceOf(liquidityLocker);\\n    }\\n\\n    /**\\n        @dev   Checks that the current state of Pool matches the provided state.\\n        @param _state Enum of desired Pool state.\\n    */\\n    function _isValidState(State _state) internal view {\\n        require(poolState == _state, \\\"P:BAD_STATE\\\");\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool Delegate.\\n    */\\n    function _isValidDelegate() internal view {\\n        require(msg.sender == poolDelegate, \\\"P:NOT_DEL\\\");\\n    }\\n\\n    /**\\n        @dev Returns the HeliosGlobals instance.\\n    */\\n    function _globals(address poolFactory) internal view returns (IHeliosGlobals) {\\n        return IHeliosGlobals(IPoolFactory(poolFactory).globals());\\n    }\\n\\n    /**\\n        @dev Emits a `BalanceUpdated` event for LiquidityLocker.\\n        @dev It emits a `BalanceUpdated` event.\\n    */\\n    function _emitBalanceUpdatedEvent() internal {\\n        emit BalanceUpdated(liquidityLocker, address(liquidityAsset), _balanceOfLiquidityLocker());\\n    }\\n\\n    /**\\n        @dev   Transfers Liquidity Asset to given `to` address, from self (i.e. `address(this)`).\\n        @param to    Address to transfer liquidityAsset.\\n        @param value Amount of liquidity asset that gets transferred.\\n    */\\n    function _transferLiquidityAsset(address to, uint256 value) internal {\\n        liquidityAsset.safeTransfer(to, value);\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool Delegate or a Pool Admin.\\n    */\\n    function _isValidDelegateOrPoolAdmin() internal view {\\n        require(msg.sender == poolDelegate || poolAdmins[msg.sender], \\\"P:NOT_DEL_OR_ADMIN\\\");\\n    }\\n\\n    /**\\n        @dev Checks that the protocol is not in a paused state.\\n    */\\n    function _whenProtocolNotPaused() internal view {\\n        require(!_globals(superFactory).protocolPaused(), \\\"P:PROTO_PAUSED\\\");\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Pool Delegate and that the protocol is not in a paused state.\\n    */\\n    function _isValidDelegateAndProtocolNotPaused() internal view {\\n        _isValidDelegate();\\n        _whenProtocolNotPaused();\\n    }\\n\\n    function _transferLiquidityLockerFunds(address to, uint256 value) internal {\\n        ILiquidityLocker(liquidityLocker).transfer(to, value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x284e2a148726bad8df4df6eceae0b84f703a74329b764fdcc9ff2399e2725f76\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\nimport \\\"./Pool.sol\\\";\\n\\n/// @title PoolFactory instantiates Pools.\\ncontract PoolFactory is Pausable {\\n\\n    uint8 public constant LL_FACTORY = 3;  // Factory type of `LiquidityLockerFactory`.\\n    uint8 public constant SL_FACTORY = 4;  // Factory type of `StakeLockerFactory`.\\n\\n    uint256  public poolsCreated;  // Incrementor for number of Pools created.\\n    IHeliosGlobals public globals;  // A HeliosGlobals instance.\\n\\n    mapping(uint256 => address) public pools;              // Map to reference Pools corresponding to their respective indices.\\n    mapping(address => bool)    public isPool;             // True only if a Pool was instantiated by this factory.\\n    mapping(address => bool)    public poolFactoryAdmins;  // The PoolFactory Admin addresses that have permission to do certain operations in case of disaster management.\\n\\n    event PoolFactoryAdminSet(address indexed poolFactoryAdmin, bool allowed);\\n\\n    event PoolCreated(\\n        address indexed pool,\\n        address indexed delegate,\\n        address liquidityAsset,\\n        address stakeAsset,\\n        address liquidityLocker,\\n        address stakeLocker,\\n        uint256 stakingFee,\\n        uint256 delegateFee,\\n        uint256 liquidityCap,\\n        string  name,\\n        string  symbol\\n    );\\n\\n    constructor(address _globals) public {\\n        globals = IHeliosGlobals(_globals);\\n    }\\n\\n    /**\\n        @dev   Sets HeliosGlobals instance. Only the Governor can call this function.\\n        @param newGlobals Address of new HeliosGlobals.\\n    */\\n    function setGlobals(address newGlobals) external {\\n        _isValidGovernor();\\n        globals = IHeliosGlobals(newGlobals);\\n    }\\n\\n    /**\\n        @dev    Instantiates a Pool.\\n        @dev    It emits a `PoolCreated` event.\\n        @param  liquidityAsset The asset escrowed in a LiquidityLocker.\\n        @param  stakeAsset     The asset escrowed in a StakeLocker.\\n        @param  slFactory      The factory to instantiate a StakeLocker from.\\n        @param  llFactory      The factory to instantiate a LiquidityLocker from.\\n        @param  stakingFee     Fee that Stakers earn on interest, in basis points.\\n        @param  delegateFee    Fee that the Pool Delegate earns on interest, in basis points.\\n        @param  liquidityCap   Amount of Liquidity Asset accepted by the Pool.\\n        @return poolAddress    Address of the instantiated Pool.\\n    */\\n    function createPool(\\n        address liquidityAsset,\\n        address stakeAsset,\\n        address slFactory,\\n        address llFactory,\\n        uint256 stakingFee,\\n        uint256 delegateFee,\\n        uint256 liquidityCap\\n    ) external whenNotPaused returns (address poolAddress) {\\n        _whenProtocolNotPaused();\\n        {\\n            IHeliosGlobals _globals = globals;\\n            require(_globals.isValidSubFactory(address(this), llFactory, LL_FACTORY), \\\"PF:INVALID_LLF\\\");\\n            require(_globals.isValidSubFactory(address(this), slFactory, SL_FACTORY), \\\"PF:INVALID_SLF\\\");\\n            require(_globals.isValidPoolDelegate(msg.sender),                         \\\"PF:NOT_DELEGATE\\\");\\n        }\\n\\n        string memory name   = \\\"Helios Pool Token\\\";\\n        string memory symbol = \\\"HLS-LP\\\";\\n\\n        Pool pool =\\n            new Pool(\\n                msg.sender,\\n                liquidityAsset,\\n                stakeAsset,\\n                slFactory,\\n                llFactory,\\n                stakingFee,\\n                delegateFee,\\n                liquidityCap,\\n                name,\\n                symbol\\n            );\\n\\n        poolAddress         = address(pool);\\n        pools[poolsCreated] = poolAddress;\\n        isPool[poolAddress] = true;\\n        ++poolsCreated;\\n\\n        emit PoolCreated(\\n            poolAddress,\\n            msg.sender,\\n            liquidityAsset,\\n            stakeAsset,\\n            pool.liquidityLocker(),\\n            pool.stakeLocker(),\\n            stakingFee,\\n            delegateFee,\\n            liquidityCap,\\n            name,\\n            symbol\\n        );\\n    }\\n\\n    /**\\n        @dev   Sets a PoolFactory Admin. Only the Governor can call this function.\\n        @dev   It emits a `PoolFactoryAdminSet` event.\\n        @param poolFactoryAdmin An address being allowed or disallowed as a PoolFactory Admin.\\n        @param allowed  Status of a PoolFactory Admin.\\n    */\\n    function setPoolFactoryAdmin(address poolFactoryAdmin, bool allowed) external {\\n        _isValidGovernor();\\n        poolFactoryAdmins[poolFactoryAdmin] = allowed;\\n        emit PoolFactoryAdminSet(poolFactoryAdmin, allowed);\\n    }\\n\\n    /**\\n        @dev Triggers paused state. Halts functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function.\\n    */\\n    function pause() external {\\n        _isValidGovernorOrPoolFactoryAdmin();\\n        super._pause();\\n    }\\n\\n    /**\\n        @dev Triggers unpaused state. Restores functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function.\\n    */\\n    function unpause() external {\\n        _isValidGovernorOrPoolFactoryAdmin();\\n        super._unpause();\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Governor.\\n    */\\n    function _isValidGovernor() internal view {\\n        require(msg.sender == globals.governor(), \\\"PF:NOT_GOV\\\");\\n    }\\n\\n    /**\\n        @dev Checks that `msg.sender` is the Governor or a PoolFactory Admin.\\n    */\\n    function _isValidGovernorOrPoolFactoryAdmin() internal view {\\n        require(msg.sender == globals.governor() || poolFactoryAdmins[msg.sender], \\\"PF:NOT_GOV_OR_ADMIN\\\");\\n    }\\n\\n    /**\\n        @dev Checks that the protocol is not in a paused state.\\n    */\\n    function _whenProtocolNotPaused() internal view {\\n        require(!globals.protocolPaused(), \\\"PF:PROTO_PAUSED\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf04f4f992a35b9e8d5c1dea6c96348c047b1e4b8eed6c51e2b669731e05b4205\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IBPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IBPool {\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function INIT_POOL_SUPPLY() external view returns (uint256);\\n\\n    function MAX_OUT_RATIO() external view returns (uint256);\\n\\n    function bind(address, uint256, uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function finalize() external;\\n\\n    function gulp(address) external;\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function isBound(address) external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint256);\\n\\n    function getBalance(address) external view returns (uint256);\\n\\n    function getNormalizedWeight(address) external view returns (uint256);\\n\\n    function getDenormalizedWeight(address) external view returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getFinalTokens() external view returns (address[] memory);\\n\\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256);\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external returns (uint256 poolAmountIn);\\n\\n}\\n\",\"keccak256\":\"0xfd210f894304a4b1f7f7fd8bd62e687c2af1ddfb30c49a986e7f4834cabee29b\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IDebtLocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IDebtLocker {\\n\\n    function loan() external view returns (address);\\n\\n    function liquidityAsset() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function lastPrincipalPaid() external view returns (uint256);\\n\\n    function lastInterestPaid() external view returns (uint256);\\n\\n    function lastFeePaid() external view returns (uint256);\\n\\n    function lastExcessReturned() external view returns (uint256);\\n\\n    function lastDefaultSuffered() external view returns (uint256);\\n\\n    function lastAmountRecovered() external view returns (uint256);\\n\\n    function claim() external returns (uint256[7] memory);\\n    \\n    function triggerDefault() external;\\n\\n}\\n\",\"keccak256\":\"0xc88be596192d7d119fa659533faa2ce60cc848033a5726db09cbad270ad2a89a\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IDebtLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IDebtLockerFactory {\\n\\n    function owner(address) external view returns (address);\\n\\n    function isLocker(address) external view returns (bool);\\n\\n    function factoryType() external view returns (uint8);\\n\\n    function newLocker(address) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0xac7f663be300b7a0213a8adc6f1ae1edb18f4d8d039f36aa1e37d9fa2bc93411\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IERC20Details.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Details is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xfe1330353ffc81bc47760f471687ecb981a1e7dfb1f92dad063bd5c5886208b7\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IHeliosGlobals.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IHeliosGlobals {\\n\\n    function pendingGovernor() external view returns (address);\\n\\n    function governor() external view returns (address);\\n\\n    function globalAdmin() external view returns (address);\\n\\n    function hls() external view returns (address);\\n\\n    function heliosTreasury() external view returns (address);\\n\\n    function isValidBalancerPool(address) external view returns (bool);\\n\\n    function treasuryFee() external view returns (uint256);\\n\\n    function investorFee() external view returns (uint256);\\n\\n    function defaultGracePeriod() external view returns (uint256);\\n\\n    function fundingPeriod() external view returns (uint256);\\n\\n    function swapOutRequired() external view returns (uint256);\\n\\n    function isValidLiquidityAsset(address) external view returns (bool);\\n\\n    function isValidCollateralAsset(address) external view returns (bool);\\n\\n    function isValidPoolDelegate(address) external view returns (bool);\\n\\n    function validCalcs(address) external view returns (bool);\\n\\n    function isValidCalc(address, uint8) external view returns (bool);\\n\\n    function getLpCooldownParams() external view returns (uint256, uint256);\\n\\n    function isValidLoanFactory(address) external view returns (bool);\\n\\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\\n\\n    function isValidPoolFactory(address) external view returns (bool);\\n\\n    function getLatestPrice(address) external view returns (uint256);\\n\\n    function defaultUniswapPath(address, address) external view returns (address);\\n\\n    function minLoanEquity() external view returns (uint256);\\n\\n    function maxSwapSlippage() external view returns (uint256);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function stakerCooldownPeriod() external view returns (uint256);\\n\\n    function lpCooldownPeriod() external view returns (uint256);\\n\\n    function stakerUnstakeWindow() external view returns (uint256);\\n\\n    function lpWithdrawWindow() external view returns (uint256);\\n\\n    function oracleFor(address) external view returns (address);\\n\\n    function validSubFactories(address, address) external view returns (bool);\\n\\n    function setStakerCooldownPeriod(uint256) external;\\n\\n    function setLpCooldownPeriod(uint256) external;\\n\\n    function setStakerUnstakeWindow(uint256) external;\\n\\n    function setLpWithdrawWindow(uint256) external;\\n\\n    function setMaxSwapSlippage(uint256) external;\\n\\n    function setGlobalAdmin(address) external;\\n\\n    function setValidBalancerPool(address, bool) external;\\n\\n    function setProtocolPause(bool) external;\\n\\n    function setValidPoolFactory(address, bool) external;\\n\\n    function setValidLoanFactory(address, bool) external;\\n\\n    function setValidSubFactory(address, address, bool) external;\\n\\n    function setDefaultUniswapPath(address, address, address) external;\\n\\n    function setPoolDelegateAllowlist(address, bool) external;\\n\\n    function setCollateralAsset(address, bool) external;\\n\\n    function setLiquidityAsset(address, bool) external;\\n\\n    function setCalc(address, bool) external;\\n\\n    function setInvestorFee(uint256) external;\\n\\n    function setTreasuryFee(uint256) external;\\n\\n    function setHeliosTreasury(address) external;\\n\\n    function setDefaultGracePeriod(uint256) external;\\n\\n    function setMinLoanEquity(uint256) external;\\n\\n    function setFundingPeriod(uint256) external;\\n\\n    function setSwapOutRequired(uint256) external;\\n\\n    function setPriceOracle(address, address) external;\\n\\n    function setPendingGovernor(address) external;\\n\\n    function acceptGovernor() external;\\n\\n}\\n\",\"keccak256\":\"0x5984b6964832179bc5c1c8c8ad26ad276d87f64f773f9480849ccd9809c84732\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/ILiquidityLocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface ILiquidityLocker {\\n\\n    function pool() external view returns (address);\\n\\n    function liquidityAsset() external view returns (address);\\n\\n    function transfer(address, uint256) external;\\n\\n    function fundLoan(address, address, uint256) external;\\n\\n}\\n\",\"keccak256\":\"0xc126e2f67cacfd676996319907db88d4ca54aaf7d42dcfe08391801ec5e4af49\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/ILiquidityLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface ILiquidityLockerFactory {\\n\\n    function owner(address) external view returns (address);\\n    \\n    function isLocker(address) external view returns (bool);\\n\\n    function factoryType() external view returns (uint8);\\n\\n    function newLocker(address) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0x96fb344f51f4724c6e16af60bb8ca31a67e8c0785246fd0becc1078e96a12a92\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/ILoan.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"../token/interfaces/ILoanFDT.sol\\\";\\n\\ninterface ILoan is ILoanFDT {\\n    \\n    // State Variables\\n    function liquidityAsset() external view returns (address);\\n    \\n    function collateralAsset() external view returns (address);\\n    \\n    function fundingLocker() external view returns (address);\\n    \\n    function flFactory() external view returns (address);\\n    \\n    function collateralLocker() external view returns (address);\\n    \\n    function clFactory() external view returns (address);\\n    \\n    function borrower() external view returns (address);\\n    \\n    function repaymentCalc() external view returns (address);\\n    \\n    function lateFeeCalc() external view returns (address);\\n    \\n    function premiumCalc() external view returns (address);\\n    \\n    function loanState() external view returns (uint256);\\n    \\n    function collateralRequiredForDrawdown(uint256) external view returns (uint256);\\n    \\n\\n    // Loan Specifications\\n    function apr() external view returns (uint256);\\n    \\n    function paymentsRemaining() external view returns (uint256);\\n    \\n    function paymentIntervalSeconds() external view returns (uint256);\\n    \\n    function requestAmount() external view returns (uint256);\\n    \\n    function collateralRatio() external view returns (uint256);\\n    \\n    function fundingPeriod() external view returns (uint256);\\n\\n    function defaultGracePeriod() external view returns (uint256);\\n    \\n    function createdAt() external view returns (uint256);\\n    \\n    function principalOwed() external view returns (uint256);\\n    \\n    function principalPaid() external view returns (uint256);\\n    \\n    function interestPaid() external view returns (uint256);\\n    \\n    function feePaid() external view returns (uint256);\\n    \\n    function excessReturned() external view returns (uint256);\\n    \\n    function getNextPayment() external view returns (uint256, uint256, uint256, uint256);\\n    \\n    function superFactory() external view returns (address);\\n    \\n    function termDays() external view returns (uint256);\\n    \\n    function nextPaymentDue() external view returns (uint256);\\n\\n    function getFullPayment() external view returns (uint256, uint256, uint256);\\n    \\n\\n    // Liquidations\\n    function amountLiquidated() external view returns (uint256);\\n\\n    function defaultSuffered() external view returns (uint256);\\n    \\n    function amountRecovered() external view returns (uint256);\\n    \\n    function getExpectedAmountRecovered() external view returns (uint256);\\n\\n    function liquidationExcess() external view returns (uint256);\\n    \\n\\n    // Functions\\n    function fundLoan(address, uint256) external;\\n    \\n    function makePayment() external;\\n    \\n    function drawdown(uint256) external;\\n    \\n    function makeFullPayment() external;\\n    \\n    function triggerDefault() external;\\n    \\n    function unwind() external;\\n    \\n\\n    // Security \\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function loanAdmins(address) external view returns (address);\\n\\n    function setLoanAdmin(address, bool) external;\\n\\n\\n    // Misc\\n    function reclaimERC20(address) external;\\n\\n}\\n\",\"keccak256\":\"0x7c50e1a006af27cbaae68e9dc5c8fd5a9376a73f97baf1bebea0af3d8eac93f2\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/ILoanFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface ILoanFactory {\\n\\n    function CL_FACTORY() external view returns (uint8);\\n\\n    function FL_FACTORY() external view returns (uint8);\\n\\n    function INTEREST_CALC_TYPE() external view returns (uint8);\\n\\n    function LATEFEE_CALC_TYPE() external view returns (uint8);\\n\\n    function PREMIUM_CALC_TYPE() external view returns (uint8);\\n\\n    function globals() external view returns (address);\\n\\n    function loansCreated() external view returns (uint256);\\n\\n    function loans(uint256) external view returns (address);\\n\\n    function isLoan(address) external view returns (bool);\\n\\n    function loanFactoryAdmins(address) external view returns (bool);\\n\\n    function setGlobals(address) external;\\n    \\n    function createLoan(address, address, address, address, uint256[5] memory, address[3] memory) external returns (address);\\n\\n    function setLoanFactoryAdmin(address, bool) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n}\\n\",\"keccak256\":\"0xe69999688b713edb12a2ddc0c3ad3ef039615e03aedc4b5510b7311d41452c0d\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IPoolFactory {\\n\\n    function LL_FACTORY() external view returns (uint8);\\n\\n    function SL_FACTORY() external view returns (uint8);\\n\\n    function poolsCreated() external view returns (uint256);\\n\\n    function globals() external view returns (address);\\n\\n    function pools(uint256) external view returns (address);\\n\\n    function isPool(address) external view returns (bool);\\n\\n    function poolFactoryAdmins(address) external view returns (bool);\\n\\n    function setGlobals(address) external;\\n\\n    function createPool(address, address, address, address, uint256, uint256, uint256) external returns (address);\\n\\n    function setPoolFactoryAdmin(address, bool) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n}\\n\",\"keccak256\":\"0xc748f90e465f2b07a5ffd81a4c6ed89276857c8aacfd3978f595115944a1947b\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IStakeLocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"../token/interfaces/IStakeLockerFDT.sol\\\";\\n\\ninterface IStakeLocker is IStakeLockerFDT {\\n\\n    function stakeDate(address) external returns (uint256);\\n\\n    function stake(uint256) external;\\n\\n    function unstake(uint256) external;\\n\\n    function pull(address, uint256) external;\\n\\n    function setAllowlist(address, bool) external;\\n\\n    function openStakeLockerToPublic() external;\\n\\n    function openToPublic() external view returns (bool);\\n\\n    function allowed(address) external view returns (bool);\\n\\n    function updateLosses(uint256) external;\\n\\n    function intendToUnstake() external;\\n\\n    function unstakeCooldown(address) external view returns (uint256);\\n\\n    function lockupPeriod() external view returns (uint256);\\n\\n    function stakeAsset() external view returns (address);\\n\\n    function liquidityAsset() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function setLockupPeriod(uint256) external;\\n\\n    function cancelUnstake() external;\\n\\n    function increaseCustodyAllowance(address, uint256) external;\\n\\n    function transferByCustodian(address, address, uint256) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function isUnstakeAllowed(address) external view returns (bool);\\n\\n    function isReceiveAllowed(uint256) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xc81afa35357c4428728500b47c513658f158821d8f9225231581216e65fafdb3\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/interfaces/IStakeLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IStakeLockerFactory {\\n\\n    function owner(address) external returns (address);\\n\\n    function isLocker(address) external returns (bool);\\n\\n    function factoryType() external returns (uint8);\\n\\n    function newLocker(address, address) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0xeef7b41218f9ff876c3400f44dac5576bb665af2b92c7804c199626f73a4d01b\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/library/PoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/ILoan.sol\\\";\\nimport \\\"../interfaces/IBPool.sol\\\";\\nimport \\\"../interfaces/IHeliosGlobals.sol\\\";\\nimport \\\"../interfaces/ILiquidityLocker.sol\\\";\\nimport \\\"../interfaces/IERC20Details.sol\\\";\\nimport \\\"../interfaces/ILoanFactory.sol\\\";\\nimport \\\"../interfaces/IStakeLocker.sol\\\";\\nimport \\\"../interfaces/IDebtLockerFactory.sol\\\";\\n\\n/// @title PoolLib is a library of utility functions used by Pool.\\nlibrary PoolLib {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_UINT256 = uint256(-1);\\n    uint256 public constant WAD         = 10 ** 18;\\n    uint8   public constant DL_FACTORY  = 1;         // Factory type of DebtLockerFactory\\n\\n    event         LoanFunded(address indexed loan, address debtLocker, uint256 amountFunded);\\n    event DepositDateUpdated(address indexed liquidityProvider, uint256 depositDate);\\n\\n    /***************************************/\\n    /*** Pool Delegate Utility Functions ***/\\n    /***************************************/\\n\\n    /**\\n        @dev   Conducts sanity checks for Pools in the constructor.\\n        @param globals        Instance of a HeliosGlobals.\\n        @param liquidityAsset Asset used by Pool for liquidity to fund loans.\\n        @param stakeAsset     Asset escrowed in StakeLocker.\\n        @param stakingFee     Fee that the Stakers earn on interest, in basis points.\\n        @param delegateFee    Fee that the Pool Delegate earns on interest, in basis points.\\n    */\\n    function poolSanityChecks(\\n        IHeliosGlobals globals,\\n        address liquidityAsset,\\n        address stakeAsset,\\n        uint256 stakingFee,\\n        uint256 delegateFee\\n    ) external view {\\n        IBPool bPool = IBPool(stakeAsset);\\n\\n        require(globals.isValidLiquidityAsset(liquidityAsset), \\\"P:INVALID_LIQ_ASSET\\\");\\n        require(stakingFee.add(delegateFee) <= 10_000,         \\\"P:INVALID_FEES\\\");\\n        require(\\n            globals.isValidBalancerPool(address(stakeAsset)) &&\\n            bPool.isBound(globals.hls())                     &&\\n            bPool.isBound(liquidityAsset)                    &&\\n            bPool.isFinalized(),\\n            \\\"P:INVALID_BALANCER_POOL\\\"\\n        );\\n    }\\n\\n    /**\\n        @dev   Funds a Loan for an amount, utilizing the supplied DebtLockerFactory for DebtLockers.\\n        @dev   It emits a `LoanFunded` event.\\n        @param debtLockers     Mapping contains the DebtLocker contract address corresponding to the DebtLockerFactory and Loan.\\n        @param superFactory    Address of the PoolFactory.\\n        @param liquidityLocker Address of the LiquidityLocker contract attached with this Pool.\\n        @param loan            Address of the Loan to fund.\\n        @param dlFactory       The DebtLockerFactory to utilize.\\n        @param amt             Amount to fund the Loan.\\n    */\\n    function fundLoan(\\n        mapping(address => mapping(address => address)) storage debtLockers,\\n        address superFactory,\\n        address liquidityLocker,\\n        address loan,\\n        address dlFactory,\\n        uint256 amt\\n    ) external {\\n        IHeliosGlobals globals = IHeliosGlobals(ILoanFactory(superFactory).globals());\\n        address loanFactory   = ILoan(loan).superFactory();\\n\\n        // Auth checks.\\n        require(globals.isValidLoanFactory(loanFactory),                        \\\"P:INVALID_LF\\\");\\n        require(ILoanFactory(loanFactory).isLoan(loan),                         \\\"P:INVALID_L\\\");\\n        require(globals.isValidSubFactory(superFactory, dlFactory, DL_FACTORY), \\\"P:INVALID_DLF\\\");\\n\\n        address debtLocker = debtLockers[loan][dlFactory];\\n\\n        // Instantiate DebtLocker if it doesn't exist withing this factory\\n        if (debtLocker == address(0)) {\\n            debtLocker = IDebtLockerFactory(dlFactory).newLocker(loan);\\n            debtLockers[loan][dlFactory] = debtLocker;\\n        }\\n\\n        // Fund the Loan.\\n        ILiquidityLocker(liquidityLocker).fundLoan(loan, debtLocker, amt);\\n\\n        emit LoanFunded(loan, debtLocker, amt);\\n    }\\n\\n    /**\\n        @dev    Helper function used by Pool `claim` function, for when if a default has occurred.\\n        @param  liquidityAsset                  IERC20 of Liquidity Asset.\\n        @param  stakeLocker                     Address of StakeLocker.\\n        @param  stakeAsset                      Address of BPTs.\\n        @param  defaultSuffered                 Amount of shortfall in defaulted Loan after liquidation.\\n        @return bptsBurned                      Amount of BPTs burned to cover shortfall.\\n        @return postBurnBptBal                  Amount of BPTs returned to StakeLocker after burn.\\n        @return liquidityAssetRecoveredFromBurn Amount of Liquidity Asset recovered from burn.\\n    */\\n    function handleDefault(\\n        IERC20  liquidityAsset,\\n        address stakeLocker,\\n        address stakeAsset,\\n        uint256 defaultSuffered\\n    )\\n        external\\n        returns (\\n            uint256 bptsBurned,\\n            uint256 postBurnBptBal,\\n            uint256 liquidityAssetRecoveredFromBurn\\n        )\\n    {\\n\\n        IBPool bPool = IBPool(stakeAsset);  // stakeAsset = Balancer Pool Tokens\\n\\n        // Check amount of Liquidity Asset coverage that exists in the StakeLocker.\\n        uint256 availableSwapOut = getSwapOutValueLocker(stakeAsset, address(liquidityAsset), stakeLocker);\\n\\n        // Pull BPTs from StakeLocker.\\n        IStakeLocker(stakeLocker).pull(address(this), bPool.balanceOf(stakeLocker));\\n\\n        // To maintain accounting, account for direct transfers into Pool.\\n        uint256 preBurnLiquidityAssetBal = liquidityAsset.balanceOf(address(this));\\n        uint256 preBurnBptBal            = bPool.balanceOf(address(this));\\n\\n        // Burn enough BPTs for Liquidity Asset to cover default suffered.\\n        bPool.exitswapExternAmountOut(\\n            address(liquidityAsset),\\n            availableSwapOut >= defaultSuffered ? defaultSuffered : availableSwapOut,  // Burn BPTs up to defaultSuffered amount\\n            preBurnBptBal\\n        );\\n\\n        // Return remaining BPTs to StakeLocker.\\n        postBurnBptBal = bPool.balanceOf(address(this));\\n        bptsBurned     = preBurnBptBal.sub(postBurnBptBal);\\n        bPool.transfer(stakeLocker, postBurnBptBal);\\n        liquidityAssetRecoveredFromBurn = liquidityAsset.balanceOf(address(this)).sub(preBurnLiquidityAssetBal);\\n        IStakeLocker(stakeLocker).updateLosses(bptsBurned);  // Update StakeLockerFDT loss accounting for BPTs\\n    }\\n\\n    /**\\n        @dev    Calculates portions of claim from DebtLocker to be used by Pool `claim` function.\\n        @param  claimInfo           [0] = Total Claimed\\n                                    [1] = Interest Claimed\\n                                    [2] = Principal Claimed\\n                                    [3] = Fee Claimed\\n                                    [4] = Excess Returned Claimed\\n                                    [5] = Amount Recovered (from Liquidation)\\n                                    [6] = Default Suffered\\n        @param  delegateFee         Portion of interest (basis points) that goes to the Pool Delegate.\\n        @param  stakingFee          Portion of interest (basis points) that goes to the StakeLocker.\\n        @return poolDelegatePortion Total funds to send to the Pool Delegate.\\n        @return stakeLockerPortion  Total funds to send to the StakeLocker.\\n        @return principalClaim      Total principal claim.\\n        @return interestClaim       Total interest claim.\\n    */\\n    function calculateClaimAndPortions(\\n        uint256[7] calldata claimInfo,\\n        uint256 delegateFee,\\n        uint256 stakingFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 poolDelegatePortion,\\n            uint256 stakeLockerPortion,\\n            uint256 principalClaim,\\n            uint256 interestClaim\\n        )\\n    {\\n        poolDelegatePortion = claimInfo[1].mul(delegateFee).div(10_000).add(claimInfo[3]);  // Pool Delegate portion of interest plus fee.\\n        stakeLockerPortion  = claimInfo[1].mul(stakingFee).div(10_000);                     // StakeLocker portion of interest.\\n\\n        principalClaim = claimInfo[2].add(claimInfo[4]).add(claimInfo[5]);                                     // principal + excess + amountRecovered\\n        interestClaim  = claimInfo[1].sub(claimInfo[1].mul(delegateFee).div(10_000)).sub(stakeLockerPortion);  // leftover interest\\n    }\\n\\n    /**\\n        @dev   Checks that the deactivation is allowed.\\n        @param globals        Instance of a HeliosGlobals.\\n        @param principalOut   Amount of funds that are already funded to Loans.\\n        @param liquidityAsset Liquidity Asset of the Pool.\\n    */\\n    function validateDeactivation(IHeliosGlobals globals, uint256 principalOut, address liquidityAsset) external view {\\n        require(principalOut <= _convertFromUsd(globals, liquidityAsset, 100), \\\"P:PRINCIPAL_OUTSTANDING\\\");\\n    }\\n\\n    /********************************************/\\n    /*** Liquidity Provider Utility Functions ***/\\n    /********************************************/\\n\\n    /**\\n        @dev   Updates the effective deposit date based on how much new capital has been added.\\n               If more capital is added, the deposit date moves closer to the current timestamp.\\n        @dev   It emits a `DepositDateUpdated` event.\\n        @param amt     Total deposit amount.\\n        @param account Address of account depositing.\\n    */\\n    function updateDepositDate(mapping(address => uint256) storage depositDate, uint256 balance, uint256 amt, address account) internal {\\n        uint256 prevDate = depositDate[account];\\n\\n        // prevDate + (now - prevDate) * (amt / (balance + amt))\\n        // NOTE: prevDate = 0 implies balance = 0, and equation reduces to now\\n        uint256 newDate = (balance + amt) > 0\\n            ? prevDate.add(block.timestamp.sub(prevDate).mul(amt).div(balance + amt))\\n            : prevDate;\\n\\n        depositDate[account] = newDate;\\n        emit DepositDateUpdated(account, newDate);\\n    }\\n\\n    /**\\n        @dev Performs all necessary checks for a `transferByCustodian` call.\\n        @dev From and to must always be equal.\\n    */\\n    function transferByCustodianChecks(address from, address to, uint256 amount) external pure {\\n        require(to == from,                 \\\"P:INVALID_RECEIVER\\\");\\n        require(amount != uint256(0),       \\\"P:INVALID_AMT\\\");\\n    }\\n\\n    /**\\n        @dev Performs all necessary checks for an `increaseCustodyAllowance` call.\\n    */\\n    function increaseCustodyAllowanceChecks(address custodian, uint256 amount, uint256 newTotalAllowance, uint256 fdtBal) external pure {\\n        require(custodian != address(0),     \\\"P:INVALID_CUSTODIAN\\\");\\n        require(amount    != uint256(0),     \\\"P:INVALID_AMT\\\");\\n        require(newTotalAllowance <= fdtBal, \\\"P:INSUF_BALANCE\\\");\\n    }\\n\\n    /**********************************/\\n    /*** Governor Utility Functions ***/\\n    /**********************************/\\n\\n    /**\\n        @dev   Transfers any locked funds to the Governor. Only the Governor can call this function.\\n        @param token          Address of the token to be reclaimed.\\n        @param liquidityAsset Address of Liquidity Asset that is supported by the Pool.\\n        @param globals        Instance of a HeliosGlobals.\\n    */\\n    function reclaimERC20(address token, address liquidityAsset, IHeliosGlobals globals) external {\\n        require(msg.sender == globals.governor(), \\\"P:NOT_GOV\\\");\\n        require(token != liquidityAsset && token != address(0), \\\"P:INVALID_TOKEN\\\");\\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    /************************/\\n    /*** Getter Functions ***/\\n    /************************/\\n\\n    /**\\n        @dev Official Balancer pool bdiv() function. Does synthetic float with 10^-18 precision.\\n    */\\n    function _bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"P:DIV_ZERO\\\");\\n        uint256 c0 = a * WAD;\\n        require(a == 0 || c0 / a == WAD, \\\"P:DIV_INTERNAL\\\");  // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"P:DIV_INTERNAL\\\");  //  badd require\\n        return c1 / b;\\n    }\\n\\n    /**\\n        @dev    Calculates the value of BPT in units of Liquidity Asset.\\n        @dev    Vulnerable to flash-loan attacks where the attacker can artificially inflate the BPT price by swapping a large amount\\n                of Liquidity Asset into the Pool and swapping back after this function is called.\\n        @param  _bPool         Address of Balancer pool.\\n        @param  liquidityAsset Asset used by Pool for liquidity to fund Loans.\\n        @param  staker         Address that deposited BPTs to StakeLocker.\\n        @param  stakeLocker    Escrows BPTs deposited by Staker.\\n        @return USDC value of Staker BPTs.\\n    */\\n    function BPTVal(\\n        address _bPool,\\n        address liquidityAsset,\\n        address staker,\\n        address stakeLocker\\n    ) external view returns (uint256) {\\n        IBPool bPool = IBPool(_bPool);\\n\\n        // StakeLockerFDTs are minted 1:1 (in wei) in the StakeLocker when staking BPTs, thus representing stake amount.\\n        // These are burned when withdrawing staked BPTs, thus representing the current stake amount.\\n        uint256 amountStakedBPT       = IERC20(stakeLocker).balanceOf(staker);\\n        uint256 totalSupplyBPT        = IERC20(_bPool).totalSupply();\\n        uint256 liquidityAssetBalance = bPool.getBalance(liquidityAsset);\\n        uint256 liquidityAssetWeight  = bPool.getNormalizedWeight(liquidityAsset);\\n\\n        // liquidityAsset value = (amountStaked/totalSupply) * (liquidityAssetBalance/liquidityAssetWeight)\\n        return _bdiv(amountStakedBPT, totalSupplyBPT).mul(_bdiv(liquidityAssetBalance, liquidityAssetWeight)).div(WAD);\\n    }\\n\\n    /**\\n        @dev    Calculates Liquidity Asset swap out value of staker BPT balance escrowed in StakeLocker.\\n        @param  _bPool         Balancer pool that issues the BPTs.\\n        @param  liquidityAsset Swap out asset (e.g. USDC) to receive when burning BPTs.\\n        @param  staker         Address that deposited BPTs to StakeLocker.\\n        @param  stakeLocker    Escrows BPTs deposited by Staker.\\n        @return liquidityAsset Swap out value of staker BPTs.\\n    */\\n    function getSwapOutValue(\\n        address _bPool,\\n        address liquidityAsset,\\n        address staker,\\n        address stakeLocker\\n    ) public view returns (uint256) {\\n        return _getSwapOutValue(_bPool, liquidityAsset, IERC20(stakeLocker).balanceOf(staker));\\n    }\\n\\n    /**\\n        @dev    Calculates Liquidity Asset swap out value of entire BPT balance escrowed in StakeLocker.\\n        @param  _bPool         Balancer pool that issues the BPTs.\\n        @param  liquidityAsset Swap out asset (e.g. USDC) to receive when burning BPTs.\\n        @param  stakeLocker    Escrows BPTs deposited by Staker.\\n        @return liquidityAsset Swap out value of StakeLocker BPTs.\\n    */\\n    function getSwapOutValueLocker(\\n        address _bPool,\\n        address liquidityAsset,\\n        address stakeLocker\\n    ) public view returns (uint256) {\\n        return _getSwapOutValue(_bPool, liquidityAsset, IBPool(_bPool).balanceOf(stakeLocker));\\n    }\\n\\n    function _getSwapOutValue(\\n        address _bPool,\\n        address liquidityAsset,\\n        uint256 poolAmountIn\\n    ) internal view returns (uint256) {\\n        // Fetch Balancer pool token information\\n        IBPool bPool            = IBPool(_bPool);\\n        uint256 tokenBalanceOut = bPool.getBalance(liquidityAsset);\\n        uint256 tokenWeightOut  = bPool.getDenormalizedWeight(liquidityAsset);\\n        uint256 poolSupply      = bPool.totalSupply();\\n        uint256 totalWeight     = bPool.getTotalDenormalizedWeight();\\n        uint256 swapFee         = bPool.getSwapFee();\\n\\n        // Returns the amount of liquidityAsset that can be recovered from BPT burning\\n        uint256 tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n            tokenBalanceOut,\\n            tokenWeightOut,\\n            poolSupply,\\n            totalWeight,\\n            poolAmountIn,\\n            swapFee\\n        );\\n\\n        // Max amount that can be swapped based on amount of liquidityAsset in the Balancer Pool\\n        uint256 maxSwapOut = tokenBalanceOut.mul(bPool.MAX_OUT_RATIO()).div(WAD);\\n\\n        return tokenAmountOut <= maxSwapOut ? tokenAmountOut : maxSwapOut;\\n    }\\n\\n    /**\\n        @dev    Calculates BPTs required if burning BPTs for liquidityAsset, given supplied tokenAmountOutRequired.\\n        @dev    Vulnerable to flash-loan attacks where the attacker can artificially inflate the BPT price by swapping a large amount\\n                of liquidityAsset into the pool and swapping back after this function is called.\\n        @param  _bPool                       Balancer pool that issues the BPTs.\\n        @param  liquidityAsset               Swap out asset (e.g. USDC) to receive when burning BPTs.\\n        @param  staker                       Address that deposited BPTs to stakeLocker.\\n        @param  stakeLocker                  Escrows BPTs deposited by staker.\\n        @param  liquidityAssetAmountRequired Amount of liquidityAsset required to recover.\\n        @return poolAmountInRequired         poolAmountIn required.\\n        @return stakerBalance                poolAmountIn currently staked.\\n    */\\n    function getPoolSharesRequired(\\n        address _bPool,\\n        address liquidityAsset,\\n        address staker,\\n        address stakeLocker,\\n        uint256 liquidityAssetAmountRequired\\n    ) public view returns (uint256 poolAmountInRequired, uint256 stakerBalance) {\\n        // Fetch Balancer pool token information.\\n        IBPool bPool = IBPool(_bPool);\\n\\n        uint256 tokenBalanceOut = bPool.getBalance(liquidityAsset);\\n        uint256 tokenWeightOut  = bPool.getDenormalizedWeight(liquidityAsset);\\n        uint256 poolSupply      = bPool.totalSupply();\\n        uint256 totalWeight     = bPool.getTotalDenormalizedWeight();\\n        uint256 swapFee         = bPool.getSwapFee();\\n\\n        // Fetch amount of BPTs required to burn to receive Liquidity Asset amount required.\\n        poolAmountInRequired = bPool.calcPoolInGivenSingleOut(\\n            tokenBalanceOut,\\n            tokenWeightOut,\\n            poolSupply,\\n            totalWeight,\\n            liquidityAssetAmountRequired,\\n            swapFee\\n        );\\n\\n        // Fetch amount staked in StakeLocker by Staker.\\n        stakerBalance = IERC20(stakeLocker).balanceOf(staker);\\n    }\\n\\n    /**\\n        @dev    Returns information on the stake requirements.\\n        @param  globals                    Instance of a HeliosGlobals.\\n        @param  balancerPool               Address of Balancer pool.\\n        @param  liquidityAsset             Address of Liquidity Asset, to be returned from swap out.\\n        @param  poolDelegate               Address of Pool Delegate.\\n        @param  stakeLocker                Address of StakeLocker.\\n        @return swapOutAmountRequired      Min amount of Liquidity Asset coverage from staking required (in Liquidity Asset units).\\n        @return currentPoolDelegateCover   Present amount of Liquidity Asset coverage from Pool Delegate stake (in Liquidity Asset units).\\n        @return enoughStakeForFinalization If enough stake is present from Pool Delegate for Pool finalization.\\n        @return poolAmountInRequired       BPTs required for minimum Liquidity Asset coverage.\\n        @return poolAmountPresent          Current staked BPTs.\\n    */\\n    function getInitialStakeRequirements(IHeliosGlobals globals, address balancerPool, address liquidityAsset, address poolDelegate, address stakeLocker) external view returns (\\n        uint256 swapOutAmountRequired,\\n        uint256 currentPoolDelegateCover,\\n        bool    enoughStakeForFinalization,\\n        uint256 poolAmountInRequired,\\n        uint256 poolAmountPresent\\n    ) {\\n        swapOutAmountRequired = _convertFromUsd(globals, liquidityAsset, globals.swapOutRequired());\\n        (\\n            poolAmountInRequired,\\n            poolAmountPresent\\n        ) = getPoolSharesRequired(balancerPool, liquidityAsset, poolDelegate, stakeLocker, swapOutAmountRequired);\\n\\n        currentPoolDelegateCover   = getSwapOutValue(balancerPool, liquidityAsset, poolDelegate, stakeLocker);\\n        enoughStakeForFinalization = poolAmountPresent >= poolAmountInRequired;\\n    }\\n\\n    /************************/\\n    /*** Helper Functions ***/\\n    /************************/\\n\\n    /**\\n        @dev   Converts from WAD precision to Liquidity Asset precision.\\n        @param amt                    Amount to convert.\\n        @param liquidityAssetDecimals Liquidity Asset decimal.\\n    */\\n    function fromWad(uint256 amt, uint256 liquidityAssetDecimals) external pure returns (uint256) {\\n        return amt.mul(10 ** liquidityAssetDecimals).div(WAD);\\n    }\\n\\n    /**\\n        @dev    Returns Liquidity Asset in Liquidity Asset units when given integer USD (E.g., $100 = 100).\\n        @param  globals        Instance of a HeliosGlobals.\\n        @param  liquidityAsset Liquidity Asset of the pool.\\n        @param  usdAmount      USD amount to convert, in integer units (e.g., $100 = 100).\\n        @return usdAmount worth of Liquidity Asset, in Liquidity Asset units.\\n    */\\n    function _convertFromUsd(IHeliosGlobals globals, address liquidityAsset, uint256 usdAmount) internal view returns (uint256) {\\n        return usdAmount\\n            .mul(10 ** 8)                                         // Cancel out 10 ** 8 decimals from oracle.\\n            .mul(10 ** IERC20Details(liquidityAsset).decimals())  // Convert to Liquidity Asset precision.\\n            .div(globals.getLatestPrice(liquidityAsset));         // Convert to Liquidity Asset value.\\n    }\\n}\\n\",\"keccak256\":\"0xb65be27adb49e83ccae200a0c3f4f247bd7182ea8121e130953fe86a68b93c39\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/math/SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nlibrary SafeMathInt {\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"SMI:NEG\\\");\\n        return uint256(a);\\n    }\\n}\\n\",\"keccak256\":\"0xffdc5ad19615e92a3a57d6a3ad6093a43b35b6f9e85bb05a96cd8a7c3d9b2e0e\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/math/SafeMathUint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256 b) {\\n        b = int256(a);\\n        require(b >= 0, \\\"SMU:OOB\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe515df7c989a5d8373e3e9ecb4b6b7167db048c2528247afe1c314528a46c4c1\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/BasicFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"./interfaces/IBaseFDT.sol\\\";\\nimport \\\"../math/SafeMathUint.sol\\\";\\nimport \\\"../math/SafeMathInt.sol\\\";\\n\\n/// @title BasicFDT implements base level FDT functionality for accounting for revenues.\\nabstract contract BasicFDT is IBaseFDT, ERC20 {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for  int256;\\n    using SafeMathInt    for  int256;\\n\\n    uint256 internal constant pointsMultiplier = 2 ** 128;\\n    uint256 internal pointsPerShare;\\n\\n    mapping(address => int256)  internal pointsCorrection;\\n    mapping(address => uint256) internal withdrawnFunds;\\n\\n    event   PointsPerShareUpdated(uint256 pointsPerShare);\\n    event PointsCorrectionUpdated(address indexed account, int256 pointsCorrection);\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) public { }\\n\\n    /**\\n        @dev Distributes funds to token holders.\\n        @dev It reverts if the total supply of tokens is 0.\\n        @dev It emits a `FundsDistributed` event if the amount of received funds is greater than 0.\\n        @dev It emits a `PointsPerShareUpdated` event if the amount of received funds is greater than 0.\\n             About undistributed funds:\\n                In each distribution, there is a small amount of funds which do not get distributed,\\n                   which is `(value  pointsMultiplier) % totalSupply()`.\\n                With a well-chosen `pointsMultiplier`, the amount funds that are not getting distributed\\n                   in a distribution can be less than 1 (base unit).\\n                We can actually keep track of the undistributed funds in a distribution\\n                   and try to distribute it in the next distribution.\\n    */\\n    function _distributeFunds(uint256 value) internal {\\n        require(totalSupply() > 0, \\\"FDT:ZERO_SUPPLY\\\");\\n\\n        if (value == 0) return;\\n\\n        pointsPerShare = pointsPerShare.add(value.mul(pointsMultiplier) / totalSupply());\\n        emit FundsDistributed(msg.sender, value);\\n        emit PointsPerShareUpdated(pointsPerShare);\\n    }\\n\\n    /**\\n        @dev    Prepares the withdrawal of funds.\\n        @dev    It emits a `FundsWithdrawn` event if the amount of withdrawn funds is greater than 0.\\n        @return withdrawableDividend The amount of dividend funds that can be withdrawn.\\n    */\\n    function _prepareWithdraw() internal returns (uint256 withdrawableDividend) {\\n        withdrawableDividend       = withdrawableFundsOf(msg.sender);\\n        uint256 _withdrawnFunds    = withdrawnFunds[msg.sender].add(withdrawableDividend);\\n        withdrawnFunds[msg.sender] = _withdrawnFunds;\\n\\n        emit FundsWithdrawn(msg.sender, withdrawableDividend, _withdrawnFunds);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of funds that an account can withdraw.\\n        @param  _owner The address of a token holder.\\n        @return The amount funds that `_owner` can withdraw.\\n    */\\n    function withdrawableFundsOf(address _owner) public view override returns (uint256) {\\n        return accumulativeFundsOf(_owner).sub(withdrawnFunds[_owner]);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of funds that an account has withdrawn.\\n        @param  _owner The address of a token holder.\\n        @return The amount of funds that `_owner` has withdrawn.\\n    */\\n    function withdrawnFundsOf(address _owner) external view returns (uint256) {\\n        return withdrawnFunds[_owner];\\n    }\\n\\n    /**\\n        @dev    Returns the amount of funds that an account has earned in total.\\n        @dev    accumulativeFundsOf(_owner) = withdrawableFundsOf(_owner) + withdrawnFundsOf(_owner)\\n                                         = (pointsPerShare * balanceOf(_owner) + pointsCorrection[_owner]) / pointsMultiplier\\n        @param  _owner The address of a token holder.\\n        @return The amount of funds that `_owner` has earned in total.\\n    */\\n    function accumulativeFundsOf(address _owner) public view returns (uint256) {\\n        return\\n            pointsPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(pointsCorrection[_owner])\\n                .toUint256Safe() / pointsMultiplier;\\n    }\\n\\n    /**\\n        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\\n        @dev   It emits two `PointsCorrectionUpdated` events, one for the sender and one for the receiver.\\n        @param from  The address to transfer from.\\n        @param to    The address to transfer to.\\n        @param value The amount to be transferred.\\n    */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        super._transfer(from, to, value);\\n\\n        int256 _magCorrection       = pointsPerShare.mul(value).toInt256Safe();\\n        int256 pointsCorrectionFrom = pointsCorrection[from].add(_magCorrection);\\n        pointsCorrection[from]      = pointsCorrectionFrom;\\n        int256 pointsCorrectionTo   = pointsCorrection[to].sub(_magCorrection);\\n        pointsCorrection[to]        = pointsCorrectionTo;\\n\\n        emit PointsCorrectionUpdated(from, pointsCorrectionFrom);\\n        emit PointsCorrectionUpdated(to,   pointsCorrectionTo);\\n    }\\n\\n    /**\\n        @dev   Mints tokens to an account. Updates pointsCorrection to keep funds unchanged.\\n        @param account The account that will receive the created tokens.\\n        @param value   The amount that will be created.\\n    */\\n    function _mint(address account, uint256 value) internal virtual override {\\n        super._mint(account, value);\\n\\n        int256 _pointsCorrection = pointsCorrection[account].sub(\\n            (pointsPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        pointsCorrection[account] = _pointsCorrection;\\n\\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\\n    }\\n\\n    /**\\n        @dev   Burns an amount of the token of a given account. Updates pointsCorrection to keep funds unchanged.\\n        @dev   It emits a `PointsCorrectionUpdated` event.\\n        @param account The account whose tokens will be burnt.\\n        @param value   The amount that will be burnt.\\n    */\\n    function _burn(address account, uint256 value) internal virtual override {\\n        super._burn(account, value);\\n\\n        int256 _pointsCorrection = pointsCorrection[account].add(\\n            (pointsPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        pointsCorrection[account] = _pointsCorrection;\\n\\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\\n    }\\n\\n    /**\\n        @dev Withdraws all available funds for a token holder.\\n    */\\n    function withdrawFunds() public virtual override {}\\n\\n    /**\\n        @dev    Updates the current `fundsToken` balance and returns the difference of the new and previous `fundsToken` balance.\\n        @return A int256 representing the difference of the new and previous `fundsToken` balance.\\n    */\\n    function _updateFundsTokenBalance() internal virtual returns (int256) {}\\n\\n    /**\\n        @dev Registers a payment of funds in tokens. May be called directly after a deposit is made.\\n        @dev Calls _updateFundsTokenBalance(), whereby the contract computes the delta of the new and previous\\n             `fundsToken` balance and increments the total received funds (cumulative), by delta, by calling _distributeFunds().\\n    */\\n    function updateFundsReceived() public virtual {\\n        int256 newFunds = _updateFundsTokenBalance();\\n\\n        if (newFunds <= 0) return;\\n\\n        _distributeFunds(newFunds.toUint256Safe());\\n    }\\n}\\n\",\"keccak256\":\"0xec1d3f646382951b73ca265a8b136900ddf8886636f118ac971bb971ef2e36e3\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/ExtendedFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./BasicFDT.sol\\\";\\n\\n/// @title ExtendedFDT implements FDT functionality for accounting for losses.\\nabstract contract ExtendedFDT is BasicFDT {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for  int256;\\n    using SafeMathInt    for  int256;\\n\\n    uint256 internal lossesPerShare;\\n\\n    mapping(address => int256)  internal lossesCorrection;\\n    mapping(address => uint256) internal recognizedLosses;\\n\\n    event   LossesPerShareUpdated(uint256 lossesPerShare);\\n    event LossesCorrectionUpdated(address indexed account, int256 lossesCorrection);\\n\\n    /**\\n        @dev   This event emits when new losses are distributed.\\n        @param by                The address of the account that has distributed losses.\\n        @param lossesDistributed The amount of losses received for distribution.\\n    */\\n    event LossesDistributed(address indexed by, uint256 lossesDistributed);\\n\\n    /**\\n        @dev   This event emits when distributed losses are recognized by a token holder.\\n        @param by                    The address of the receiver of losses.\\n        @param lossesRecognized      The amount of losses that were recognized.\\n        @param totalLossesRecognized The total amount of losses that are recognized.\\n    */\\n    event LossesRecognized(address indexed by, uint256 lossesRecognized, uint256 totalLossesRecognized);\\n\\n    constructor(string memory name, string memory symbol) BasicFDT(name, symbol) public { }\\n\\n    /**\\n        @dev Distributes losses to token holders.\\n        @dev It reverts if the total supply of tokens is 0.\\n        @dev It emits a `LossesDistributed` event if the amount of received losses is greater than 0.\\n        @dev It emits a `LossesPerShareUpdated` event if the amount of received losses is greater than 0.\\n             About undistributed losses:\\n                In each distribution, there is a small amount of losses which do not get distributed,\\n                which is `(value * pointsMultiplier) % totalSupply()`.\\n             With a well-chosen `pointsMultiplier`, the amount losses that are not getting distributed\\n                in a distribution can be less than 1 (base unit).\\n             We can actually keep track of the undistributed losses in a distribution\\n                and try to distribute it in the next distribution.\\n    */\\n    function _distributeLosses(uint256 value) internal {\\n        require(totalSupply() > 0, \\\"FDT:ZERO_SUPPLY\\\");\\n\\n        if (value == 0) return;\\n\\n        uint256 _lossesPerShare = lossesPerShare.add(value.mul(pointsMultiplier) / totalSupply());\\n        lossesPerShare          = _lossesPerShare;\\n\\n        emit LossesDistributed(msg.sender, value);\\n        emit LossesPerShareUpdated(_lossesPerShare);\\n    }\\n\\n    /**\\n        @dev    Prepares losses for a withdrawal.\\n        @dev    It emits a `LossesWithdrawn` event if the amount of withdrawn losses is greater than 0.\\n        @return recognizableDividend The amount of dividend losses that can be recognized.\\n    */\\n    function _prepareLossesWithdraw() internal returns (uint256 recognizableDividend) {\\n        recognizableDividend = recognizableLossesOf(msg.sender);\\n\\n        uint256 _recognizedLosses    = recognizedLosses[msg.sender].add(recognizableDividend);\\n        recognizedLosses[msg.sender] = _recognizedLosses;\\n\\n        emit LossesRecognized(msg.sender, recognizableDividend, _recognizedLosses);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of losses that an address can withdraw.\\n        @param  _owner The address of a token holder.\\n        @return The amount of losses that `_owner` can withdraw.\\n    */\\n    function recognizableLossesOf(address _owner) public view returns (uint256) {\\n        return accumulativeLossesOf(_owner).sub(recognizedLosses[_owner]);\\n    }\\n\\n    /**\\n        @dev    Returns the amount of losses that an address has recognized.\\n        @param  _owner The address of a token holder\\n        @return The amount of losses that `_owner` has recognized\\n    */\\n    function recognizedLossesOf(address _owner) external view returns (uint256) {\\n        return recognizedLosses[_owner];\\n    }\\n\\n    /**\\n        @dev    Returns the amount of losses that an address has earned in total.\\n        @dev    accumulativeLossesOf(_owner) = recognizableLossesOf(_owner) + recognizedLossesOf(_owner)\\n                = (lossesPerShare * balanceOf(_owner) + lossesCorrection[_owner]) / pointsMultiplier\\n        @param  _owner The address of a token holder\\n        @return The amount of losses that `_owner` has earned in total\\n    */\\n    function accumulativeLossesOf(address _owner) public view returns (uint256) {\\n        return\\n            lossesPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(lossesCorrection[_owner])\\n                .toUint256Safe() / pointsMultiplier;\\n    }\\n\\n    /**\\n        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\\n        @dev         It emits two `LossesCorrectionUpdated` events, one for the sender and one for the receiver.\\n        @param from  The address to transfer from.\\n        @param to    The address to transfer to.\\n        @param value The amount to be transferred.\\n    */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        super._transfer(from, to, value);\\n\\n        int256 _lossesCorrection    = lossesPerShare.mul(value).toInt256Safe();\\n        int256 lossesCorrectionFrom = lossesCorrection[from].add(_lossesCorrection);\\n        lossesCorrection[from]      = lossesCorrectionFrom;\\n        int256 lossesCorrectionTo   = lossesCorrection[to].sub(_lossesCorrection);\\n        lossesCorrection[to]        = lossesCorrectionTo;\\n\\n        emit LossesCorrectionUpdated(from, lossesCorrectionFrom);\\n        emit LossesCorrectionUpdated(to,   lossesCorrectionTo);\\n    }\\n\\n    /**\\n        @dev   Mints tokens to an account. Updates lossesCorrection to keep losses unchanged.\\n        @dev   It emits a `LossesCorrectionUpdated` event.\\n        @param account The account that will receive the created tokens.\\n        @param value   The amount that will be created.\\n    */\\n    function _mint(address account, uint256 value) internal virtual override {\\n        super._mint(account, value);\\n\\n        int256 _lossesCorrection = lossesCorrection[account].sub(\\n            (lossesPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        lossesCorrection[account] = _lossesCorrection;\\n\\n        emit LossesCorrectionUpdated(account, _lossesCorrection);\\n    }\\n\\n    /**\\n        @dev   Burns an amount of the token of a given account. Updates lossesCorrection to keep losses unchanged.\\n        @dev   It emits a `LossesCorrectionUpdated` event.\\n        @param account The account from which tokens will be burnt.\\n        @param value   The amount that will be burnt.\\n    */\\n    function _burn(address account, uint256 value) internal virtual override {\\n        super._burn(account, value);\\n\\n        int256 _lossesCorrection = lossesCorrection[account].add(\\n            (lossesPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        lossesCorrection[account] = _lossesCorrection;\\n\\n        emit LossesCorrectionUpdated(account, _lossesCorrection);\\n    }\\n\\n    /**\\n        @dev Registers a loss. May be called directly after a shortfall after BPT burning occurs.\\n        @dev Calls _updateLossesTokenBalance(), whereby the contract computes the delta of the new and previous\\n             losses balance and increments the total losses (cumulative), by delta, by calling _distributeLosses().\\n    */\\n    function updateLossesReceived() public virtual {\\n        int256 newLosses = _updateLossesBalance();\\n\\n        if (newLosses <= 0) return;\\n\\n        _distributeLosses(newLosses.toUint256Safe());\\n    }\\n\\n    /**\\n        @dev Recognizes all recognizable losses for an account using loss accounting.\\n    */\\n    function _recognizeLosses() internal virtual returns (uint256 losses) { }\\n\\n    /**\\n        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\\n        @return A int256 representing the difference of the new and previous losses balance.\\n    */\\n    function _updateLossesBalance() internal virtual returns (int256) { }\\n}\\n\",\"keccak256\":\"0x937f4d66a0f807c02bdc2b246cb807db8c9e5f539cf999bec675e787dd1be06d\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/PoolFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./ExtendedFDT.sol\\\";\\n\\n/// @title PoolFDT inherits ExtendedFDT and accounts for gains/losses for Liquidity Providers.\\nabstract contract PoolFDT is ExtendedFDT {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for  int256;\\n    using SafeMathInt    for  int256;\\n\\n    uint256 public interestSum;  // Sum of all withdrawable interest.\\n    uint256 public poolLosses;   // Sum of all unrecognized losses.\\n\\n    uint256 public interestBalance;  // The amount of earned interest present and accounted for in this contract.\\n    uint256 public lossesBalance;    // The amount of losses present and accounted for in this contract.\\n\\n    constructor(string memory name, string memory symbol) ExtendedFDT(name, symbol) public { }\\n\\n    /**\\n        @dev Realizes losses incurred to LPs.\\n    */\\n    function _recognizeLosses() internal override returns (uint256 losses) {\\n        losses = _prepareLossesWithdraw();\\n\\n        poolLosses = poolLosses.sub(losses);\\n\\n        _updateLossesBalance();\\n    }\\n\\n    /**\\n        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\\n        @return A int256 representing the difference of the new and previous losses balance.\\n    */\\n    function _updateLossesBalance() internal override returns (int256) {\\n        uint256 _prevLossesTokenBalance = lossesBalance;\\n\\n        lossesBalance = poolLosses;\\n\\n        return int256(lossesBalance).sub(int256(_prevLossesTokenBalance));\\n    }\\n\\n    /**\\n        @dev    Updates the current interest balance and returns the difference of the new and previous interest balance.\\n        @return A int256 representing the difference of the new and previous interest balance.\\n    */\\n    function _updateFundsTokenBalance() internal override returns (int256) {\\n        uint256 _prevFundsTokenBalance = interestBalance;\\n\\n        interestBalance = interestSum;\\n\\n        return int256(interestBalance).sub(int256(_prevFundsTokenBalance));\\n    }\\n}\\n\",\"keccak256\":\"0x1b94524b077e1f214f7d1a0457fbd2cd16524dd1f3ff7982c993c29e097aab4d\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IBaseFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IBaseFDT {\\n\\n    /**\\n        @dev    Returns the total amount of funds a given address is able to withdraw currently.\\n        @param  owner Address of FDT holder.\\n        @return A uint256 representing the available funds for a given account.\\n    */\\n    function withdrawableFundsOf(address owner) external view returns (uint256);\\n\\n    /**\\n        @dev Withdraws all available funds for a FDT holder.\\n    */\\n    function withdrawFunds() external;\\n\\n    /**\\n        @dev   This event emits when new funds are distributed.\\n        @param by               The address of the sender that distributed funds.\\n        @param fundsDistributed The amount of funds received for distribution.\\n    */\\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\\n\\n    /**\\n        @dev   This event emits when distributed funds are withdrawn by a token holder.\\n        @param by             The address of the receiver of funds.\\n        @param fundsWithdrawn The amount of funds that were withdrawn.\\n        @param totalWithdrawn The total amount of funds that were withdrawn.\\n    */\\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\\n\\n}\\n\",\"keccak256\":\"0x193e2bfefd17da5ca2a34a9d21ce231419bf848561704221a7e96ee6e648ec37\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IBasicFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IBaseFDT.sol\\\";\\n\\ninterface IBasicFDT is IBaseFDT, IERC20 {\\n\\n    event PointsPerShareUpdated(uint256);\\n\\n    event PointsCorrectionUpdated(address indexed, int256);\\n\\n    function withdrawnFundsOf(address) external view returns (uint256);\\n\\n    function accumulativeFundsOf(address) external view returns (uint256);\\n\\n    function updateFundsReceived() external;\\n\\n}\\n\",\"keccak256\":\"0x86c22f508230af0cfbc6b3c5c258e3bd783504f5649279c9534735d042b0d8fa\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IExtendedFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./IBasicFDT.sol\\\";\\n\\ninterface IExtendedFDT is IBasicFDT {\\n\\n    event LossesPerShareUpdated(uint256);\\n\\n    event LossesCorrectionUpdated(address indexed, int256);\\n\\n    event LossesDistributed(address indexed, uint256);\\n\\n    event LossesRecognized(address indexed, uint256, uint256);\\n\\n    function lossesPerShare() external view returns (uint256);\\n\\n    function recognizableLossesOf(address) external view returns (uint256);\\n\\n    function recognizedLossesOf(address) external view returns (uint256);\\n\\n    function accumulativeLossesOf(address) external view returns (uint256);\\n\\n    function updateLossesReceived() external;\\n\\n}\\n\",\"keccak256\":\"0x8d94a017610790ffab1e8ecceb20cf54ae6583b889e2190d64dafd25a921d5bd\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/ILoanFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./IBasicFDT.sol\\\";\\n\\ninterface ILoanFDT is IBasicFDT {\\n\\n    function fundsToken() external view returns (address);\\n\\n    function fundsTokenBalance() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xbb553cbcc946e90244bda8b216b68a76467dbeb486daf04c7c3c13e39411f96c\",\"license\":\"AGPL-3.0-or-later\"},\"packages/protocol/contracts/token/interfaces/IStakeLockerFDT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"./IExtendedFDT.sol\\\";\\n\\ninterface IStakeLockerFDT is IExtendedFDT {\\n\\n    function fundsToken() external view returns (address);\\n\\n    function fundsTokenBalance() external view returns (uint256);\\n\\n    function bptLosses() external view returns (uint256);\\n\\n    function lossesBalance() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x4ec679b2ee5d6558232b451f7ad9a93e2cefd3701a0d8d997e4a96a795734370\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615fcc380380615fcc8339818101604052602081101561003357600080fd5b50516000805460ff19169055600280546001600160a01b039092166001600160a01b0319909216919091179055615f5d8061006f6000396000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c8063945164e71162000099578063c3124525116200006f578063c3124525146200023a578063c5ba73ed1462000244578063cc2e0a26146200024e578063f3f616c0146200027757620000e2565b8063945164e714620001de5780639f71f14a14620001fa578063ac4afa38146200021a57620000e2565b8063312b898214620000e75780633f4ba83a14620001585780635b16ebb714620001645780635c975abb14620001a15780636050abb214620001ab5780638456cb5914620001d4575b600080fd5b6200013c600480360360e0811015620000ff57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a08101359060c00135620002a8565b604080516001600160a01b039092168252519081900360200190f35b6200016262000a29565b005b6200018d600480360360208110156200017c57600080fd5b50356001600160a01b031662000a3f565b604080519115158252519081900360200190f35b6200018d62000a54565b6200018d60048036036020811015620001c357600080fd5b50356001600160a01b031662000a5d565b6200016262000a72565b620001e862000a86565b60408051918252519081900360200190f35b6200020462000a8c565b6040805160ff9092168252519081900360200190f35b6200013c600480360360208110156200023257600080fd5b503562000a91565b6200013c62000aac565b6200020462000abb565b62000162600480360360208110156200026657600080fd5b50356001600160a01b031662000ac0565b62000162600480360360408110156200028f57600080fd5b506001600160a01b038135169060200135151562000aec565b6000620002b462000a54565b15620002fa576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6200030462000b56565b600254604080516313d459fb60e01b81523060048201526001600160a01b038881166024830152600360448301529151919092169182916313d459fb91606480820192602092909190829003018186803b1580156200036257600080fd5b505afa15801562000377573d6000803e3d6000fd5b505050506040513d60208110156200038e57600080fd5b5051620003d3576040805162461bcd60e51b815260206004820152600e60248201526d28231d24a72b20a624a22fa6262360911b604482015290519081900360640190fd5b604080516313d459fb60e01b8152306004828101919091526001600160a01b038a8116602484015260448301919091529151918316916313d459fb91606480820192602092909190829003018186803b1580156200043057600080fd5b505afa15801562000445573d6000803e3d6000fd5b505050506040513d60208110156200045c57600080fd5b5051620004a1576040805162461bcd60e51b815260206004820152600e60248201526d28231d24a72b20a624a22fa9a62360911b604482015290519081900360640190fd5b60408051631b971aa360e11b815233600482015290516001600160a01b0383169163372e3546916024808301926020929190829003018186803b158015620004e857600080fd5b505afa158015620004fd573d6000803e3d6000fd5b505050506040513d60208110156200051457600080fd5b50516200055a576040805162461bcd60e51b815260206004820152600f60248201526e50463a4e4f545f44454c454741544560881b604482015290519081900360640190fd5b506060604051806040016040528060118152602001702432b634b7b9902837b7b6102a37b5b2b760791b81525090506060604051806040016040528060068152602001650484c532d4c560d41b81525090506000338b8b8b8b8b8b8b8a8a604051620005c69062000efb565b6001600160a01b03808c1682528a81166020808401919091528a821660408401528982166060840152908816608083015260a0820187905260c0820186905260e0820185905261014061010083018181528551918401919091528451909161012084019161016085019187019080838360005b838110156200065357818101518382015260200162000639565b50505050905090810190601f168015620006815780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620006b65781810151838201526020016200069c565b50505050905090810190601f168015620006e45780820380516001836020036101000a031916815260200191505b509c50505050505050505050505050604051809103906000f08015801562000710573d6000803e3d6000fd5b5090508093508360036000600154815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160046000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815460010191905081905550336001600160a01b0316846001600160a01b03167fca6c57d58de1ff84c629ea4a44b3a2f19a6c83cc1dc3cd7d1ede2067a6a1016d8d8d856001600160a01b0316639759164a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200080f57600080fd5b505afa15801562000824573d6000803e3d6000fd5b505050506040513d60208110156200083b57600080fd5b5051604080516233b1cf60e41b815290516001600160a01b0389169163033b1cf0916004808301926020929190829003018186803b1580156200087d57600080fd5b505afa15801562000892573d6000803e3d6000fd5b505050506040513d6020811015620008a957600080fd5b81019080805190602001909291905050508d8d8d8c8c604051808a6001600160a01b03166001600160a01b03168152602001896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b031681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015620009745781810151838201526020016200095a565b50505050905090810190601f168015620009a25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620009d7578181015183820152602001620009bd565b50505050905090810190601f16801562000a055780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a3505050979650505050505050565b62000a3362000c18565b62000a3d62000d03565b565b60046020526000908152604090205460ff1681565b60005460ff1690565b60056020526000908152604090205460ff1681565b62000a7c62000c18565b62000a3d62000da8565b60015481565b600481565b6003602052600090815260409020546001600160a01b031681565b6002546001600160a01b031681565b600381565b62000aca62000e30565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b62000af662000e30565b6001600160a01b038216600081815260056020908152604091829020805460ff1916851515908117909155825190815291517fc0d8ae32722eafe08b35b2bb46dec31dcbbd5bb18069f66995df3c9f47f4d64f9281900390910190a25050565b600260009054906101000a90046001600160a01b03166001600160a01b031663425fad586040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ba557600080fd5b505afa15801562000bba573d6000803e3d6000fd5b505050506040513d602081101562000bd157600080fd5b50511562000a3d576040805162461bcd60e51b815260206004820152600f60248201526e14118e941493d513d7d4105554d151608a1b604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c6757600080fd5b505afa15801562000c7c573d6000803e3d6000fd5b505050506040513d602081101562000c9357600080fd5b50516001600160a01b031633148062000cbb57503360009081526005602052604090205460ff165b62000a3d576040805162461bcd60e51b815260206004820152601360248201527228231d2727aa2fa3a7ab2fa7a92fa0a226a4a760691b604482015290519081900360640190fd5b62000d0d62000a54565b62000d56576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62000d8b62000ef7565b604080516001600160a01b039092168252519081900360200190a1565b62000db262000a54565b1562000df8576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000d8b62000ef7565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e7f57600080fd5b505afa15801562000e94573d6000803e3d6000fd5b505050506040513d602081101562000eab57600080fd5b50516001600160a01b0316331462000a3d576040805162461bcd60e51b815260206004820152600a60248201526928231d2727aa2fa3a7ab60b11b604482015290519081900360640190fd5b3390565b61501e8062000f0a8339019056fe6101806040523480156200001257600080fd5b506040516200501e3803806200501e83398181016040526101408110156200003957600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0180519751999b989a969995989497939692959194919392820192846401000000008211156200009257600080fd5b908301906020820185811115620000a857600080fd5b8251640100000000811182820188101715620000c357600080fd5b82525081516020918201929091019080838360005b83811015620000f2578181015183820152602001620000d8565b50505050905090810190601f168015620001205780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200014457600080fd5b9083019060208201858111156200015a57600080fd5b82516401000000008111828201881017156200017557600080fd5b82525081516020918201929091019080838360005b83811015620001a45781810151838201526020016200018a565b50505050905090810190601f168015620001d25780820380516001836020036101000a031916815260200191505b5060405250505081818181818181818160039080519060200190620001f99291906200056e565b5080516200020f9060049060208401906200056e565b50506005805460ff19166012179055507364b0dD6Fef23172abfE34fae0B954FE66F270274955063f30752bd9450620002589350339250506001600160e01b03620004fe169050565b604080516001600160e01b031960e085901b1681526001600160a01b039283166004820152828e166024820152918c16604483015260648201899052608482018890525160a4808301926000929190829003018186803b158015620002bc57600080fd5b505af4158015620002d1573d6000803e3d6000fd5b50505050886001600160a01b03166080816001600160a01b031660601b81525050886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032c57600080fd5b505afa15801562000341573d6000803e3d6000fd5b505050506040513d60208110156200035857600080fd5b505160ff1661014052606088811b6001600160601b031990811660e0528b821b1660a052601086905561016085905233901b610120526012839055604080516342ef033f60e11b81526001600160a01b03808b1660048301528b811660248301529151918916916385de067e916044808201926020929091908290030181600087803b158015620003e857600080fd5b505af1158015620003fd573d6000803e3d6000fd5b505050506040513d60208110156200041457600080fd5b505160601b6001600160601b0319166101005260408051630cf5bc1d60e11b81526001600160a01b038b811660048301529151918816916319eb783a916024808201926020929091908290030181600087803b1580156200047457600080fd5b505af115801562000489573d6000803e3d6000fd5b505050506040513d6020811015620004a057600080fd5b505160601b6001600160601b03191660c05262ed4e00601355604080516000815290517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a916020908290030190a15050505050505050505062000613565b6000816001600160a01b031663c31245256040518163ffffffff1660e01b815260040160206040518083038186803b1580156200053a57600080fd5b505afa1580156200054f573d6000803e3d6000fd5b505050506040513d60208110156200056657600080fd5b505192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005b157805160ff1916838001178555620005e1565b82800160010185558215620005e1579182015b82811115620005e1578251825591602001919060010190620005c4565b50620005ef929150620005f3565b5090565b6200061091905b80821115620005ef5760008155600101620005fa565b90565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61014051610160516148d862000746600039806111395280611c6952806126445250806133b2525080610d5f5280610da85280610f5f52806119ae5280611ed152806123b15280612c755280613020525080610c875280610e6b528061127752806112f2528061139f52806114195280612e45525080610df3528061225f5280612e6d525080610f8752806112a1528061251052806127285280612c0c5280612f7552806132ac5280613820525080610e43528061124d5280611b4c5280612d4b5280613b43525080610e1b5280611027528061137552806113ea5280611efa528061238d52806127055280612be25280612dd95280612e1d5280612f5352806137f152506148d86000f3fe608060405234801561001057600080fd5b50600436106103fb5760003560e01c806370a0823111610215578063a9059cbb11610125578063c771c390116100b8578063d82745c811610087578063d82745c814610bfa578063dd62ed3e14610c20578063ee947a7c14610c4e578063eff9884314610c56578063fec984e314610c5e576103fb565b8063c771c39014610b79578063c965b54814610b96578063cc0fef0214610bc4578063d7bd3c9114610bcc576103fb565b8063b69410de116100f4578063b69410de14610acf578063b6b55f2514610ad7578063c374682514610af4578063c59e395914610b53576103fb565b8063a9059cbb14610a4f578063ac64165514610a7b578063aed4966a14610a83578063af6d557114610aa9576103fb565b806384b76824116101a85780639759164a116101775780639759164a146109ec5780639f3c7325146109f4578063a33142f7146109fc578063a43baa3d14610a04578063a457c2d714610a23576103fb565b806384b76824146109885780638905fd4f146109905780639185192a146109b657806395d89b41146109e4576103fb565b806376687d3d116101e457806376687d3d1461093e5780637b99adb11461094657806380cd916d1461096357806380e7ce851461096b576103fb565b806370a08231146108da57806371073bac1461090057806373ef9a50146109085780637666f12514610910576103fb565b80632e1a7d4d1161031057806346c162de116102a357806351b42b001161027257806351b42b001461081c578063613384f214610824578063641ad8a91461084a5780636696779114610876578063681cb10a1461089c576103fb565b806346c162de146107de5780634bb278f3146107e65780634e97415f146107ee5780634f85221a14610814576103fb565b806340504ba0116102df57806340504ba01461074757806340bde09814610775578063410dbf7e1461079b578063443bb293146107b8576103fb565b80632e1a7d4d146106ee578063313ce5671461070b57806339509351146107135780634046af2b1461073f576103fb565b80631831ccf21161039357806323b872dd1161036257806323b872dd1461062857806324600fc31461065e57806324b92e8e1461066657806327f918561461068c5780632ac04ac8146106b8576103fb565b80631831ccf21461057a5780631aa37cec14610582578063209b2bca146105ba57806321c0b342146105c2576103fb565b80630d49b38c116103cf5780630d49b38c1461051957806313bf9e7e14610521578063174a5be41461055457806318160ddd14610572576103fb565b806241c52c14610400578063033b1cf01461043857806306fdde031461045c578063095ea7b3146104d9575b600080fd5b6104266004803603602081101561041657600080fd5b50356001600160a01b0316610c66565b60408051918252519081900360200190f35b610440610c85565b604080516001600160a01b039092168252519081900360200190f35b610464610ca9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049e578181015183820152602001610486565b50505050905090810190601f1680156104cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610505600480360360408110156104ef57600080fd5b506001600160a01b038135169060200135610d3f565b604080519115158252519081900360200190f35b610440610d5d565b610529610d81565b6040805195865260208601949094529115158484015260608401526080830152519081900360a00190f35b61055c610f04565b6040805160ff9092168252519081900360200190f35b610426610f09565b610505610f0f565b6105b86004803603606081101561059857600080fd5b506001600160a01b03813581169160208101359091169060400135610f18565b005b610440611025565b6105f0600480360360408110156105d857600080fd5b506001600160a01b0381358116916020013516611049565b604051808260e080838360005b838110156106155781810151838201526020016105fd565b5050505090500191505060405180910390f35b6105056004803603606081101561063e57600080fd5b506001600160a01b03813581169160208101359091169060400135611525565b6105b86115b3565b6104266004803603602081101561067c57600080fd5b50356001600160a01b0316611607565b6105b8600480360360408110156106a257600080fd5b506001600160a01b038135169060200135611619565b6105b8600480360360608110156106ce57600080fd5b506001600160a01b038135811691602081013590911690604001356117ba565b6105b86004803603602081101561070457600080fd5b5035611991565b61055c611aed565b6105056004803603604081101561072957600080fd5b506001600160a01b038135169060200135611af6565b610440611b4a565b6105b86004803603604081101561075d57600080fd5b506001600160a01b0381358116916020013516611b6e565b6104266004803603602081101561078b57600080fd5b50356001600160a01b0316611bef565b6105b8600480360360208110156107b157600080fd5b5035611c58565b610426600480360360208110156107ce57600080fd5b50356001600160a01b0316611d0d565b6105b8611d3f565b6105b8611d6d565b6104266004803603602081101561080457600080fd5b50356001600160a01b0316611e3b565b610505611e80565b6105b8611ea0565b6105056004803603602081101561083a57600080fd5b50356001600160a01b0316611ff9565b61085261200e565b6040518082600281111561086257fe5b60ff16815260200191505060405180910390f35b6104266004803603602081101561088c57600080fd5b50356001600160a01b031661201c565b610426600480360360808110156108b257600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516612042565b610426600480360360208110156108f057600080fd5b50356001600160a01b03166120ed565b610426612108565b6105b861210e565b6105b86004803603604081101561092657600080fd5b506001600160a01b03813516906020013515156121a4565b61042661220c565b6105b86004803603602081101561095c57600080fd5b5035612212565b61044061225d565b6105056004803603602081101561098157600080fd5b5035612281565b6105b86122d4565b6105b8600480360360208110156109a657600080fd5b50356001600160a01b0316612370565b6105b8600480360360408110156109cc57600080fd5b506001600160a01b0381351690602001351515612445565b6104646124ad565b61044061250e565b610426612532565b610426612538565b6105b860048036036020811015610a1a57600080fd5b5035151561253e565b61050560048036036040811015610a3957600080fd5b506001600160a01b03813516906020013561258d565b61050560048036036040811015610a6557600080fd5b506001600160a01b0381351690602001356125fb565b61042661260f565b61042660048036036020811015610a9957600080fd5b50356001600160a01b0316612615565b61042660048036036020811015610abf57600080fd5b50356001600160a01b0316612630565b610426612642565b6105b860048036036020811015610aed57600080fd5b5035612666565b610b3a600480360360a0811015610b0a57600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013590911690608001356127a0565b6040805192835260208301919091528051918290030190f35b61050560048036036020811015610b6957600080fd5b50356001600160a01b031661285d565b6105b860048036036020811015610b8f57600080fd5b5035612872565b61042660048036036040811015610bac57600080fd5b506001600160a01b03813581169160200135166128fa565b6105b8612917565b61044060048036036040811015610be257600080fd5b506001600160a01b0381358116916020013516612942565b61042660048036036020811015610c1057600080fd5b50356001600160a01b0316612968565b61042660048036036040811015610c3657600080fd5b506001600160a01b038135811691602001351661297a565b6104266129a5565b6104266129ab565b6104266129b1565b6001600160a01b0381166000908152600860205260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d355780601f10610d0a57610100808354040283529160200191610d35565b820191906000526020600020905b815481529060010190602001808311610d1857829003601f168201915b5050505050905090565b6000610d53610d4c6129b7565b84846129bb565b5060015b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060007364b0dD6Fef23172abfE34fae0B954FE66F270274635388e261610dcc7f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6040805160e084901b6001600160e01b03191681526001600160a01b0392831660048201527f0000000000000000000000000000000000000000000000000000000000000000831660248201527f0000000000000000000000000000000000000000000000000000000000000000831660448201527f0000000000000000000000000000000000000000000000000000000000000000831660648201527f000000000000000000000000000000000000000000000000000000000000000090921660848301525160a48083019260a0929190829003018186803b158015610eb257600080fd5b505af4158015610ec6573d6000803e3d6000fd5b505050506040513d60a0811015610edc57600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b600181565b60025490565b60145460ff1681565b610f20612b14565b610f2a6001612b24565b601154610f3d908263ffffffff612b8616565b6011556040805163fbecb17160e01b8152601660048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f00000000000000000000000000000000000000000000000000000000000000008116604483015280861660648301528416608482015260a4810183905290517364b0dD6Fef23172abfE34fae0B954FE66F2702749163fbecb1719160c4808301926000929190829003018186803b15801561100057600080fd5b505af4158015611014573d6000803e3d6000fd5b50505050611020612be0565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61105161468a565b611059612c70565b611061612d40565b6001600160a01b0380841660009081526016602090815260408083208685168452909152808220548151634e71d92d60e01b81529151931692634e71d92d9260048084019360e093929083900390910190829087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e08110156110fc57600080fd5b50601054604051633faa6c5d60e01b81529192506000918291829182917364b0dD6Fef23172abfE34fae0B954FE66F27027491633faa6c5d9188917f00000000000000000000000000000000000000000000000000000000000000009190600401808460e08083838c5b8381101561117e578181015183820152602001611166565b50505050905001838152602001828152602001935050505060806040518083038186803b1580156111ae57600080fd5b505af41580156111c2573d6000803e3d6000fd5b505050506040513d60808110156111d857600080fd5b50805160208201516040830151606090930151601154929750909550919350909150821161120e57601180548390039055611232565b601154611224908290840363ffffffff612b8616565b601180546000909155925090505b600c54611245908263ffffffff612b8616565b600c556112727f000000000000000000000000000000000000000000000000000000000000000085612dcc565b61129c7f000000000000000000000000000000000000000000000000000000000000000084612dcc565b6112d57f00000000000000000000000000000000000000000000000000000000000000006112d0848463ffffffff612b8616565b612dcc565b60c0850151156112f0576112f0878660066020020151612e06565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346c162de6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b5050505061136b611d3f565b611373612be0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561147e57600080fd5b505afa158015611492573d6000803e3d6000fd5b505050506040513d60208110156114a857600080fd5b505160408051918252519081900360200190a36060808601516040805184815260208101869052808201929092529181018590526080810186905290516001600160a01b038916917f21280d282ce6aa29c649fd1825373d7c77892fac3f1958fd98d5ca52dd82a197919081900360a00190a25050505092915050565b6000611532848484613010565b6115a88461153e6129b7565b6115a38560405180606001604052806028815260200161479e602891396001600160a01b038a1660009081526001602052604081209061157c6129b7565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61318e16565b6129bb565b5060015b9392505050565b6115bb612c70565b60006115c5613225565b9050806115d25750611605565b6115dc33826132aa565b6115e4612be0565b600c546115f7908263ffffffff61332a16565b600c55611602613387565b50505b565b60156020526000908152604090205481565b336000908152601a602090815260408083206001600160a01b03861684529091528120549061164e828463ffffffff612b8616565b336000908152601b602052604081205491925090611672908563ffffffff612b8616565b90507364b0dD6Fef23172abfE34fae0B954FE66F27027463297e7bf786868461169a336120ed565b6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200184815260200183815260200182815260200194505050505060006040518083038186803b1580156116f557600080fd5b505af4158015611709573d6000803e3d6000fd5b5050336000818152601a602090815260408083206001600160a01b038c16808552908352818420899055848452601b835292819020879055805189815291820188905280519295509293507f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e892908290030190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a25050505050565b6001600160a01b0383166000908152601a60209081526040808320338452909152812054906117ef828463ffffffff61332a16565b60408051631b4c903160e01b81526001600160a01b038089166004830152871660248201526044810186905290519192507364b0dD6Fef23172abfE34fae0B954FE66F27027491631b4c903191606480820192600092909190829003018186803b15801561185c57600080fd5b505af4158015611870573d6000803e3d6000fd5b505050506001600160a01b0385166000818152601a602090815260408083203384528252808320859055928252601b9052908120546118af908561332a565b6001600160a01b038088166000818152601b60209081526040918290208590558151898152915194955092891693919233927ffaa022ea2cd7f14157070896fabadafe96cc4d4714eef7ae6a992a5084493ed59281900390910190a46040805184815260208101849052815133926001600160a01b038a16927f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e8929081900390910190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a2505050505050565b611999612c70565b60006119a4826133ab565b90506000806119d27f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6001600160a01b0316639f51290b6040518163ffffffff1660e01b8152600401604080518083038186803b158015611a0957600080fd5b505afa158015611a1d573d6000803e3d6000fd5b505050506040513d6040811015611a3357600080fd5b5080516020909101519092509050611a4b33846133f8565b3360009081526019602052604090205482014203811015611aac576040805162461bcd60e51b8152602060048201526016602482015275140e95d2551211149055d7d393d517d0531313d5d15160521b604482015290519081900360640190fd5b611ab633846134d7565b611abe6115b3565b611adf33611ada611acd61357e565b879063ffffffff61332a16565b6132aa565b611ae7612be0565b50505050565b60055460ff1690565b6000610d53611b036129b7565b846115a38560016000611b146129b7565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff612b8616565b7f000000000000000000000000000000000000000000000000000000000000000081565b611b76612b14565b6001600160a01b038083166000908152601660209081526040808320858516845290915280822054815163175f832960e01b8152915193169263175f83299260048084019391929182900301818387803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152600a6020526040812054600160801b90611c4a90611c4590611c39611c34611c25886120ed565b6009549063ffffffff6135ad16565b613606565b9063ffffffff61364716565b6136ac565b81611c5157fe5b0492915050565b611c60612b14565b612710611c93827f000000000000000000000000000000000000000000000000000000000000000063ffffffff612b8616565b1115611cd2576040805162461bcd60e51b8152602060048201526009602482015268503a4241445f46454560b81b604482015290519081900360640190fd5b60108190556040805182815290517f9408bb8c08d29b335e36090045074610352365476d9df02e203c25db4fcd67c09181900360200190a150565b6001600160a01b038116600090815260086020526040812054610d5790611d3384611e3b565b9063ffffffff61332a16565b6000611d49613387565b905060008113611d595750611605565b611d6a611d65826136ac565b6136ed565b50565b611d75612b14565b611d7f6000612b24565b6000611d89610d81565b50509250505080611dd1576040805162461bcd60e51b815260206004820152600d60248201526c503a494e5355465f5354414b4560981b604482015290519081900360640190fd5b601480546001919061ff0019166101008302179055506014546040517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a91610100900460ff169080826002811115611e2557fe5b60ff16815260200191505060405180910390a150565b6001600160a01b038116600090815260076020526040812054600160801b90611c4a90611c4590611c39611c34611e71886120ed565b6006549063ffffffff6135ad16565b60006001601454610100900460ff166002811115611e9a57fe5b14905090565b611ea8612b14565b611eb26001612b24565b7364b0dD6Fef23172abfE34fae0B954FE66F27027463ad1a3323611ef57f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6011547f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001838152602001826001600160a01b03166001600160a01b03168152602001935050505060006040518083038186803b158015611f7f57600080fd5b505af4158015611f93573d6000803e3d6000fd5b50506014805461ff00191661020017908190556040517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a935061010090910460ff16915080826002811115611fe457fe5b60ff16815260200191505060405180910390a1565b60176020526000908152604090205460ff1681565b601454610100900460ff1681565b6001600160a01b0381166000908152600b6020526040812054610d5790611d3384611bef565b6040805163340e588560e11b81526001600160a01b038087166004830152808616602483015280851660448301528316606482015290516000917364b0dD6Fef23172abfE34fae0B954FE66F2702749163681cb10a91608480820192602092909190829003018186803b1580156120b857600080fd5b505af41580156120cc573d6000803e3d6000fd5b505050506040513d60208110156120e257600080fd5b505195945050505050565b6001600160a01b031660009081526020819052604090205490565b600c5481565b6000612119336120ed565b1415612159576040805162461bcd60e51b815260206004820152600a602482015269140e96915493d7d0905360b21b604482015290519081900360640190fd5b336000818152601960209081526040918290204290819055825190815291517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b6121ac612b14565b6001600160a01b038216600081815260186020908152604091829020805460ff1916851515908117909155825190815291517fdf56132520665b33cd5731c5cfbacd8bee82524e67df563bb25b2be304f91d449281900390910190a25050565b60125481565b61221a612c70565b612222612d40565b60128190556040805182815290517f3ff20538222f568f27ff436c0c49dfd3e48d5b8f86533a3f759dc1c7089775ab9181900360200190a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b60145460009060ff16806122a457503360009081526018602052604090205460ff165b8015610d5757506012546122cc836122c06011546122c06137ed565b9063ffffffff612b8616565b111592915050565b33600090815260196020526040902054612329576040805162461bcd60e51b8152602060048201526011602482015270503a4e4f545f5749544844524157494e4760781b604482015290519081900360640190fd5b3360008181526019602090815260408083208390558051928352517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b7364b0dD6Fef23172abfE34fae0B954FE66F2702746385937648827f00000000000000000000000000000000000000000000000000000000000000006123d57f0000000000000000000000000000000000000000000000000000000000000000612aa7565b604080516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015290516064808301926000929190829003018186803b15801561242a57600080fd5b505af415801561243e573d6000803e3d6000fd5b5050505050565b61244d612b14565b6001600160a01b038216600081815260176020908152604091829020805460ff1916851515908117909155825190815291517f353578bbc0ab907b7018b0f7b50b5f822d31dc9fcf4c16fffa780e109ca7c9309281900390910190a25050565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d355780601f10610d0a57610100808354040283529160200191610d35565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e5481565b600d5481565b612546612b14565b6014805482151560ff19909116811790915560408051918252517feeba6fd794e30165023f7e3d017e92901622076a95d36e45906955e025ff4fe79181900360200190a150565b6000610d5361259a6129b7565b846115a38560405180606001604052806025815260200161487e60259139600160006125c46129b7565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61318e16565b6000610d536126086129b7565b8484613010565b60115481565b6001600160a01b03166000908152600b602052604090205490565b601b6020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b61266e612c70565b6126786001612b24565b61268181612281565b6126c6576040805162461bcd60e51b8152602060048201526011602482015270140e91115417d393d517d0531313d5d151607a1b604482015290519081900360640190fd5b3360009081526019602052604081208190556126e1826133ab565b90506126f860156126f1336120ed565b83336138b6565b6127536001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f00000000000000000000000000000000000000000000000000000000000000008563ffffffff61396f16565b61275d33826139c9565b612765612be0565b6040805160008152905133917f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d65919081900360200190a25050565b6040805163c374682560e01b81526001600160a01b038088166004830152808716602483015280861660448301528416606482015260848101839052815160009283927364b0dD6Fef23172abfE34fae0B954FE66F2702749263c37468259260a480840193919291829003018186803b15801561281c57600080fd5b505af4158015612830573d6000803e3d6000fd5b505050506040513d604081101561284657600080fd5b508051602090910151909890975095505050505050565b60186020526000908152604090205460ff1681565b61287a612b14565b6013548111156128bf576040805162461bcd60e51b815260206004820152600b60248201526a503a4241445f56414c554560a81b604482015290519081900360640190fd5b60138190556040805182815290517f3094b4ce0463766c3cd81ed2ae2451610dcac39a1061fa023ca9d3d4df959f759181900360200190a150565b601a60209081526000928352604080842090915290825290205481565b6000612921613a15565b9050600081136129315750611605565b611d6a61293d826136ac565b613a33565b60166020908152600092835260408084209091529082529020546001600160a01b031681565b60196020526000908152604090205481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60135481565b60105481565b600f5481565b3390565b6001600160a01b038316612a005760405162461bcd60e51b815260040180806020018281038252602481526020018061480c6024913960400191505060405180910390fd5b6001600160a01b038216612a455760405162461bcd60e51b81526004018080602001828103825260228152602001806146ee6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000816001600160a01b031663c31245256040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae257600080fd5b505afa158015612af6573d6000803e3d6000fd5b505050506040513d6020811015612b0c57600080fd5b505192915050565b612b1c613b38565b611605612c70565b806002811115612b3057fe5b601454610100900460ff166002811115612b4657fe5b14611d6a576040805162461bcd60e51b815260206004820152600b60248201526a503a4241445f535441544560a81b604482015290519081900360640190fd5b6000828201838110156115ac576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a2612c5d6137ed565b60408051918252519081900360200190a3565b612c997f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6001600160a01b031663425fad586040518163ffffffff1660e01b815260040160206040518083038186803b158015612cd157600080fd5b505afa158015612ce5573d6000803e3d6000fd5b505050506040513d6020811015612cfb57600080fd5b505115611605576040805162461bcd60e51b815260206004820152600e60248201526d140e941493d513d7d4105554d15160921b604482015290519081900360640190fd5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612d8657503360009081526017602052604090205460ff165b611605576040805162461bcd60e51b8152602060048201526012602482015271281d2727aa2fa222a62fa7a92fa0a226a4a760711b604482015290519081900360640190fd5b6116026001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838363ffffffff613ba116565b6040805162715b0960e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000166044820152606481018390529051600091829182917364b0dD6Fef23172abfE34fae0B954FE66F27027491630715b09091608480820192606092909190829003018186803b158015612ede57600080fd5b505af4158015612ef2573d6000803e3d6000fd5b505050506040513d6060811015612f0857600080fd5b5080516020820151604090920151909450909250905080841115612f4657600d54612f3b9082860363ffffffff612b8616565b600d55612f46612917565b612fa06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008363ffffffff613ba116565b601154612fb3908563ffffffff61332a16565b60115560408051858152602081018590528082018490526060810183905290516001600160a01b038716917fd393d18014c1898545668c52621bced9493753be5b8138f2539542ca606732eb919081900360800190a25050505050565b613018612c70565b6000806130447f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6001600160a01b0316639f51290b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561307b57600080fd5b505afa15801561308f573d6000803e3d6000fd5b505050506040513d60408110156130a557600080fd5b50805160209091015190925090506130bd85846133f8565b6001600160a01b038416600090815260196020526040902054820181014211613120576040805162461bcd60e51b815260206004820152601060248201526f140e9513d7d393d517d0531313d5d15160821b604482015290519081900360640190fd5b600061312b8661201c565b1461316e576040805162461bcd60e51b815260206004820152600e60248201526d503a5245434f475f4c4f5353455360901b604482015290519081900360640190fd5b613183601561317c866120ed565b85876138b6565b61243e858585613bf3565b6000818484111561321d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e25781810151838201526020016131ca565b50505050905090810190601f16801561320f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061323033611d0d565b3360009081526008602052604081205491925090613254908363ffffffff612b8616565b336000818152600860209081526040918290208490558151868152908101849052815193945091927ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb49281900390910190a25090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611bd357600080fd5b600082821115613381576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600e8054600c54918290556000916133a5908263ffffffff613d1f16565b91505090565b6000610d577f0000000000000000000000000000000000000000000000000000000000000000600a0a6133ec84670de0b6b3a764000063ffffffff6135ad16565b9063ffffffff613d8416565b6013546001600160a01b0383166000908152601560205260409020544291613426919063ffffffff612b8616565b111561346a576040805162461bcd60e51b815260206004820152600e60248201526d140e9195539114d7d313d0d2d15160921b604482015290519081900360640190fd5b6001600160a01b0382166000908152601b602052604090205461349082611d33856120ed565b1015611602576040805162461bcd60e51b8152602060048201526011602482015270140e925394d55197d514905394d7d09053607a1b604482015290519081900360640190fd5b6134e18282613deb565b60006135236134fe611c34846009546135ad90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff61364716565b6001600160a01b0384166000818152600a60209081526040918290208490558151848152915193945091927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a2505050565b6000613588613e92565b600d5490915061359e908263ffffffff61332a16565b600d556135a9613a15565b5090565b6000826135bc57506000610d57565b828202828482816135c957fe5b04146115ac5760405162461bcd60e51b815260040180806020018281038252602181526020018061477d6021913960400191505060405180910390fd5b806000811215610c80576040805162461bcd60e51b815260206004820152600760248201526629a6aa9d27a7a160c91b604482015290519081900360640190fd5b600082820181831280159061365c5750838112155b80613671575060008312801561367157508381125b6115ac5760405162461bcd60e51b81526004018080602001828103825260218152602001806147366021913960400191505060405180910390fd5b6000808212156135a9576040805162461bcd60e51b8152602060048201526007602482015266534d493a4e454760c81b604482015290519081900360640190fd5b60006136f7610f09565b1161373b576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b8061374557611d6a565b61377c613750610f09565b61376483600160801b63ffffffff6135ad16565b8161376b57fe5b60065491900463ffffffff612b8616565b60065560408051828152905133917f26536799ace2c3dbe12e638ec3ade6b4173dcf1289be0a58d51a5003015649bd919081900360200190a260065460408051918252517f1f8d7705f31c3337a080803a8ad7e71946fb88d84738879be2bf402f97156e969181900360200190a150565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561388557600080fd5b505afa158015613899573d6000803e3d6000fd5b505050506040513d60208110156138af57600080fd5b5051905090565b6001600160a01b038116600090815260208590526040812054908484016138dd5781613913565b6139136139068686016133ec876138fa428863ffffffff61332a16565b9063ffffffff6135ad16565b839063ffffffff612b8616565b6001600160a01b038416600081815260208981526040918290208490558151848152915193945091927ff9b842c70d79466435b46540bb988aa5c998b3243bf91c36380ddb5887c0f0e4929181900390910190a2505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ae7908590613f17565b6139d38282613fc8565b60006135236139f0611c34846009546135ad90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff613d1f16565b600f8054600d54918290556000916133a5908263ffffffff613d1f16565b6000613a3d610f09565b11613a81576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b80613a8b57611d6a565b6000613ac4613a98610f09565b613aac84600160801b63ffffffff6135ad16565b81613ab357fe5b60095491900463ffffffff612b8616565b600981905560408051848152905191925033917ff88156a8032a0d2c65df18fafaf84e0bea647b3d94a0f7fc6ab14c97dec2bf749181900360200190a26040805182815290517f240ce2b5ce9e9e5a70010c7f8034c233d89b7ce2d60f3a38d9bc3ca01a36f88c9181900360200190a15050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611605576040805162461bcd60e51b8152602060048201526009602482015268140e9393d517d1115360ba1b604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611020908490613f17565b613bfe838383614014565b6000613c18611c34836009546135ad90919063ffffffff16565b6001600160a01b0385166000908152600a602052604081205491925090613c45908363ffffffff61364716565b6001600160a01b038087166000908152600a602052604080822084905591871681529081205491925090613c7f908463ffffffff613d1f16565b6001600160a01b038087166000908152600a602090815260409182902084905581518681529151939450918916927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a26040805182815290516001600160a01b038716917fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3919081900360200190a2505050505050565b6000818303818312801590613d345750838113155b80613d495750600083128015613d4957508381135b6115ac5760405162461bcd60e51b81526004018080602001828103825260248152602001806148306024913960400191505060405180910390fd5b6000808211613dda576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613de357fe5b049392505050565b613df58282614140565b6000613e37613e12611c34846006546135ad90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff61364716565b6001600160a01b0384166000818152600760209081526040918290208490558151848152915193945091927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a2505050565b6000613e9d3361201c565b336000908152600b602052604081205491925090613ec1908363ffffffff612b8616565b336000818152600b60209081526040918290208490558151868152908101849052815193945091927f814eba35782909dbbaeefb8104073dfca45de43173f7077970c1584b3cf918b59281900390910190a25090565b6060613f6c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142489092919063ffffffff16565b80519091501561102057808060200190516020811015613f8b57600080fd5b50516110205760405162461bcd60e51b815260040180806020018281038252602a815260200180614854602a913960400191505060405180910390fd5b613fd2828261425f565b6000613e37613fef611c34846006546135ad90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff613d1f16565b61401f83838361435b565b6000614039611c34836006546135ad90919063ffffffff16565b6001600160a01b03851660009081526007602052604081205491925090614066908363ffffffff61364716565b6001600160a01b03808716600090815260076020526040808220849055918716815290812054919250906140a0908463ffffffff613d1f16565b6001600160a01b0380871660009081526007602090815260409182902084905581518681529151939450918916927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a26040805182815290516001600160a01b038716917ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773919081900360200190a2505050505050565b6001600160a01b0382166141855760405162461bcd60e51b81526004018080602001828103825260218152602001806147c66021913960400191505060405180910390fd5b61419182600083611020565b6141d4816040518060600160405280602281526020016146cc602291396001600160a01b038516600090815260208190526040902054919063ffffffff61318e16565b6001600160a01b038316600090815260208190526040902055600254614200908263ffffffff61332a16565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b606061425784846000856144c2565b949350505050565b6001600160a01b0382166142ba576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6142c660008383611020565b6002546142d9908263ffffffff612b8616565b6002556001600160a01b038216600090815260208190526040902054614305908263ffffffff612b8616565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0383166143a05760405162461bcd60e51b81526004018080602001828103825260258152602001806147e76025913960400191505060405180910390fd5b6001600160a01b0382166143e55760405162461bcd60e51b81526004018080602001828103825260238152602001806146a96023913960400191505060405180910390fd5b6143f0838383611020565b61443381604051806060016040528060268152602001614710602691396001600160a01b038616600090815260208190526040902054919063ffffffff61318e16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054614468908263ffffffff612b8616565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6060824710156145035760405162461bcd60e51b81526004018080602001828103825260268152602001806147576026913960400191505060405180910390fd5b61450c8561461e565b61455d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061459c5780518252601f19909201916020918201910161457d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146145fe576040519150601f19603f3d011682016040523d82523d6000602084013e614603565b606091505b5091509150614613828286614624565b979650505050505050565b3b151590565b606083156146335750816115ac565b8251156146435782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131e25781810151838201526020016131ca565b6040518060e00160405280600790602082028036833750919291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212205fdbbcc475442bdb059c24b64c51f1582ef21c2201fc017086757d4310d2619264736f6c634300060b0033a26469706673582212202426f36531c92b4a73f0417cc93fae8a8acd8f9c8aaef507a41ce93cc456ccd964736f6c634300060b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e25760003560e01c8063945164e71162000099578063c3124525116200006f578063c3124525146200023a578063c5ba73ed1462000244578063cc2e0a26146200024e578063f3f616c0146200027757620000e2565b8063945164e714620001de5780639f71f14a14620001fa578063ac4afa38146200021a57620000e2565b8063312b898214620000e75780633f4ba83a14620001585780635b16ebb714620001645780635c975abb14620001a15780636050abb214620001ab5780638456cb5914620001d4575b600080fd5b6200013c600480360360e0811015620000ff57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a08101359060c00135620002a8565b604080516001600160a01b039092168252519081900360200190f35b6200016262000a29565b005b6200018d600480360360208110156200017c57600080fd5b50356001600160a01b031662000a3f565b604080519115158252519081900360200190f35b6200018d62000a54565b6200018d60048036036020811015620001c357600080fd5b50356001600160a01b031662000a5d565b6200016262000a72565b620001e862000a86565b60408051918252519081900360200190f35b6200020462000a8c565b6040805160ff9092168252519081900360200190f35b6200013c600480360360208110156200023257600080fd5b503562000a91565b6200013c62000aac565b6200020462000abb565b62000162600480360360208110156200026657600080fd5b50356001600160a01b031662000ac0565b62000162600480360360408110156200028f57600080fd5b506001600160a01b038135169060200135151562000aec565b6000620002b462000a54565b15620002fa576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6200030462000b56565b600254604080516313d459fb60e01b81523060048201526001600160a01b038881166024830152600360448301529151919092169182916313d459fb91606480820192602092909190829003018186803b1580156200036257600080fd5b505afa15801562000377573d6000803e3d6000fd5b505050506040513d60208110156200038e57600080fd5b5051620003d3576040805162461bcd60e51b815260206004820152600e60248201526d28231d24a72b20a624a22fa6262360911b604482015290519081900360640190fd5b604080516313d459fb60e01b8152306004828101919091526001600160a01b038a8116602484015260448301919091529151918316916313d459fb91606480820192602092909190829003018186803b1580156200043057600080fd5b505afa15801562000445573d6000803e3d6000fd5b505050506040513d60208110156200045c57600080fd5b5051620004a1576040805162461bcd60e51b815260206004820152600e60248201526d28231d24a72b20a624a22fa9a62360911b604482015290519081900360640190fd5b60408051631b971aa360e11b815233600482015290516001600160a01b0383169163372e3546916024808301926020929190829003018186803b158015620004e857600080fd5b505afa158015620004fd573d6000803e3d6000fd5b505050506040513d60208110156200051457600080fd5b50516200055a576040805162461bcd60e51b815260206004820152600f60248201526e50463a4e4f545f44454c454741544560881b604482015290519081900360640190fd5b506060604051806040016040528060118152602001702432b634b7b9902837b7b6102a37b5b2b760791b81525090506060604051806040016040528060068152602001650484c532d4c560d41b81525090506000338b8b8b8b8b8b8b8a8a604051620005c69062000efb565b6001600160a01b03808c1682528a81166020808401919091528a821660408401528982166060840152908816608083015260a0820187905260c0820186905260e0820185905261014061010083018181528551918401919091528451909161012084019161016085019187019080838360005b838110156200065357818101518382015260200162000639565b50505050905090810190601f168015620006815780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620006b65781810151838201526020016200069c565b50505050905090810190601f168015620006e45780820380516001836020036101000a031916815260200191505b509c50505050505050505050505050604051809103906000f08015801562000710573d6000803e3d6000fd5b5090508093508360036000600154815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160046000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815460010191905081905550336001600160a01b0316846001600160a01b03167fca6c57d58de1ff84c629ea4a44b3a2f19a6c83cc1dc3cd7d1ede2067a6a1016d8d8d856001600160a01b0316639759164a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200080f57600080fd5b505afa15801562000824573d6000803e3d6000fd5b505050506040513d60208110156200083b57600080fd5b5051604080516233b1cf60e41b815290516001600160a01b0389169163033b1cf0916004808301926020929190829003018186803b1580156200087d57600080fd5b505afa15801562000892573d6000803e3d6000fd5b505050506040513d6020811015620008a957600080fd5b81019080805190602001909291905050508d8d8d8c8c604051808a6001600160a01b03166001600160a01b03168152602001896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b031681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015620009745781810151838201526020016200095a565b50505050905090810190601f168015620009a25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620009d7578181015183820152602001620009bd565b50505050905090810190601f16801562000a055780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a3505050979650505050505050565b62000a3362000c18565b62000a3d62000d03565b565b60046020526000908152604090205460ff1681565b60005460ff1690565b60056020526000908152604090205460ff1681565b62000a7c62000c18565b62000a3d62000da8565b60015481565b600481565b6003602052600090815260409020546001600160a01b031681565b6002546001600160a01b031681565b600381565b62000aca62000e30565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b62000af662000e30565b6001600160a01b038216600081815260056020908152604091829020805460ff1916851515908117909155825190815291517fc0d8ae32722eafe08b35b2bb46dec31dcbbd5bb18069f66995df3c9f47f4d64f9281900390910190a25050565b600260009054906101000a90046001600160a01b03166001600160a01b031663425fad586040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ba557600080fd5b505afa15801562000bba573d6000803e3d6000fd5b505050506040513d602081101562000bd157600080fd5b50511562000a3d576040805162461bcd60e51b815260206004820152600f60248201526e14118e941493d513d7d4105554d151608a1b604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c6757600080fd5b505afa15801562000c7c573d6000803e3d6000fd5b505050506040513d602081101562000c9357600080fd5b50516001600160a01b031633148062000cbb57503360009081526005602052604090205460ff165b62000a3d576040805162461bcd60e51b815260206004820152601360248201527228231d2727aa2fa3a7ab2fa7a92fa0a226a4a760691b604482015290519081900360640190fd5b62000d0d62000a54565b62000d56576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62000d8b62000ef7565b604080516001600160a01b039092168252519081900360200190a1565b62000db262000a54565b1562000df8576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000d8b62000ef7565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e7f57600080fd5b505afa15801562000e94573d6000803e3d6000fd5b505050506040513d602081101562000eab57600080fd5b50516001600160a01b0316331462000a3d576040805162461bcd60e51b815260206004820152600a60248201526928231d2727aa2fa3a7ab60b11b604482015290519081900360640190fd5b3390565b61501e8062000f0a8339019056fe6101806040523480156200001257600080fd5b506040516200501e3803806200501e83398181016040526101408110156200003957600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0180519751999b989a969995989497939692959194919392820192846401000000008211156200009257600080fd5b908301906020820185811115620000a857600080fd5b8251640100000000811182820188101715620000c357600080fd5b82525081516020918201929091019080838360005b83811015620000f2578181015183820152602001620000d8565b50505050905090810190601f168015620001205780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200014457600080fd5b9083019060208201858111156200015a57600080fd5b82516401000000008111828201881017156200017557600080fd5b82525081516020918201929091019080838360005b83811015620001a45781810151838201526020016200018a565b50505050905090810190601f168015620001d25780820380516001836020036101000a031916815260200191505b5060405250505081818181818181818160039080519060200190620001f99291906200056e565b5080516200020f9060049060208401906200056e565b50506005805460ff191660121790555073__$87c5565d2cb91337a618497edfeeda13b6$__955063f30752bd9450620002589350339250506001600160e01b03620004fe169050565b604080516001600160e01b031960e085901b1681526001600160a01b039283166004820152828e166024820152918c16604483015260648201899052608482018890525160a4808301926000929190829003018186803b158015620002bc57600080fd5b505af4158015620002d1573d6000803e3d6000fd5b50505050886001600160a01b03166080816001600160a01b031660601b81525050886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032c57600080fd5b505afa15801562000341573d6000803e3d6000fd5b505050506040513d60208110156200035857600080fd5b505160ff1661014052606088811b6001600160601b031990811660e0528b821b1660a052601086905561016085905233901b610120526012839055604080516342ef033f60e11b81526001600160a01b03808b1660048301528b811660248301529151918916916385de067e916044808201926020929091908290030181600087803b158015620003e857600080fd5b505af1158015620003fd573d6000803e3d6000fd5b505050506040513d60208110156200041457600080fd5b505160601b6001600160601b0319166101005260408051630cf5bc1d60e11b81526001600160a01b038b811660048301529151918816916319eb783a916024808201926020929091908290030181600087803b1580156200047457600080fd5b505af115801562000489573d6000803e3d6000fd5b505050506040513d6020811015620004a057600080fd5b505160601b6001600160601b03191660c05262ed4e00601355604080516000815290517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a916020908290030190a15050505050505050505062000613565b6000816001600160a01b031663c31245256040518163ffffffff1660e01b815260040160206040518083038186803b1580156200053a57600080fd5b505afa1580156200054f573d6000803e3d6000fd5b505050506040513d60208110156200056657600080fd5b505192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005b157805160ff1916838001178555620005e1565b82800160010185558215620005e1579182015b82811115620005e1578251825591602001919060010190620005c4565b50620005ef929150620005f3565b5090565b6200061091905b80821115620005ef5760008155600101620005fa565b90565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61014051610160516148d862000746600039806111395280611c6952806126445250806133b2525080610d5f5280610da85280610f5f52806119ae5280611ed152806123b15280612c755280613020525080610c875280610e6b528061127752806112f2528061139f52806114195280612e45525080610df3528061225f5280612e6d525080610f8752806112a1528061251052806127285280612c0c5280612f7552806132ac5280613820525080610e43528061124d5280611b4c5280612d4b5280613b43525080610e1b5280611027528061137552806113ea5280611efa528061238d52806127055280612be25280612dd95280612e1d5280612f5352806137f152506148d86000f3fe608060405234801561001057600080fd5b50600436106103fb5760003560e01c806370a0823111610215578063a9059cbb11610125578063c771c390116100b8578063d82745c811610087578063d82745c814610bfa578063dd62ed3e14610c20578063ee947a7c14610c4e578063eff9884314610c56578063fec984e314610c5e576103fb565b8063c771c39014610b79578063c965b54814610b96578063cc0fef0214610bc4578063d7bd3c9114610bcc576103fb565b8063b69410de116100f4578063b69410de14610acf578063b6b55f2514610ad7578063c374682514610af4578063c59e395914610b53576103fb565b8063a9059cbb14610a4f578063ac64165514610a7b578063aed4966a14610a83578063af6d557114610aa9576103fb565b806384b76824116101a85780639759164a116101775780639759164a146109ec5780639f3c7325146109f4578063a33142f7146109fc578063a43baa3d14610a04578063a457c2d714610a23576103fb565b806384b76824146109885780638905fd4f146109905780639185192a146109b657806395d89b41146109e4576103fb565b806376687d3d116101e457806376687d3d1461093e5780637b99adb11461094657806380cd916d1461096357806380e7ce851461096b576103fb565b806370a08231146108da57806371073bac1461090057806373ef9a50146109085780637666f12514610910576103fb565b80632e1a7d4d1161031057806346c162de116102a357806351b42b001161027257806351b42b001461081c578063613384f214610824578063641ad8a91461084a5780636696779114610876578063681cb10a1461089c576103fb565b806346c162de146107de5780634bb278f3146107e65780634e97415f146107ee5780634f85221a14610814576103fb565b806340504ba0116102df57806340504ba01461074757806340bde09814610775578063410dbf7e1461079b578063443bb293146107b8576103fb565b80632e1a7d4d146106ee578063313ce5671461070b57806339509351146107135780634046af2b1461073f576103fb565b80631831ccf21161039357806323b872dd1161036257806323b872dd1461062857806324600fc31461065e57806324b92e8e1461066657806327f918561461068c5780632ac04ac8146106b8576103fb565b80631831ccf21461057a5780631aa37cec14610582578063209b2bca146105ba57806321c0b342146105c2576103fb565b80630d49b38c116103cf5780630d49b38c1461051957806313bf9e7e14610521578063174a5be41461055457806318160ddd14610572576103fb565b806241c52c14610400578063033b1cf01461043857806306fdde031461045c578063095ea7b3146104d9575b600080fd5b6104266004803603602081101561041657600080fd5b50356001600160a01b0316610c66565b60408051918252519081900360200190f35b610440610c85565b604080516001600160a01b039092168252519081900360200190f35b610464610ca9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049e578181015183820152602001610486565b50505050905090810190601f1680156104cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610505600480360360408110156104ef57600080fd5b506001600160a01b038135169060200135610d3f565b604080519115158252519081900360200190f35b610440610d5d565b610529610d81565b6040805195865260208601949094529115158484015260608401526080830152519081900360a00190f35b61055c610f04565b6040805160ff9092168252519081900360200190f35b610426610f09565b610505610f0f565b6105b86004803603606081101561059857600080fd5b506001600160a01b03813581169160208101359091169060400135610f18565b005b610440611025565b6105f0600480360360408110156105d857600080fd5b506001600160a01b0381358116916020013516611049565b604051808260e080838360005b838110156106155781810151838201526020016105fd565b5050505090500191505060405180910390f35b6105056004803603606081101561063e57600080fd5b506001600160a01b03813581169160208101359091169060400135611525565b6105b86115b3565b6104266004803603602081101561067c57600080fd5b50356001600160a01b0316611607565b6105b8600480360360408110156106a257600080fd5b506001600160a01b038135169060200135611619565b6105b8600480360360608110156106ce57600080fd5b506001600160a01b038135811691602081013590911690604001356117ba565b6105b86004803603602081101561070457600080fd5b5035611991565b61055c611aed565b6105056004803603604081101561072957600080fd5b506001600160a01b038135169060200135611af6565b610440611b4a565b6105b86004803603604081101561075d57600080fd5b506001600160a01b0381358116916020013516611b6e565b6104266004803603602081101561078b57600080fd5b50356001600160a01b0316611bef565b6105b8600480360360208110156107b157600080fd5b5035611c58565b610426600480360360208110156107ce57600080fd5b50356001600160a01b0316611d0d565b6105b8611d3f565b6105b8611d6d565b6104266004803603602081101561080457600080fd5b50356001600160a01b0316611e3b565b610505611e80565b6105b8611ea0565b6105056004803603602081101561083a57600080fd5b50356001600160a01b0316611ff9565b61085261200e565b6040518082600281111561086257fe5b60ff16815260200191505060405180910390f35b6104266004803603602081101561088c57600080fd5b50356001600160a01b031661201c565b610426600480360360808110156108b257600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516612042565b610426600480360360208110156108f057600080fd5b50356001600160a01b03166120ed565b610426612108565b6105b861210e565b6105b86004803603604081101561092657600080fd5b506001600160a01b03813516906020013515156121a4565b61042661220c565b6105b86004803603602081101561095c57600080fd5b5035612212565b61044061225d565b6105056004803603602081101561098157600080fd5b5035612281565b6105b86122d4565b6105b8600480360360208110156109a657600080fd5b50356001600160a01b0316612370565b6105b8600480360360408110156109cc57600080fd5b506001600160a01b0381351690602001351515612445565b6104646124ad565b61044061250e565b610426612532565b610426612538565b6105b860048036036020811015610a1a57600080fd5b5035151561253e565b61050560048036036040811015610a3957600080fd5b506001600160a01b03813516906020013561258d565b61050560048036036040811015610a6557600080fd5b506001600160a01b0381351690602001356125fb565b61042661260f565b61042660048036036020811015610a9957600080fd5b50356001600160a01b0316612615565b61042660048036036020811015610abf57600080fd5b50356001600160a01b0316612630565b610426612642565b6105b860048036036020811015610aed57600080fd5b5035612666565b610b3a600480360360a0811015610b0a57600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013590911690608001356127a0565b6040805192835260208301919091528051918290030190f35b61050560048036036020811015610b6957600080fd5b50356001600160a01b031661285d565b6105b860048036036020811015610b8f57600080fd5b5035612872565b61042660048036036040811015610bac57600080fd5b506001600160a01b03813581169160200135166128fa565b6105b8612917565b61044060048036036040811015610be257600080fd5b506001600160a01b0381358116916020013516612942565b61042660048036036020811015610c1057600080fd5b50356001600160a01b0316612968565b61042660048036036040811015610c3657600080fd5b506001600160a01b038135811691602001351661297a565b6104266129a5565b6104266129ab565b6104266129b1565b6001600160a01b0381166000908152600860205260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d355780601f10610d0a57610100808354040283529160200191610d35565b820191906000526020600020905b815481529060010190602001808311610d1857829003601f168201915b5050505050905090565b6000610d53610d4c6129b7565b84846129bb565b5060015b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600080600073__$87c5565d2cb91337a618497edfeeda13b6$__635388e261610dcc7f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6040805160e084901b6001600160e01b03191681526001600160a01b0392831660048201527f0000000000000000000000000000000000000000000000000000000000000000831660248201527f0000000000000000000000000000000000000000000000000000000000000000831660448201527f0000000000000000000000000000000000000000000000000000000000000000831660648201527f000000000000000000000000000000000000000000000000000000000000000090921660848301525160a48083019260a0929190829003018186803b158015610eb257600080fd5b505af4158015610ec6573d6000803e3d6000fd5b505050506040513d60a0811015610edc57600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b600181565b60025490565b60145460ff1681565b610f20612b14565b610f2a6001612b24565b601154610f3d908263ffffffff612b8616565b6011556040805163fbecb17160e01b8152601660048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f00000000000000000000000000000000000000000000000000000000000000008116604483015280861660648301528416608482015260a48101839052905173__$87c5565d2cb91337a618497edfeeda13b6$__9163fbecb1719160c4808301926000929190829003018186803b15801561100057600080fd5b505af4158015611014573d6000803e3d6000fd5b50505050611020612be0565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61105161468a565b611059612c70565b611061612d40565b6001600160a01b0380841660009081526016602090815260408083208685168452909152808220548151634e71d92d60e01b81529151931692634e71d92d9260048084019360e093929083900390910190829087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e08110156110fc57600080fd5b50601054604051633faa6c5d60e01b815291925060009182918291829173__$87c5565d2cb91337a618497edfeeda13b6$__91633faa6c5d9188917f00000000000000000000000000000000000000000000000000000000000000009190600401808460e08083838c5b8381101561117e578181015183820152602001611166565b50505050905001838152602001828152602001935050505060806040518083038186803b1580156111ae57600080fd5b505af41580156111c2573d6000803e3d6000fd5b505050506040513d60808110156111d857600080fd5b50805160208201516040830151606090930151601154929750909550919350909150821161120e57601180548390039055611232565b601154611224908290840363ffffffff612b8616565b601180546000909155925090505b600c54611245908263ffffffff612b8616565b600c556112727f000000000000000000000000000000000000000000000000000000000000000085612dcc565b61129c7f000000000000000000000000000000000000000000000000000000000000000084612dcc565b6112d57f00000000000000000000000000000000000000000000000000000000000000006112d0848463ffffffff612b8616565b612dcc565b60c0850151156112f0576112f0878660066020020151612e06565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346c162de6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b5050505061136b611d3f565b611373612be0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561147e57600080fd5b505afa158015611492573d6000803e3d6000fd5b505050506040513d60208110156114a857600080fd5b505160408051918252519081900360200190a36060808601516040805184815260208101869052808201929092529181018590526080810186905290516001600160a01b038916917f21280d282ce6aa29c649fd1825373d7c77892fac3f1958fd98d5ca52dd82a197919081900360a00190a25050505092915050565b6000611532848484613010565b6115a88461153e6129b7565b6115a38560405180606001604052806028815260200161479e602891396001600160a01b038a1660009081526001602052604081209061157c6129b7565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61318e16565b6129bb565b5060015b9392505050565b6115bb612c70565b60006115c5613225565b9050806115d25750611605565b6115dc33826132aa565b6115e4612be0565b600c546115f7908263ffffffff61332a16565b600c55611602613387565b50505b565b60156020526000908152604090205481565b336000908152601a602090815260408083206001600160a01b03861684529091528120549061164e828463ffffffff612b8616565b336000908152601b602052604081205491925090611672908563ffffffff612b8616565b905073__$87c5565d2cb91337a618497edfeeda13b6$__63297e7bf786868461169a336120ed565b6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200184815260200183815260200182815260200194505050505060006040518083038186803b1580156116f557600080fd5b505af4158015611709573d6000803e3d6000fd5b5050336000818152601a602090815260408083206001600160a01b038c16808552908352818420899055848452601b835292819020879055805189815291820188905280519295509293507f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e892908290030190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a25050505050565b6001600160a01b0383166000908152601a60209081526040808320338452909152812054906117ef828463ffffffff61332a16565b60408051631b4c903160e01b81526001600160a01b0380891660048301528716602482015260448101869052905191925073__$87c5565d2cb91337a618497edfeeda13b6$__91631b4c903191606480820192600092909190829003018186803b15801561185c57600080fd5b505af4158015611870573d6000803e3d6000fd5b505050506001600160a01b0385166000818152601a602090815260408083203384528252808320859055928252601b9052908120546118af908561332a565b6001600160a01b038088166000818152601b60209081526040918290208590558151898152915194955092891693919233927ffaa022ea2cd7f14157070896fabadafe96cc4d4714eef7ae6a992a5084493ed59281900390910190a46040805184815260208101849052815133926001600160a01b038a16927f847e03d69a7075471d42285f4ac63570c10f3012d8bf736d66de2eef17aac3e8929081900390910190a360408051828152905133917fe7f3fb4dacbff434e6d283d891f199c48b05b1629f610bd7ddc62353e162fb16919081900360200190a2505050505050565b611999612c70565b60006119a4826133ab565b90506000806119d27f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6001600160a01b0316639f51290b6040518163ffffffff1660e01b8152600401604080518083038186803b158015611a0957600080fd5b505afa158015611a1d573d6000803e3d6000fd5b505050506040513d6040811015611a3357600080fd5b5080516020909101519092509050611a4b33846133f8565b3360009081526019602052604090205482014203811015611aac576040805162461bcd60e51b8152602060048201526016602482015275140e95d2551211149055d7d393d517d0531313d5d15160521b604482015290519081900360640190fd5b611ab633846134d7565b611abe6115b3565b611adf33611ada611acd61357e565b879063ffffffff61332a16565b6132aa565b611ae7612be0565b50505050565b60055460ff1690565b6000610d53611b036129b7565b846115a38560016000611b146129b7565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff612b8616565b7f000000000000000000000000000000000000000000000000000000000000000081565b611b76612b14565b6001600160a01b038083166000908152601660209081526040808320858516845290915280822054815163175f832960e01b8152915193169263175f83299260048084019391929182900301818387803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152600a6020526040812054600160801b90611c4a90611c4590611c39611c34611c25886120ed565b6009549063ffffffff6135ad16565b613606565b9063ffffffff61364716565b6136ac565b81611c5157fe5b0492915050565b611c60612b14565b612710611c93827f000000000000000000000000000000000000000000000000000000000000000063ffffffff612b8616565b1115611cd2576040805162461bcd60e51b8152602060048201526009602482015268503a4241445f46454560b81b604482015290519081900360640190fd5b60108190556040805182815290517f9408bb8c08d29b335e36090045074610352365476d9df02e203c25db4fcd67c09181900360200190a150565b6001600160a01b038116600090815260086020526040812054610d5790611d3384611e3b565b9063ffffffff61332a16565b6000611d49613387565b905060008113611d595750611605565b611d6a611d65826136ac565b6136ed565b50565b611d75612b14565b611d7f6000612b24565b6000611d89610d81565b50509250505080611dd1576040805162461bcd60e51b815260206004820152600d60248201526c503a494e5355465f5354414b4560981b604482015290519081900360640190fd5b601480546001919061ff0019166101008302179055506014546040517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a91610100900460ff169080826002811115611e2557fe5b60ff16815260200191505060405180910390a150565b6001600160a01b038116600090815260076020526040812054600160801b90611c4a90611c4590611c39611c34611e71886120ed565b6006549063ffffffff6135ad16565b60006001601454610100900460ff166002811115611e9a57fe5b14905090565b611ea8612b14565b611eb26001612b24565b73__$87c5565d2cb91337a618497edfeeda13b6$__63ad1a3323611ef57f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6011547f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001838152602001826001600160a01b03166001600160a01b03168152602001935050505060006040518083038186803b158015611f7f57600080fd5b505af4158015611f93573d6000803e3d6000fd5b50506014805461ff00191661020017908190556040517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a935061010090910460ff16915080826002811115611fe457fe5b60ff16815260200191505060405180910390a1565b60176020526000908152604090205460ff1681565b601454610100900460ff1681565b6001600160a01b0381166000908152600b6020526040812054610d5790611d3384611bef565b6040805163340e588560e11b81526001600160a01b0380871660048301528086166024830152808516604483015283166064820152905160009173__$87c5565d2cb91337a618497edfeeda13b6$__9163681cb10a91608480820192602092909190829003018186803b1580156120b857600080fd5b505af41580156120cc573d6000803e3d6000fd5b505050506040513d60208110156120e257600080fd5b505195945050505050565b6001600160a01b031660009081526020819052604090205490565b600c5481565b6000612119336120ed565b1415612159576040805162461bcd60e51b815260206004820152600a602482015269140e96915493d7d0905360b21b604482015290519081900360640190fd5b336000818152601960209081526040918290204290819055825190815291517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b6121ac612b14565b6001600160a01b038216600081815260186020908152604091829020805460ff1916851515908117909155825190815291517fdf56132520665b33cd5731c5cfbacd8bee82524e67df563bb25b2be304f91d449281900390910190a25050565b60125481565b61221a612c70565b612222612d40565b60128190556040805182815290517f3ff20538222f568f27ff436c0c49dfd3e48d5b8f86533a3f759dc1c7089775ab9181900360200190a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b60145460009060ff16806122a457503360009081526018602052604090205460ff165b8015610d5757506012546122cc836122c06011546122c06137ed565b9063ffffffff612b8616565b111592915050565b33600090815260196020526040902054612329576040805162461bcd60e51b8152602060048201526011602482015270503a4e4f545f5749544844524157494e4760781b604482015290519081900360640190fd5b3360008181526019602090815260408083208390558051928352517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d659281900390910190a2565b73__$87c5565d2cb91337a618497edfeeda13b6$__6385937648827f00000000000000000000000000000000000000000000000000000000000000006123d57f0000000000000000000000000000000000000000000000000000000000000000612aa7565b604080516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015290516064808301926000929190829003018186803b15801561242a57600080fd5b505af415801561243e573d6000803e3d6000fd5b5050505050565b61244d612b14565b6001600160a01b038216600081815260176020908152604091829020805460ff1916851515908117909155825190815291517f353578bbc0ab907b7018b0f7b50b5f822d31dc9fcf4c16fffa780e109ca7c9309281900390910190a25050565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d355780601f10610d0a57610100808354040283529160200191610d35565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e5481565b600d5481565b612546612b14565b6014805482151560ff19909116811790915560408051918252517feeba6fd794e30165023f7e3d017e92901622076a95d36e45906955e025ff4fe79181900360200190a150565b6000610d5361259a6129b7565b846115a38560405180606001604052806025815260200161487e60259139600160006125c46129b7565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61318e16565b6000610d536126086129b7565b8484613010565b60115481565b6001600160a01b03166000908152600b602052604090205490565b601b6020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b61266e612c70565b6126786001612b24565b61268181612281565b6126c6576040805162461bcd60e51b8152602060048201526011602482015270140e91115417d393d517d0531313d5d151607a1b604482015290519081900360640190fd5b3360009081526019602052604081208190556126e1826133ab565b90506126f860156126f1336120ed565b83336138b6565b6127536001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f00000000000000000000000000000000000000000000000000000000000000008563ffffffff61396f16565b61275d33826139c9565b612765612be0565b6040805160008152905133917f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d65919081900360200190a25050565b6040805163c374682560e01b81526001600160a01b0380881660048301528087166024830152808616604483015284166064820152608481018390528151600092839273__$87c5565d2cb91337a618497edfeeda13b6$__9263c37468259260a480840193919291829003018186803b15801561281c57600080fd5b505af4158015612830573d6000803e3d6000fd5b505050506040513d604081101561284657600080fd5b508051602090910151909890975095505050505050565b60186020526000908152604090205460ff1681565b61287a612b14565b6013548111156128bf576040805162461bcd60e51b815260206004820152600b60248201526a503a4241445f56414c554560a81b604482015290519081900360640190fd5b60138190556040805182815290517f3094b4ce0463766c3cd81ed2ae2451610dcac39a1061fa023ca9d3d4df959f759181900360200190a150565b601a60209081526000928352604080842090915290825290205481565b6000612921613a15565b9050600081136129315750611605565b611d6a61293d826136ac565b613a33565b60166020908152600092835260408084209091529082529020546001600160a01b031681565b60196020526000908152604090205481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60135481565b60105481565b600f5481565b3390565b6001600160a01b038316612a005760405162461bcd60e51b815260040180806020018281038252602481526020018061480c6024913960400191505060405180910390fd5b6001600160a01b038216612a455760405162461bcd60e51b81526004018080602001828103825260228152602001806146ee6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000816001600160a01b031663c31245256040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae257600080fd5b505afa158015612af6573d6000803e3d6000fd5b505050506040513d6020811015612b0c57600080fd5b505192915050565b612b1c613b38565b611605612c70565b806002811115612b3057fe5b601454610100900460ff166002811115612b4657fe5b14611d6a576040805162461bcd60e51b815260206004820152600b60248201526a503a4241445f535441544560a81b604482015290519081900360640190fd5b6000828201838110156115ac576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a2612c5d6137ed565b60408051918252519081900360200190a3565b612c997f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6001600160a01b031663425fad586040518163ffffffff1660e01b815260040160206040518083038186803b158015612cd157600080fd5b505afa158015612ce5573d6000803e3d6000fd5b505050506040513d6020811015612cfb57600080fd5b505115611605576040805162461bcd60e51b815260206004820152600e60248201526d140e941493d513d7d4105554d15160921b604482015290519081900360640190fd5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612d8657503360009081526017602052604090205460ff165b611605576040805162461bcd60e51b8152602060048201526012602482015271281d2727aa2fa222a62fa7a92fa0a226a4a760711b604482015290519081900360640190fd5b6116026001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838363ffffffff613ba116565b6040805162715b0960e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f00000000000000000000000000000000000000000000000000000000000000001660448201526064810183905290516000918291829173__$87c5565d2cb91337a618497edfeeda13b6$__91630715b09091608480820192606092909190829003018186803b158015612ede57600080fd5b505af4158015612ef2573d6000803e3d6000fd5b505050506040513d6060811015612f0857600080fd5b5080516020820151604090920151909450909250905080841115612f4657600d54612f3b9082860363ffffffff612b8616565b600d55612f46612917565b612fa06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008363ffffffff613ba116565b601154612fb3908563ffffffff61332a16565b60115560408051858152602081018590528082018490526060810183905290516001600160a01b038716917fd393d18014c1898545668c52621bced9493753be5b8138f2539542ca606732eb919081900360800190a25050505050565b613018612c70565b6000806130447f0000000000000000000000000000000000000000000000000000000000000000612aa7565b6001600160a01b0316639f51290b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561307b57600080fd5b505afa15801561308f573d6000803e3d6000fd5b505050506040513d60408110156130a557600080fd5b50805160209091015190925090506130bd85846133f8565b6001600160a01b038416600090815260196020526040902054820181014211613120576040805162461bcd60e51b815260206004820152601060248201526f140e9513d7d393d517d0531313d5d15160821b604482015290519081900360640190fd5b600061312b8661201c565b1461316e576040805162461bcd60e51b815260206004820152600e60248201526d503a5245434f475f4c4f5353455360901b604482015290519081900360640190fd5b613183601561317c866120ed565b85876138b6565b61243e858585613bf3565b6000818484111561321d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e25781810151838201526020016131ca565b50505050905090810190601f16801561320f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061323033611d0d565b3360009081526008602052604081205491925090613254908363ffffffff612b8616565b336000818152600860209081526040918290208490558151868152908101849052815193945091927ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb49281900390910190a25090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611bd357600080fd5b600082821115613381576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600e8054600c54918290556000916133a5908263ffffffff613d1f16565b91505090565b6000610d577f0000000000000000000000000000000000000000000000000000000000000000600a0a6133ec84670de0b6b3a764000063ffffffff6135ad16565b9063ffffffff613d8416565b6013546001600160a01b0383166000908152601560205260409020544291613426919063ffffffff612b8616565b111561346a576040805162461bcd60e51b815260206004820152600e60248201526d140e9195539114d7d313d0d2d15160921b604482015290519081900360640190fd5b6001600160a01b0382166000908152601b602052604090205461349082611d33856120ed565b1015611602576040805162461bcd60e51b8152602060048201526011602482015270140e925394d55197d514905394d7d09053607a1b604482015290519081900360640190fd5b6134e18282613deb565b60006135236134fe611c34846009546135ad90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff61364716565b6001600160a01b0384166000818152600a60209081526040918290208490558151848152915193945091927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a2505050565b6000613588613e92565b600d5490915061359e908263ffffffff61332a16565b600d556135a9613a15565b5090565b6000826135bc57506000610d57565b828202828482816135c957fe5b04146115ac5760405162461bcd60e51b815260040180806020018281038252602181526020018061477d6021913960400191505060405180910390fd5b806000811215610c80576040805162461bcd60e51b815260206004820152600760248201526629a6aa9d27a7a160c91b604482015290519081900360640190fd5b600082820181831280159061365c5750838112155b80613671575060008312801561367157508381125b6115ac5760405162461bcd60e51b81526004018080602001828103825260218152602001806147366021913960400191505060405180910390fd5b6000808212156135a9576040805162461bcd60e51b8152602060048201526007602482015266534d493a4e454760c81b604482015290519081900360640190fd5b60006136f7610f09565b1161373b576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b8061374557611d6a565b61377c613750610f09565b61376483600160801b63ffffffff6135ad16565b8161376b57fe5b60065491900463ffffffff612b8616565b60065560408051828152905133917f26536799ace2c3dbe12e638ec3ade6b4173dcf1289be0a58d51a5003015649bd919081900360200190a260065460408051918252517f1f8d7705f31c3337a080803a8ad7e71946fb88d84738879be2bf402f97156e969181900360200190a150565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561388557600080fd5b505afa158015613899573d6000803e3d6000fd5b505050506040513d60208110156138af57600080fd5b5051905090565b6001600160a01b038116600090815260208590526040812054908484016138dd5781613913565b6139136139068686016133ec876138fa428863ffffffff61332a16565b9063ffffffff6135ad16565b839063ffffffff612b8616565b6001600160a01b038416600081815260208981526040918290208490558151848152915193945091927ff9b842c70d79466435b46540bb988aa5c998b3243bf91c36380ddb5887c0f0e4929181900390910190a2505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ae7908590613f17565b6139d38282613fc8565b60006135236139f0611c34846009546135ad90919063ffffffff16565b6001600160a01b0385166000908152600a60205260409020549063ffffffff613d1f16565b600f8054600d54918290556000916133a5908263ffffffff613d1f16565b6000613a3d610f09565b11613a81576040805162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b604482015290519081900360640190fd5b80613a8b57611d6a565b6000613ac4613a98610f09565b613aac84600160801b63ffffffff6135ad16565b81613ab357fe5b60095491900463ffffffff612b8616565b600981905560408051848152905191925033917ff88156a8032a0d2c65df18fafaf84e0bea647b3d94a0f7fc6ab14c97dec2bf749181900360200190a26040805182815290517f240ce2b5ce9e9e5a70010c7f8034c233d89b7ce2d60f3a38d9bc3ca01a36f88c9181900360200190a15050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611605576040805162461bcd60e51b8152602060048201526009602482015268140e9393d517d1115360ba1b604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611020908490613f17565b613bfe838383614014565b6000613c18611c34836009546135ad90919063ffffffff16565b6001600160a01b0385166000908152600a602052604081205491925090613c45908363ffffffff61364716565b6001600160a01b038087166000908152600a602052604080822084905591871681529081205491925090613c7f908463ffffffff613d1f16565b6001600160a01b038087166000908152600a602090815260409182902084905581518681529151939450918916927fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3929181900390910190a26040805182815290516001600160a01b038716917fb464de3159e090617503d0166bff9ffeecdefd42cd9dbb49f918df95a80fdea3919081900360200190a2505050505050565b6000818303818312801590613d345750838113155b80613d495750600083128015613d4957508381135b6115ac5760405162461bcd60e51b81526004018080602001828103825260248152602001806148306024913960400191505060405180910390fd5b6000808211613dda576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613de357fe5b049392505050565b613df58282614140565b6000613e37613e12611c34846006546135ad90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff61364716565b6001600160a01b0384166000818152600760209081526040918290208490558151848152915193945091927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a2505050565b6000613e9d3361201c565b336000908152600b602052604081205491925090613ec1908363ffffffff612b8616565b336000818152600b60209081526040918290208490558151868152908101849052815193945091927f814eba35782909dbbaeefb8104073dfca45de43173f7077970c1584b3cf918b59281900390910190a25090565b6060613f6c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142489092919063ffffffff16565b80519091501561102057808060200190516020811015613f8b57600080fd5b50516110205760405162461bcd60e51b815260040180806020018281038252602a815260200180614854602a913960400191505060405180910390fd5b613fd2828261425f565b6000613e37613fef611c34846006546135ad90919063ffffffff16565b6001600160a01b0385166000908152600760205260409020549063ffffffff613d1f16565b61401f83838361435b565b6000614039611c34836006546135ad90919063ffffffff16565b6001600160a01b03851660009081526007602052604081205491925090614066908363ffffffff61364716565b6001600160a01b03808716600090815260076020526040808220849055918716815290812054919250906140a0908463ffffffff613d1f16565b6001600160a01b0380871660009081526007602090815260409182902084905581518681529151939450918916927ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773929181900390910190a26040805182815290516001600160a01b038716917ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa7773919081900360200190a2505050505050565b6001600160a01b0382166141855760405162461bcd60e51b81526004018080602001828103825260218152602001806147c66021913960400191505060405180910390fd5b61419182600083611020565b6141d4816040518060600160405280602281526020016146cc602291396001600160a01b038516600090815260208190526040902054919063ffffffff61318e16565b6001600160a01b038316600090815260208190526040902055600254614200908263ffffffff61332a16565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b606061425784846000856144c2565b949350505050565b6001600160a01b0382166142ba576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6142c660008383611020565b6002546142d9908263ffffffff612b8616565b6002556001600160a01b038216600090815260208190526040902054614305908263ffffffff612b8616565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0383166143a05760405162461bcd60e51b81526004018080602001828103825260258152602001806147e76025913960400191505060405180910390fd5b6001600160a01b0382166143e55760405162461bcd60e51b81526004018080602001828103825260238152602001806146a96023913960400191505060405180910390fd5b6143f0838383611020565b61443381604051806060016040528060268152602001614710602691396001600160a01b038616600090815260208190526040902054919063ffffffff61318e16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054614468908263ffffffff612b8616565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6060824710156145035760405162461bcd60e51b81526004018080602001828103825260268152602001806147576026913960400191505060405180910390fd5b61450c8561461e565b61455d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061459c5780518252601f19909201916020918201910161457d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146145fe576040519150601f19603f3d011682016040523d82523d6000602084013e614603565b606091505b5091509150614613828286614624565b979650505050505050565b3b151590565b606083156146335750816115ac565b8251156146435782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131e25781810151838201526020016131ca565b6040518060e00160405280600790602082028036833750919291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212205fdbbcc475442bdb059c24b64c51f1582ef21c2201fc017086757d4310d2619264736f6c634300060b0033a26469706673582212202426f36531c92b4a73f0417cc93fae8a8acd8f9c8aaef507a41ce93cc456ccd964736f6c634300060b0033",
  "libraries": {
    "PoolLib": "0x64b0dD6Fef23172abfE34fae0B954FE66F270274"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool(address,address,address,address,uint256,uint256,uint256)": {
        "details": "Instantiates a Pool.It emits a `PoolCreated` event.",
        "params": {
          "delegateFee": "Fee that the Pool Delegate earns on interest, in basis points.",
          "liquidityAsset": "The asset escrowed in a LiquidityLocker.",
          "liquidityCap": "Amount of Liquidity Asset accepted by the Pool.",
          "llFactory": "The factory to instantiate a LiquidityLocker from.",
          "slFactory": "The factory to instantiate a StakeLocker from.",
          "stakeAsset": "The asset escrowed in a StakeLocker.",
          "stakingFee": "Fee that Stakers earn on interest, in basis points."
        },
        "returns": {
          "poolAddress": "   Address of the instantiated Pool."
        }
      },
      "pause()": {
        "details": "Triggers paused state. Halts functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setGlobals(address)": {
        "details": "Sets HeliosGlobals instance. Only the Governor can call this function.",
        "params": {
          "newGlobals": "Address of new HeliosGlobals."
        }
      },
      "setPoolFactoryAdmin(address,bool)": {
        "details": "Sets a PoolFactory Admin. Only the Governor can call this function.It emits a `PoolFactoryAdminSet` event.",
        "params": {
          "allowed": "Status of a PoolFactory Admin.",
          "poolFactoryAdmin": "An address being allowed or disallowed as a PoolFactory Admin."
        }
      },
      "unpause()": {
        "details": "Triggers unpaused state. Restores functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function."
      }
    },
    "title": "PoolFactory instantiates Pools.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1847,
        "contract": "packages/protocol/contracts/PoolFactory.sol:PoolFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9989,
        "contract": "packages/protocol/contracts/PoolFactory.sol:PoolFactory",
        "label": "poolsCreated",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9991,
        "contract": "packages/protocol/contracts/PoolFactory.sol:PoolFactory",
        "label": "globals",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IHeliosGlobals)12443"
      },
      {
        "astId": 9995,
        "contract": "packages/protocol/contracts/PoolFactory.sol:PoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9999,
        "contract": "packages/protocol/contracts/PoolFactory.sol:PoolFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10003,
        "contract": "packages/protocol/contracts/PoolFactory.sol:PoolFactory",
        "label": "poolFactoryAdmins",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHeliosGlobals)12443": {
        "encoding": "inplace",
        "label": "contract IHeliosGlobals",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}